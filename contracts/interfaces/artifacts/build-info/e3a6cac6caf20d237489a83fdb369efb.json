{
	"id": "e3a6cac6caf20d237489a83fdb369efb",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.30",
	"solcLongVersion": "0.8.30+commit.73712a01",
	"input": {
		"language": "Solidity",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"viaIR": true,
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		},
		"sources": {
			"contracts/interfaces/ISimpleSwap.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @title ISimpleSwap\n * @dev Interface for the SimpleSwap decentralized exchange contract\n * @notice Defines the core functionality for:\n * - Adding/removing liquidity from token pairs\n * - Swapping tokens with price calculations\n * - Querying token prices and swap amounts\n */\ninterface ISimpleSwap {\n    // ==============================================\n    //              LIQUIDITY FUNCTIONS\n    // ==============================================\n\n    /**\n     * @notice Adds liquidity to a token pair\n     * @dev Mints LP tokens representing pool share\n     * @param tokenA First token in pair\n     * @param tokenB Second token in pair\n     * @param amountADesired Desired amount of tokenA to deposit\n     * @param amountBDesired Desired amount of tokenB to deposit\n     * @param amountAMin Minimum acceptable amount of tokenA\n     * @param amountBMin Minimum acceptable amount of tokenB\n     * @param to Recipient of LP tokens\n     * @param deadline Transaction expiry timestamp\n     * @return amountA Actual amount of tokenA deposited\n     * @return amountB Actual amount of tokenB deposited\n     * @return liquidity Amount of LP tokens minted\n     */\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    /**\n     * @notice Removes liquidity from a token pair\n     * @dev Burns LP tokens and returns underlying assets\n     * @param tokenA First token in pair\n     * @param tokenB Second token in pair\n     * @param liquidity Amount of LP tokens to burn\n     * @param amountAMin Minimum acceptable amount of tokenA\n     * @param amountBMin Minimum acceptable amount of tokenB\n     * @param to Recipient of withdrawn tokens\n     * @param deadline Transaction expiry timestamp\n     * @return amountA Amount of tokenA withdrawn\n     * @return amountB Amount of tokenB withdrawn\n     */\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    // ==============================================\n    //                 SWAP FUNCTIONS\n    // ==============================================\n\n    /**\n     * @notice Swaps exact input tokens for output tokens\n     * @dev Uses constant product market maker formula\n     * @param amountIn Exact amount of input tokens\n     * @param amountOutMin Minimum acceptable output amount\n     * @param path Array with [inputToken, outputToken]\n     * @param to Recipient of output tokens\n     * @param deadline Transaction expiry timestamp\n     * @return amounts Array containing [inputAmount, outputAmount]\n     */\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    // ==============================================\n    //                 VIEW FUNCTIONS\n    // ==============================================\n\n    /**\n     * @notice Gets price of tokenA in terms of tokenB\n     * @dev Price is calculated as reserveB/reserveA\n     * @param tokenA First token in pair\n     * @param tokenB Second token in pair\n     * @return price Price ratio with 18 decimals precision\n     */\n    function getPrice(address tokenA, address tokenB)\n        external\n        view\n        returns (uint256 price);\n\n    /**\n     * @notice Calculates output amount for given input\n     * @dev Uses formula: amountOut = (amountIn * reserveOut) / (reserveIn + amountIn)\n     * @param amountIn Input token amount\n     * @param reserveIn Reserve of input token\n     * @param reserveOut Reserve of output token\n     * @return amountOut Expected output amount\n     */\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n}\n"
			}
		}
	},
	"output": {
		"contracts": {
			"contracts/interfaces/ISimpleSwap.sol": {
				"ISimpleSwap": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenA",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenB",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amountADesired",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amountBDesired",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amountAMin",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amountBMin",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "addLiquidity",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountA",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amountB",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "liquidity",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "reserveIn",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "reserveOut",
									"type": "uint256"
								}
							],
							"name": "getAmountOut",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenA",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenB",
									"type": "address"
								}
							],
							"name": "getPrice",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "price",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenA",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenB",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "liquidity",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amountAMin",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amountBMin",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "removeLiquidity",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountA",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amountB",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amountOutMin",
									"type": "uint256"
								},
								{
									"internalType": "address[]",
									"name": "path",
									"type": "address[]"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "swapExactTokensForTokens",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "amounts",
									"type": "uint256[]"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the SimpleSwap decentralized exchange contract",
						"kind": "dev",
						"methods": {
							"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": {
								"details": "Mints LP tokens representing pool share",
								"params": {
									"amountADesired": "Desired amount of tokenA to deposit",
									"amountAMin": "Minimum acceptable amount of tokenA",
									"amountBDesired": "Desired amount of tokenB to deposit",
									"amountBMin": "Minimum acceptable amount of tokenB",
									"deadline": "Transaction expiry timestamp",
									"to": "Recipient of LP tokens",
									"tokenA": "First token in pair",
									"tokenB": "Second token in pair"
								},
								"returns": {
									"amountA": "Actual amount of tokenA deposited",
									"amountB": "Actual amount of tokenB deposited",
									"liquidity": "Amount of LP tokens minted"
								}
							},
							"getAmountOut(uint256,uint256,uint256)": {
								"details": "Uses formula: amountOut = (amountIn * reserveOut) / (reserveIn + amountIn)",
								"params": {
									"amountIn": "Input token amount",
									"reserveIn": "Reserve of input token",
									"reserveOut": "Reserve of output token"
								},
								"returns": {
									"amountOut": "Expected output amount"
								}
							},
							"getPrice(address,address)": {
								"details": "Price is calculated as reserveB/reserveA",
								"params": {
									"tokenA": "First token in pair",
									"tokenB": "Second token in pair"
								},
								"returns": {
									"price": "Price ratio with 18 decimals precision"
								}
							},
							"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": {
								"details": "Burns LP tokens and returns underlying assets",
								"params": {
									"amountAMin": "Minimum acceptable amount of tokenA",
									"amountBMin": "Minimum acceptable amount of tokenB",
									"deadline": "Transaction expiry timestamp",
									"liquidity": "Amount of LP tokens to burn",
									"to": "Recipient of withdrawn tokens",
									"tokenA": "First token in pair",
									"tokenB": "Second token in pair"
								},
								"returns": {
									"amountA": "Amount of tokenA withdrawn",
									"amountB": "Amount of tokenB withdrawn"
								}
							},
							"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": {
								"details": "Uses constant product market maker formula",
								"params": {
									"amountIn": "Exact amount of input tokens",
									"amountOutMin": "Minimum acceptable output amount",
									"deadline": "Transaction expiry timestamp",
									"path": "Array with [inputToken, outputToken]",
									"to": "Recipient of output tokens"
								},
								"returns": {
									"amounts": "Array containing [inputAmount, outputAmount]"
								}
							}
						},
						"title": "ISimpleSwap",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": "e8e33700",
							"getAmountOut(uint256,uint256,uint256)": "054d50d4",
							"getPrice(address,address)": "ac41865a",
							"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": "baa2abde",
							"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": "38ed1739"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the SimpleSwap decentralized exchange contract\",\"kind\":\"dev\",\"methods\":{\"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)\":{\"details\":\"Mints LP tokens representing pool share\",\"params\":{\"amountADesired\":\"Desired amount of tokenA to deposit\",\"amountAMin\":\"Minimum acceptable amount of tokenA\",\"amountBDesired\":\"Desired amount of tokenB to deposit\",\"amountBMin\":\"Minimum acceptable amount of tokenB\",\"deadline\":\"Transaction expiry timestamp\",\"to\":\"Recipient of LP tokens\",\"tokenA\":\"First token in pair\",\"tokenB\":\"Second token in pair\"},\"returns\":{\"amountA\":\"Actual amount of tokenA deposited\",\"amountB\":\"Actual amount of tokenB deposited\",\"liquidity\":\"Amount of LP tokens minted\"}},\"getAmountOut(uint256,uint256,uint256)\":{\"details\":\"Uses formula: amountOut = (amountIn * reserveOut) / (reserveIn + amountIn)\",\"params\":{\"amountIn\":\"Input token amount\",\"reserveIn\":\"Reserve of input token\",\"reserveOut\":\"Reserve of output token\"},\"returns\":{\"amountOut\":\"Expected output amount\"}},\"getPrice(address,address)\":{\"details\":\"Price is calculated as reserveB/reserveA\",\"params\":{\"tokenA\":\"First token in pair\",\"tokenB\":\"Second token in pair\"},\"returns\":{\"price\":\"Price ratio with 18 decimals precision\"}},\"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)\":{\"details\":\"Burns LP tokens and returns underlying assets\",\"params\":{\"amountAMin\":\"Minimum acceptable amount of tokenA\",\"amountBMin\":\"Minimum acceptable amount of tokenB\",\"deadline\":\"Transaction expiry timestamp\",\"liquidity\":\"Amount of LP tokens to burn\",\"to\":\"Recipient of withdrawn tokens\",\"tokenA\":\"First token in pair\",\"tokenB\":\"Second token in pair\"},\"returns\":{\"amountA\":\"Amount of tokenA withdrawn\",\"amountB\":\"Amount of tokenB withdrawn\"}},\"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)\":{\"details\":\"Uses constant product market maker formula\",\"params\":{\"amountIn\":\"Exact amount of input tokens\",\"amountOutMin\":\"Minimum acceptable output amount\",\"deadline\":\"Transaction expiry timestamp\",\"path\":\"Array with [inputToken, outputToken]\",\"to\":\"Recipient of output tokens\"},\"returns\":{\"amounts\":\"Array containing [inputAmount, outputAmount]\"}}},\"title\":\"ISimpleSwap\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Adds liquidity to a token pair\"},\"getAmountOut(uint256,uint256,uint256)\":{\"notice\":\"Calculates output amount for given input\"},\"getPrice(address,address)\":{\"notice\":\"Gets price of tokenA in terms of tokenB\"},\"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Removes liquidity from a token pair\"},\"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)\":{\"notice\":\"Swaps exact input tokens for output tokens\"}},\"notice\":\"Defines the core functionality for: - Adding/removing liquidity from token pairs - Swapping tokens with price calculations - Querying token prices and swap amounts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/ISimpleSwap.sol\":\"ISimpleSwap\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/interfaces/ISimpleSwap.sol\":{\"keccak256\":\"0xad15620f4ce09de7e036d99aa567ad8b3f259cd6cbddd7ff140377cc11beb0e9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d475f367c38a03d75116d298007056ec69db2e6510c633da05953f18b5916cec\",\"dweb:/ipfs/QmVNDfCHxvbzRAWvuN4MZoFpJo7x4pqosEk4hZgFkZyr8p\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": {
								"notice": "Adds liquidity to a token pair"
							},
							"getAmountOut(uint256,uint256,uint256)": {
								"notice": "Calculates output amount for given input"
							},
							"getPrice(address,address)": {
								"notice": "Gets price of tokenA in terms of tokenB"
							},
							"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": {
								"notice": "Removes liquidity from a token pair"
							},
							"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": {
								"notice": "Swaps exact input tokens for output tokens"
							}
						},
						"notice": "Defines the core functionality for: - Adding/removing liquidity from token pairs - Swapping tokens with price calculations - Querying token prices and swap amounts",
						"version": 1
					}
				}
			}
		},
		"sources": {
			"contracts/interfaces/ISimpleSwap.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/ISimpleSwap.sol",
					"exportedSymbols": {
						"ISimpleSwap": [
							91
						]
					},
					"id": 92,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ISimpleSwap",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "57:282:0",
								"text": " @title ISimpleSwap\n @dev Interface for the SimpleSwap decentralized exchange contract\n @notice Defines the core functionality for:\n - Adding/removing liquidity from token pairs\n - Swapping tokens with price calculations\n - Querying token prices and swap amounts"
							},
							"fullyImplemented": false,
							"id": 91,
							"linearizedBaseContracts": [
								91
							],
							"name": "ISimpleSwap",
							"nameLocation": "350:11:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "517:702:0",
										"text": " @notice Adds liquidity to a token pair\n @dev Mints LP tokens representing pool share\n @param tokenA First token in pair\n @param tokenB Second token in pair\n @param amountADesired Desired amount of tokenA to deposit\n @param amountBDesired Desired amount of tokenB to deposit\n @param amountAMin Minimum acceptable amount of tokenA\n @param amountBMin Minimum acceptable amount of tokenB\n @param to Recipient of LP tokens\n @param deadline Transaction expiry timestamp\n @return amountA Actual amount of tokenA deposited\n @return amountB Actual amount of tokenB deposited\n @return liquidity Amount of LP tokens minted"
									},
									"functionSelector": "e8e33700",
									"id": 28,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "addLiquidity",
									"nameLocation": "1233:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 20,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"mutability": "mutable",
												"name": "tokenA",
												"nameLocation": "1263:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 28,
												"src": "1255:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1255:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 7,
												"mutability": "mutable",
												"name": "tokenB",
												"nameLocation": "1287:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 28,
												"src": "1279:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 6,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1279:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 9,
												"mutability": "mutable",
												"name": "amountADesired",
												"nameLocation": "1311:14:0",
												"nodeType": "VariableDeclaration",
												"scope": 28,
												"src": "1303:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 8,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1303:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 11,
												"mutability": "mutable",
												"name": "amountBDesired",
												"nameLocation": "1343:14:0",
												"nodeType": "VariableDeclaration",
												"scope": 28,
												"src": "1335:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 10,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1335:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 13,
												"mutability": "mutable",
												"name": "amountAMin",
												"nameLocation": "1375:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 28,
												"src": "1367:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 12,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1367:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 15,
												"mutability": "mutable",
												"name": "amountBMin",
												"nameLocation": "1403:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 28,
												"src": "1395:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 14,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1395:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 17,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1431:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 28,
												"src": "1423:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 16,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1423:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 19,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "1451:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 28,
												"src": "1443:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 18,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1443:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1245:220:0"
									},
									"returnParameters": {
										"id": 27,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 22,
												"mutability": "mutable",
												"name": "amountA",
												"nameLocation": "1521:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 28,
												"src": "1513:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 21,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1513:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 24,
												"mutability": "mutable",
												"name": "amountB",
												"nameLocation": "1550:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 28,
												"src": "1542:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 23,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1542:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 26,
												"mutability": "mutable",
												"name": "liquidity",
												"nameLocation": "1579:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 28,
												"src": "1571:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 25,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1571:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1499:99:0"
									},
									"scope": 91,
									"src": "1224:375:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 29,
										"nodeType": "StructuredDocumentation",
										"src": "1605:576:0",
										"text": " @notice Removes liquidity from a token pair\n @dev Burns LP tokens and returns underlying assets\n @param tokenA First token in pair\n @param tokenB Second token in pair\n @param liquidity Amount of LP tokens to burn\n @param amountAMin Minimum acceptable amount of tokenA\n @param amountBMin Minimum acceptable amount of tokenB\n @param to Recipient of withdrawn tokens\n @param deadline Transaction expiry timestamp\n @return amountA Amount of tokenA withdrawn\n @return amountB Amount of tokenB withdrawn"
									},
									"functionSelector": "baa2abde",
									"id": 50,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "removeLiquidity",
									"nameLocation": "2195:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 44,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 31,
												"mutability": "mutable",
												"name": "tokenA",
												"nameLocation": "2228:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 50,
												"src": "2220:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 30,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2220:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 33,
												"mutability": "mutable",
												"name": "tokenB",
												"nameLocation": "2252:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 50,
												"src": "2244:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 32,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2244:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 35,
												"mutability": "mutable",
												"name": "liquidity",
												"nameLocation": "2276:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 50,
												"src": "2268:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 34,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2268:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 37,
												"mutability": "mutable",
												"name": "amountAMin",
												"nameLocation": "2303:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 50,
												"src": "2295:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 36,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2295:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 39,
												"mutability": "mutable",
												"name": "amountBMin",
												"nameLocation": "2331:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 50,
												"src": "2323:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 38,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2323:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 41,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2359:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 50,
												"src": "2351:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 40,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2351:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 43,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "2379:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 50,
												"src": "2371:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 42,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2371:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2210:183:0"
									},
									"returnParameters": {
										"id": 49,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 46,
												"mutability": "mutable",
												"name": "amountA",
												"nameLocation": "2420:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 50,
												"src": "2412:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 45,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2412:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 48,
												"mutability": "mutable",
												"name": "amountB",
												"nameLocation": "2437:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 50,
												"src": "2429:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 47,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2429:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2411:34:0"
									},
									"scope": 91,
									"src": "2186:260:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 51,
										"nodeType": "StructuredDocumentation",
										"src": "2599:456:0",
										"text": " @notice Swaps exact input tokens for output tokens\n @dev Uses constant product market maker formula\n @param amountIn Exact amount of input tokens\n @param amountOutMin Minimum acceptable output amount\n @param path Array with [inputToken, outputToken]\n @param to Recipient of output tokens\n @param deadline Transaction expiry timestamp\n @return amounts Array containing [inputAmount, outputAmount]"
									},
									"functionSelector": "38ed1739",
									"id": 68,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "swapExactTokensForTokens",
									"nameLocation": "3069:24:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 53,
												"mutability": "mutable",
												"name": "amountIn",
												"nameLocation": "3111:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 68,
												"src": "3103:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 52,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3103:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 55,
												"mutability": "mutable",
												"name": "amountOutMin",
												"nameLocation": "3137:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 68,
												"src": "3129:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 54,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3129:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 58,
												"mutability": "mutable",
												"name": "path",
												"nameLocation": "3178:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 68,
												"src": "3159:23:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 56,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "3159:7:0",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 57,
													"nodeType": "ArrayTypeName",
													"src": "3159:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 60,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3200:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 68,
												"src": "3192:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 59,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3192:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 62,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "3220:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 68,
												"src": "3212:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 61,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3212:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3093:141:0"
									},
									"returnParameters": {
										"id": 67,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 66,
												"mutability": "mutable",
												"name": "amounts",
												"nameLocation": "3270:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 68,
												"src": "3253:24:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 64,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "3253:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 65,
													"nodeType": "ArrayTypeName",
													"src": "3253:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3252:26:0"
									},
									"scope": 91,
									"src": "3060:219:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 69,
										"nodeType": "StructuredDocumentation",
										"src": "3432:262:0",
										"text": " @notice Gets price of tokenA in terms of tokenB\n @dev Price is calculated as reserveB/reserveA\n @param tokenA First token in pair\n @param tokenB Second token in pair\n @return price Price ratio with 18 decimals precision"
									},
									"functionSelector": "ac41865a",
									"id": 78,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getPrice",
									"nameLocation": "3708:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 74,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "tokenA",
												"nameLocation": "3725:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 78,
												"src": "3717:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 70,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3717:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 73,
												"mutability": "mutable",
												"name": "tokenB",
												"nameLocation": "3741:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 78,
												"src": "3733:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 72,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3733:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3716:32:0"
									},
									"returnParameters": {
										"id": 77,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 76,
												"mutability": "mutable",
												"name": "price",
												"nameLocation": "3804:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 78,
												"src": "3796:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 75,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3796:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3795:15:0"
									},
									"scope": 91,
									"src": "3699:112:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 79,
										"nodeType": "StructuredDocumentation",
										"src": "3817:340:0",
										"text": " @notice Calculates output amount for given input\n @dev Uses formula: amountOut = (amountIn * reserveOut) / (reserveIn + amountIn)\n @param amountIn Input token amount\n @param reserveIn Reserve of input token\n @param reserveOut Reserve of output token\n @return amountOut Expected output amount"
									},
									"functionSelector": "054d50d4",
									"id": 90,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getAmountOut",
									"nameLocation": "4171:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 86,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 81,
												"mutability": "mutable",
												"name": "amountIn",
												"nameLocation": "4201:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 90,
												"src": "4193:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 80,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4193:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 83,
												"mutability": "mutable",
												"name": "reserveIn",
												"nameLocation": "4227:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 90,
												"src": "4219:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 82,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4219:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 85,
												"mutability": "mutable",
												"name": "reserveOut",
												"nameLocation": "4254:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 90,
												"src": "4246:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 84,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4246:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4183:87:0"
									},
									"returnParameters": {
										"id": 89,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 88,
												"mutability": "mutable",
												"name": "amountOut",
												"nameLocation": "4302:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 90,
												"src": "4294:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 87,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4294:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4293:19:0"
									},
									"scope": 91,
									"src": "4162:151:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 92,
							"src": "340:3975:0",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "32:4284:0"
				},
				"id": 0
			}
		}
	}
}