{
	"id": "9e4df375b51b70688d36545102dcb0d1",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.30",
	"solcLongVersion": "0.8.30+commit.73712a01",
	"input": {
		"language": "Solidity",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"viaIR": true,
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		},
		"sources": {
			"contracts/SimpleSwap.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./interfaces/ISimpleSwap.sol\";\n\n/**\n * @title SimpleSwap\n * @dev Implements a basic Uniswap V2-style decentralized exchange with:\n * - Liquidity pool creation\n * - Token swapping functionality\n * - LP (Liquidity Provider) token issuance\n * @author Francisco LÃ³pez G.\n */\ncontract SimpleSwap is ERC20, ISimpleSwap {\n    using SafeERC20 for IERC20;\n\n    // ==============================================\n    //                   STRUCTS\n    // ==============================================\n\n    /**\n     * @dev Structure to store token pair reserves\n     * @param reserveA Reserve amount of first token\n     * @param reserveB Reserve amount of second token\n     */\n    struct Pool {\n        uint256 reserveA;\n        uint256 reserveB;\n    }\n\n    // ==============================================\n    //                STATE VARIABLES\n    // ==============================================\n\n    /**\n     * @notice Mapping of token pairs to their reserve balances\n     * @dev pools[token0][token1] stores reserves for sorted token pair\n     */\n    mapping(address => mapping(address => Pool)) public pools;\n\n    // ==============================================\n    //                   EVENTS\n    // ==============================================\n\n    /**\n     * @notice Emitted when liquidity is added to a pool\n     * @param provider Address providing the liquidity\n     * @param tokenA First token in pair\n     * @param tokenB Second token in pair\n     * @param amountA Amount of first token added\n     * @param amountB Amount of second token added\n     * @param liquidity Amount of LP tokens minted\n     */\n    event LiquidityAdded(\n        address indexed provider,\n        address indexed tokenA,\n        address indexed tokenB,\n        uint256 amountA,\n        uint256 amountB,\n        uint256 liquidity\n    );\n\n    /**\n     * @notice Emitted when liquidity is removed from a pool\n     * @param provider Address removing the liquidity\n     * @param tokenA First token in pair\n     * @param tokenB Second token in pair\n     * @param amountA Amount of first token withdrawn\n     * @param amountB Amount of second token withdrawn\n     * @param liquidity Amount of LP tokens burned\n     */\n    event LiquidityRemoved(\n        address indexed provider,\n        address indexed tokenA,\n        address indexed tokenB,\n        uint256 amountA,\n        uint256 amountB,\n        uint256 liquidity\n    );\n\n    /**\n     * @notice Emitted when a token swap occurs\n     * @param sender Address initiating the swap\n     * @param tokenIn Input token address\n     * @param tokenOut Output token address\n     * @param amountIn Amount of input tokens\n     * @param amountOut Amount of output tokens\n     */\n    event Swap(\n        address indexed sender,\n        address indexed tokenIn,\n        address indexed tokenOut,\n        uint256 amountIn,\n        uint256 amountOut\n    );\n\n    // ==============================================\n    //                 MODIFIERS\n    // ==============================================\n\n    /**\n     * @dev Ensures transaction is executed before deadline\n     * @param deadline Timestamp after which transaction should fail\n     */\n    modifier ensureDeadline(uint256 deadline) {\n        require(deadline >= block.timestamp, \"Deadline passed\");\n        _;\n    }\n\n    /**\n     * @dev Ensures token addresses are different\n     * @param tokenA First token address\n     * @param tokenB Second token address\n     */\n    modifier validPair(address tokenA, address tokenB) {\n        require(tokenA != tokenB, \"Identical tokens\");\n        _;\n    }\n\n    // ==============================================\n    //              CONSTRUCTOR\n    // ==============================================\n\n    /**\n     * @dev Initializes contract with LP token name and symbol\n     */\n    constructor() ERC20(\"SimpleSwap LP\", \"SS-LP\") {}\n\n    // ==============================================\n    //              EXTERNAL FUNCTIONS\n    // ==============================================\n\n    /**\n     * @notice Adds liquidity to a token pair\n     * @dev For initial deposit, uses square root of token amount product\n     * @dev For subsequent deposits, maintains existing reserve ratio\n     * @param tokenA First token address\n     * @param tokenB Second token address\n     * @param amountADesired Desired amount of first token to deposit\n     * @param amountBDesired Desired amount of second token to deposit\n     * @param amountAMin Minimum acceptable amount of first token\n     * @param amountBMin Minimum acceptable amount of second token\n     * @param to Address to receive LP tokens\n     * @param deadline Transaction expiry timestamp\n     * @return amountA Actual amount of first token deposited\n     * @return amountB Actual amount of second token deposited\n     * @return liquidity Amount of LP tokens minted\n     */\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        override\n        ensureDeadline(deadline)\n        validPair(tokenA, tokenB)\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        )\n    {\n        // Validate input amounts first (require at top)\n        require(amountADesired > 0 && amountBDesired > 0, \"Invalid amounts\");\n        require(amountADesired >= amountAMin && amountBDesired >= amountBMin, \"Min not met\");\n\n        // Sort tokens to ensure consistent ordering\n        (address token0, address token1) = _sortTokens(tokenA, tokenB);\n        Pool storage pool = pools[token0][token1];\n        \n        // Cache reserve values to minimize storage reads\n        uint256 reserveA = pool.reserveA;\n        uint256 reserveB = pool.reserveB;\n\n        if (reserveA == 0 && reserveB == 0) {\n            // Initial liquidity provision\n            (amountA, amountB) = (amountADesired, amountBDesired);\n            liquidity = _sqrt(amountA * amountB); // Geometric mean for initial LP tokens\n        } else {\n            // Subsequent liquidity provision - maintain ratio\n            (amountA, amountB) = _calculateOptimalDeposit(\n                amountADesired,\n                amountBDesired,\n                amountAMin,\n                amountBMin,\n                reserveA,\n                reserveB\n            );\n            liquidity = _calculateLiquidity(amountA, reserveA, totalSupply());\n        }\n\n        // Transfer tokens from user and mint LP tokens\n        _transferTokens(tokenA, tokenB, amountA, amountB);\n        _mint(to, liquidity);\n        \n        // Single state variable update\n        _updateReserves(token0, token1, reserveA + amountA, reserveB + amountB);\n\n        emit LiquidityAdded(msg.sender, tokenA, tokenB, amountA, amountB, liquidity);\n    }\n\n    /**\n     * @notice Removes liquidity from a token pair\n     * @param tokenA First token address\n     * @param tokenB Second token address\n     * @param liquidity Amount of LP tokens to burn\n     * @param amountAMin Minimum acceptable amount of first token to receive\n     * @param amountBMin Minimum acceptable amount of second token to receive\n     * @param to Address to receive withdrawn tokens\n     * @param deadline Transaction expiry timestamp\n     * @return amountA Amount of first token withdrawn\n     * @return amountB Amount of second token withdrawn\n     */\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        override\n        ensureDeadline(deadline)\n        validPair(tokenA, tokenB)\n        returns (uint256 amountA, uint256 amountB)\n    {\n        require(liquidity > 0, \"Invalid liquidity\");\n\n        // Sort tokens and get pool reserves\n        (address token0, address token1) = _sortTokens(tokenA, tokenB);\n        Pool storage pool = pools[token0][token1];\n        \n        // Cache reserve values\n        uint256 reserveA = pool.reserveA;\n        uint256 reserveB = pool.reserveB;\n\n        // Calculate proportional share of reserves\n        (amountA, amountB) = _calculateWithdrawalAmounts(\n            liquidity,\n            reserveA,\n            reserveB\n        );\n        require(amountA >= amountAMin && amountB >= amountBMin, \"Min not met\");\n\n        // Burn LP tokens and transfer underlying tokens\n        _burn(msg.sender, liquidity);\n        _safeTransfer(token0, to, amountA);\n        _safeTransfer(token1, to, amountB);\n        \n        // Single state variable update\n        _updateReserves(token0, token1, reserveA - amountA, reserveB - amountB);\n\n        emit LiquidityRemoved(msg.sender, tokenA, tokenB, amountA, amountB, liquidity);\n    }\n\n    /**\n     * @notice Swaps an exact amount of input tokens for output tokens\n     * @param amountIn Exact amount of input tokens\n     * @param amountOutMin Minimum acceptable amount of output tokens\n     * @param path Array containing [inputToken, outputToken] addresses\n     * @param to Address to receive output tokens\n     * @param deadline Transaction expiry timestamp\n     * @return amounts Array containing [inputAmount, outputAmount]\n     */\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    )\n        external\n        override\n        ensureDeadline(deadline)\n        returns (uint256[] memory amounts)\n    {\n        require(path.length == 2, \"Invalid path\");\n        \n        amounts = new uint256[](2);\n        amounts[0] = amountIn;\n        \n        (address tokenIn, address tokenOut) = (path[0], path[1]);\n        Pool storage pool = pools[tokenIn][tokenOut];\n        \n        // Cache reserve values\n        uint256 reserveIn = pool.reserveA;\n        uint256 reserveOut = pool.reserveB;\n        \n        require(amountIn > 0, \"Invalid amount\");\n        require(reserveIn > 0 && reserveOut > 0, \"No liquidity\");\n        \n        // Calculate output amount based on constant product formula\n        amounts[1] = getAmountOut(amountIn, reserveIn, reserveOut);\n        require(amounts[1] >= amountOutMin, \"Insufficient output\");\n        \n        // Transfer tokens\n        IERC20(tokenIn).safeTransferFrom(msg.sender, address(this), amountIn);\n        IERC20(tokenOut).safeTransfer(to, amounts[1]);\n        \n        // Single state variable update\n        _updateReserves(tokenIn, tokenOut, reserveIn + amountIn, reserveOut - amounts[1]);\n\n        emit Swap(msg.sender, tokenIn, tokenOut, amountIn, amounts[1]);\n    }\n\n    // ==============================================\n    //              VIEW FUNCTIONS\n    // ==============================================\n\n    /**\n     * @notice Gets the price of tokenA in terms of tokenB\n     * @param tokenA First token address\n     * @param tokenB Second token address\n     * @return price Price of tokenA in terms of tokenB (with 18 decimals)\n     */\n    function getPrice(address tokenA, address tokenB)\n        external\n        view\n        override\n        returns (uint256 price)\n    {\n        require(tokenA != tokenB, \"Identical tokens\");\n        \n        Pool memory pool = pools[tokenA][tokenB];\n        require(pool.reserveA > 0 && pool.reserveB > 0, \"No liquidity\");\n        \n        price = (pool.reserveB * 1e18) / pool.reserveA;\n    }\n\n    /**\n     * @notice Calculates output amount for a given input and reserves\n     * @dev Uses constant product formula: amountOut = (amountIn * reserveOut) / (reserveIn + amountIn)\n     * @param amountIn Input token amount\n     * @param reserveIn Reserve of input token\n     * @param reserveOut Reserve of output token\n     * @return amountOut Expected output token amount\n     */\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) public pure override returns (uint256 amountOut) {\n        require(amountIn > 0, \"Invalid amount\");\n        require(reserveIn > 0 && reserveOut > 0, \"No liquidity\");\n        \n        amountOut = (amountIn * reserveOut) / (reserveIn + amountIn);\n    }\n\n    // ==============================================\n    //              INTERNAL FUNCTIONS\n    // ==============================================\n\n    /**\n     * @dev Sorts two token addresses\n     * @param tokenA First token address\n     * @param tokenB Second token address\n     * @return token0 Lower address\n     * @return token1 Higher address\n     */\n    function _sortTokens(address tokenA, address tokenB)\n        internal\n        pure\n        returns (address token0, address token1)\n    {\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n    }\n\n    /**\n     * @dev Calculates optimal deposit amounts to maintain pool ratio\n     * @param amountADesired Desired amount of tokenA\n     * @param amountBDesired Desired amount of tokenB\n     * @param amountAMin Minimum acceptable amount of tokenA\n     * @param amountBMin Minimum acceptable amount of tokenB\n     * @param reserveA Current reserve of tokenA\n     * @param reserveB Current reserve of tokenB\n     * @return amountA Optimal amount of tokenA to deposit\n     * @return amountB Optimal amount of tokenB to deposit\n     */\n    function _calculateOptimalDeposit(\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        uint256 reserveA,\n        uint256 reserveB\n    ) internal pure returns (uint256 amountA, uint256 amountB) {\n        uint256 amountBOptimal = _quote(amountADesired, reserveA, reserveB);\n        \n        if (amountBOptimal <= amountBDesired) {\n            require(amountBOptimal >= amountBMin, \"Insufficient B\");\n            (amountA, amountB) = (amountADesired, amountBOptimal);\n        } else {\n            uint256 amountAOptimal = _quote(amountBDesired, reserveB, reserveA);\n            require(amountAOptimal >= amountAMin, \"Insufficient A\");\n            (amountA, amountB) = (amountAOptimal, amountBDesired);\n        }\n    }\n\n    /**\n     * @dev Calculates LP tokens to mint based on deposit\n     * @param amount Deposit amount\n     * @param reserve Existing reserve amount\n     * @param totalSupply Current total LP token supply\n     * @return liquidity LP tokens to mint\n     */\n    function _calculateLiquidity(\n        uint256 amount,\n        uint256 reserve,\n        uint256 totalSupply\n    ) internal pure returns (uint256 liquidity) {\n        liquidity = (amount * totalSupply) / reserve;\n        require(liquidity > 0, \"Insufficient liquidity\");\n    }\n\n    /**\n     * @dev Calculates withdrawal amounts based on LP share\n     * @param liquidity LP tokens to burn\n     * @param reserveA Reserve of tokenA\n     * @param reserveB Reserve of tokenB\n     * @return amountA Amount of tokenA to withdraw\n     * @return amountB Amount of tokenB to withdraw\n     */\n    function _calculateWithdrawalAmounts(\n        uint256 liquidity,\n        uint256 reserveA,\n        uint256 reserveB\n    ) internal view returns (uint256 amountA, uint256 amountB) {\n        uint256 _totalSupply = totalSupply();\n        amountA = (liquidity * reserveA) / _totalSupply;\n        amountB = (liquidity * reserveB) / _totalSupply;\n    }\n\n    /**\n     * @dev Updates pool reserves\n     * @param tokenA First token address\n     * @param tokenB Second token address\n     * @param newReserveA New reserve for tokenA\n     * @param newReserveB New reserve for tokenB\n     */\n    function _updateReserves(\n        address tokenA,\n        address tokenB,\n        uint256 newReserveA,\n        uint256 newReserveB\n    ) internal {\n        pools[tokenA][tokenB] = Pool(newReserveA, newReserveB);\n    }\n\n    /**\n     * @dev Transfers both tokens from user to contract\n     * @param tokenA First token address\n     * @param tokenB Second token address\n     * @param amountA Amount of tokenA\n     * @param amountB Amount of tokenB\n     */\n    function _transferTokens(\n        address tokenA,\n        address tokenB,\n        uint256 amountA,\n        uint256 amountB\n    ) internal {\n        IERC20(tokenA).safeTransferFrom(msg.sender, address(this), amountA);\n        IERC20(tokenB).safeTransferFrom(msg.sender, address(this), amountB);\n    }\n\n    /**\n     * @dev Safely transfers tokens to recipient\n     * @param token Token address\n     * @param to Recipient address\n     * @param amount Transfer amount\n     */\n    function _safeTransfer(\n        address token,\n        address to,\n        uint256 amount\n    ) internal {\n        IERC20(token).safeTransfer(to, amount);\n    }\n\n    // ==============================================\n    //              PURE FUNCTIONS\n    // ==============================================\n\n    /**\n     * @dev Calculates square root (for initial liquidity calculation)\n     * @param y Number to calculate square root of\n     * @return z Square root of y\n     */\n    function _sqrt(uint256 y) internal pure returns (uint256 z) {\n        if (y > 3) {\n            z = y;\n            uint256 x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n\n    /**\n     * @dev Calculates equivalent token amount to maintain ratio\n     * @param amountA Amount of tokenA\n     * @param reserveA Reserve of tokenA\n     * @param reserveB Reserve of tokenB\n     * @return amountB Equivalent amount of tokenB\n     */\n    function _quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) internal pure returns (uint256 amountB) {\n        amountB = (amountA * reserveB) / reserveA;\n    }\n}"
			},
			"contracts/interfaces/ISimpleSwap.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @title ISimpleSwap\n * @dev Interface for the SimpleSwap decentralized exchange contract\n * @notice Defines the core functionality for:\n * - Adding/removing liquidity from token pairs\n * - Swapping tokens with price calculations\n * - Querying token prices and swap amounts\n */\ninterface ISimpleSwap {\n    // ==============================================\n    //              LIQUIDITY FUNCTIONS\n    // ==============================================\n\n    /**\n     * @notice Adds liquidity to a token pair\n     * @dev Mints LP tokens representing pool share\n     * @param tokenA First token in pair\n     * @param tokenB Second token in pair\n     * @param amountADesired Desired amount of tokenA to deposit\n     * @param amountBDesired Desired amount of tokenB to deposit\n     * @param amountAMin Minimum acceptable amount of tokenA\n     * @param amountBMin Minimum acceptable amount of tokenB\n     * @param to Recipient of LP tokens\n     * @param deadline Transaction expiry timestamp\n     * @return amountA Actual amount of tokenA deposited\n     * @return amountB Actual amount of tokenB deposited\n     * @return liquidity Amount of LP tokens minted\n     */\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    /**\n     * @notice Removes liquidity from a token pair\n     * @dev Burns LP tokens and returns underlying assets\n     * @param tokenA First token in pair\n     * @param tokenB Second token in pair\n     * @param liquidity Amount of LP tokens to burn\n     * @param amountAMin Minimum acceptable amount of tokenA\n     * @param amountBMin Minimum acceptable amount of tokenB\n     * @param to Recipient of withdrawn tokens\n     * @param deadline Transaction expiry timestamp\n     * @return amountA Amount of tokenA withdrawn\n     * @return amountB Amount of tokenB withdrawn\n     */\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    // ==============================================\n    //                 SWAP FUNCTIONS\n    // ==============================================\n\n    /**\n     * @notice Swaps exact input tokens for output tokens\n     * @dev Uses constant product market maker formula\n     * @param amountIn Exact amount of input tokens\n     * @param amountOutMin Minimum acceptable output amount\n     * @param path Array with [inputToken, outputToken]\n     * @param to Recipient of output tokens\n     * @param deadline Transaction expiry timestamp\n     * @return amounts Array containing [inputAmount, outputAmount]\n     */\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    // ==============================================\n    //                 VIEW FUNCTIONS\n    // ==============================================\n\n    /**\n     * @notice Gets price of tokenA in terms of tokenB\n     * @dev Price is calculated as reserveB/reserveA\n     * @param tokenA First token in pair\n     * @param tokenB Second token in pair\n     * @return price Price ratio with 18 decimals precision\n     */\n    function getPrice(address tokenA, address tokenB)\n        external\n        view\n        returns (uint256 price);\n\n    /**\n     * @notice Calculates output amount for given input\n     * @dev Uses formula: amountOut = (amountIn * reserveOut) / (reserveIn + amountIn)\n     * @param amountIn Input token amount\n     * @param reserveIn Reserve of input token\n     * @param reserveOut Reserve of output token\n     * @return amountOut Expected output amount\n     */\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransfer(IERC20 token, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful.\n     */\n    function trySafeTransferFrom(IERC20 token, address from, address to, uint256 value) internal returns (bool) {\n        return _callOptionalReturnBool(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * Both values are immutable: they can only be set once during construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts/interfaces/IERC1363.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`âs `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`âs approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`âs approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
			},
			"@openzeppelin/contracts/interfaces/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"
			},
			"@openzeppelin/contracts/interfaces/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts/interfaces/IERC1363.sol": {
				"IERC1363": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approveAndCall",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "approveAndCall",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferAndCall",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "transferAndCall",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "transferFromAndCall",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFromAndCall",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363]. Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"approveAndCall(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.",
								"params": {
									"spender": "The address which will spend the funds.",
									"value": "The amount of tokens to be spent."
								},
								"returns": {
									"_0": "A boolean value indicating whether the operation succeeded unless throwing."
								}
							},
							"approveAndCall(address,uint256,bytes)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.",
								"params": {
									"data": "Additional data with no specified format, sent in call to `spender`.",
									"spender": "The address which will spend the funds.",
									"value": "The amount of tokens to be spent."
								},
								"returns": {
									"_0": "A boolean value indicating whether the operation succeeded unless throwing."
								}
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferAndCall(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.",
								"params": {
									"to": "The address which you want to transfer to.",
									"value": "The amount of tokens to be transferred."
								},
								"returns": {
									"_0": "A boolean value indicating whether the operation succeeded unless throwing."
								}
							},
							"transferAndCall(address,uint256,bytes)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.",
								"params": {
									"data": "Additional data with no specified format, sent in call to `to`.",
									"to": "The address which you want to transfer to.",
									"value": "The amount of tokens to be transferred."
								},
								"returns": {
									"_0": "A boolean value indicating whether the operation succeeded unless throwing."
								}
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFromAndCall(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.",
								"params": {
									"from": "The address which you want to send tokens from.",
									"to": "The address which you want to transfer to.",
									"value": "The amount of tokens to be transferred."
								},
								"returns": {
									"_0": "A boolean value indicating whether the operation succeeded unless throwing."
								}
							},
							"transferFromAndCall(address,address,uint256,bytes)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.",
								"params": {
									"data": "Additional data with no specified format, sent in call to `to`.",
									"from": "The address which you want to send tokens from.",
									"to": "The address which you want to transfer to.",
									"value": "The amount of tokens to be transferred."
								},
								"returns": {
									"_0": "A boolean value indicating whether the operation succeeded unless throwing."
								}
							}
						},
						"title": "IERC1363",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"approveAndCall(address,uint256)": "3177029f",
							"approveAndCall(address,uint256,bytes)": "cae9ca51",
							"balanceOf(address)": "70a08231",
							"supportsInterface(bytes4)": "01ffc9a7",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferAndCall(address,uint256)": "1296ee62",
							"transferAndCall(address,uint256,bytes)": "4000aea0",
							"transferFrom(address,address,uint256)": "23b872dd",
							"transferFromAndCall(address,address,uint256)": "d8fbe994",
							"transferFromAndCall(address,address,uint256,bytes)": "c1d34b89"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363]. Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"approveAndCall(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\",\"params\":{\"spender\":\"The address which will spend the funds.\",\"value\":\"The amount of tokens to be spent.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"approveAndCall(address,uint256,bytes)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\",\"params\":{\"data\":\"Additional data with no specified format, sent in call to `spender`.\",\"spender\":\"The address which will spend the funds.\",\"value\":\"The amount of tokens to be spent.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferAndCall(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"transferAndCall(address,uint256,bytes)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"data\":\"Additional data with no specified format, sent in call to `to`.\",\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFromAndCall(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"from\":\"The address which you want to send tokens from.\",\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"transferFromAndCall(address,address,uint256,bytes)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"data\":\"Additional data with no specified format, sent in call to `to`.\",\"from\":\"The address which you want to send tokens from.\",\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}}},\"title\":\"IERC1363\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":\"IERC1363\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://da62d6be1f5c6edf577f0cb45666a8aa9c2086a4bac87d95d65f02e2f4c36a4b\",\"dweb:/ipfs/QmNkpvBpoCMvX8JwAFNSc5XxJ2q5BXJpL5L1txb4QkqVFF\"]},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://11fea9f8bc98949ac6709f0c1699db7430d2948137aa94d5a9e95a91f61a710a\",\"dweb:/ipfs/QmQdfRXxQjwP6yn3DVo1GHPpriKNcFghSPi94Z1oKEFUNS\"]},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a2608291cb038b388d80b79a06b6118a42f7894ff67b7da10ec0dbbf5b2973ba\",\"dweb:/ipfs/QmWohqcBLbcxmA4eGPhZDXe5RYMMEEpFq22nfkaUMvTfw1\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"IERC1155Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC1155InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "idsLength",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "valuesLength",
									"type": "uint256"
								}
							],
							"name": "ERC1155InvalidArrayLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC1155MissingApprovalForAll",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC-1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.",
						"errors": {
							"ERC1155InsufficientBalance(address,uint256,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC1155InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC1155InvalidArrayLength(uint256,uint256)": [
								{
									"details": "Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.",
									"params": {
										"idsLength": "Length of the array of token identifiers",
										"valuesLength": "Length of the array of token amounts"
									}
								}
							],
							"ERC1155InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC1155InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC1155InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC1155MissingApprovalForAll(address,address)": [
								{
									"details": "Indicates a failure with the `operator`âs approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"owner": "Address of the current owner of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC-1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC20Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC-20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`âs `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC-20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC721Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721IncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721InsufficientApproval",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC721InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721NonexistentToken",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC-721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.",
						"errors": {
							"ERC721IncorrectOwner(address,uint256,address)": [
								{
									"details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
									"params": {
										"owner": "Address of the current owner of a token.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InsufficientApproval(address,uint256)": [
								{
									"details": "Indicates a failure with the `operator`âs approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC721InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC721InvalidOwner(address)": [
								{
									"details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20. Used in balance queries.",
									"params": {
										"owner": "Address of the current owner of a token."
									}
								}
							],
							"ERC721InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC721InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC721NonexistentToken(uint256)": [
								{
									"details": "Indicates a `tokenId` whose `owner` is the zero address.",
									"params": {
										"tokenId": "Identifier number of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC-721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC-20 applications.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`âs `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Sets the values for {name} and {symbol}. Both values are immutable: they can only be set once during construction."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC-20 applications.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. Both values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x41f6b3b9e030561e7896dbef372b499cc8d418a80c3884a4d65a68f2fdc7493a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://80b0992a11b2fd1f75ced2971696d07bbd1d19ce6761dd50d8b6d48aa435f42a\",\"dweb:/ipfs/QmZDe5xd2gXHjVEjv9t8C1KQ68K5T8qFwdinwQgmP3rF3x\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 249,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 255,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 257,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 259,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 261,
								"contract": "@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC-20 standard as defined in the ERC.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-20 standard as defined in the ERC.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"IERC20Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC-20 standard.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC-20 standard.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"SafeERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "currentAllowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "requestedDecrease",
									"type": "uint256"
								}
							],
							"name": "SafeERC20FailedDecreaseAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "SafeERC20FailedOperation",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Wrappers around ERC-20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"errors": {
							"SafeERC20FailedDecreaseAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failed `decreaseAllowance` request."
								}
							],
							"SafeERC20FailedOperation(address)": [
								{
									"details": "An operation with an ERC-20 token failed."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":698:10074  library SafeERC20 {... */\n  0x80\n  dup1\n  0x40\n  mstore\n  jumpi(tag_1, callvalue)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  address\n  dup2\n  assignImmutable(\"0xcd5a02d485074f67d63783a7acdae578618045c23ccf47fa4e3f1a01c11714ad\")\n  return\ntag_1:\n  0x00\n  dup1\n  revert\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":698:10074  library SafeERC20 {... */\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212200023b1bd0a79883a963152ec9aa6fd4501b0b58861348160b902a41d381bc45e64736f6c634300081e0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212200023b1bd0a79883a963152ec9aa6fd4501b0b58861348160b902a41d381bc45e64736f6c634300081e0033",
							"opcodes": "PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x39 SWAP1 DUP2 PUSH1 0x1C DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STOP 0x23 0xB1 0xBD EXP PUSH26 0x883A963152EC9AA6FD4501B0B58861348160B902A41D381BC45E PUSH5 0x736F6C6343 STOP ADDMOD 0x1E STOP CALLER ",
							"sourceMap": "698:9376:7:-:0;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "5f80fdfea26469706673582212200023b1bd0a79883a963152ec9aa6fd4501b0b58861348160b902a41d381bc45e64736f6c634300081e0033",
							"opcodes": "PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STOP 0x23 0xB1 0xBD EXP PUSH26 0x883A963152EC9AA6FD4501B0B58861348160B902A41D381BC45E PUSH5 0x736F6C6343 STOP ADDMOD 0x1E STOP CALLER ",
							"sourceMap": "698:9376:7:-:0;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "11400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
								"_callOptionalReturnBool(contract IERC20,bytes memory)": "infinite",
								"approveAndCallRelaxed(contract IERC1363,address,uint256,bytes memory)": "infinite",
								"forceApprove(contract IERC20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite",
								"transferAndCallRelaxed(contract IERC1363,address,uint256,bytes memory)": "infinite",
								"transferFromAndCallRelaxed(contract IERC1363,address,address,uint256,bytes memory)": "infinite",
								"trySafeTransfer(contract IERC20,address,uint256)": "infinite",
								"trySafeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 698,
									"end": 10074,
									"name": "PUSH",
									"source": 7,
									"value": "80"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "CALLVALUE",
									"source": 7
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "PUSH #[$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "SWAP1",
									"source": 7
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "PUSH [$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "DUP3",
									"source": 7
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "ADDRESS",
									"source": 7
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "DUP2",
									"source": 7
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "ASSIGNIMMUTABLE",
									"source": 7,
									"value": "library_deploy_address"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "RETURN",
									"source": 7
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "tag",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 698,
									"end": 10074,
									"name": "REVERT",
									"source": 7
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212200023b1bd0a79883a963152ec9aa6fd4501b0b58861348160b902a41d381bc45e64736f6c634300081e0033",
									".code": [
										{
											"begin": 698,
											"end": 10074,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 698,
											"end": 10074,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 698,
											"end": 10074,
											"name": "REVERT",
											"source": 7
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/interfaces/IERC1363.sol",
								"@openzeppelin/contracts/interfaces/IERC165.sol",
								"@openzeppelin/contracts/interfaces/IERC20.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"contracts/SimpleSwap.sol",
								"contracts/interfaces/ISimpleSwap.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestedDecrease\",\"type\":\"uint256\"}],\"name\":\"SafeERC20FailedDecreaseAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Wrappers around ERC-20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"errors\":{\"SafeERC20FailedDecreaseAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failed `decreaseAllowance` request.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://da62d6be1f5c6edf577f0cb45666a8aa9c2086a4bac87d95d65f02e2f4c36a4b\",\"dweb:/ipfs/QmNkpvBpoCMvX8JwAFNSc5XxJ2q5BXJpL5L1txb4QkqVFF\"]},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://11fea9f8bc98949ac6709f0c1699db7430d2948137aa94d5a9e95a91f61a710a\",\"dweb:/ipfs/QmQdfRXxQjwP6yn3DVo1GHPpriKNcFghSPi94Z1oKEFUNS\"]},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a2608291cb038b388d80b79a06b6118a42f7894ff67b7da10ec0dbbf5b2973ba\",\"dweb:/ipfs/QmWohqcBLbcxmA4eGPhZDXe5RYMMEEpFq22nfkaUMvTfw1\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8150ceb4ac947e8a442b2a9c017e01e880b2be2dd958f1fa9bc405f4c5a86508\",\"dweb:/ipfs/QmbcBmFX66AY6Kbhnd5gx7zpkgqnUafo43XnmayAM7zVdB\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC-165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[ERC]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[ERC]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/SimpleSwap.sol": {
				"SimpleSwap": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "SafeERC20FailedOperation",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "provider",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "tokenA",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "tokenB",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amountA",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amountB",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "liquidity",
									"type": "uint256"
								}
							],
							"name": "LiquidityAdded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "provider",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "tokenA",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "tokenB",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amountA",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amountB",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "liquidity",
									"type": "uint256"
								}
							],
							"name": "LiquidityRemoved",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "tokenIn",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "tokenOut",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"name": "Swap",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenA",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenB",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amountADesired",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amountBDesired",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amountAMin",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amountBMin",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "addLiquidity",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountA",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amountB",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "liquidity",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "reserveIn",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "reserveOut",
									"type": "uint256"
								}
							],
							"name": "getAmountOut",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenA",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenB",
									"type": "address"
								}
							],
							"name": "getPrice",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "price",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "pools",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "reserveA",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "reserveB",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenA",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenB",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "liquidity",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amountAMin",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amountBMin",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "removeLiquidity",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountA",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amountB",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amountOutMin",
									"type": "uint256"
								},
								{
									"internalType": "address[]",
									"name": "path",
									"type": "address[]"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "swapExactTokensForTokens",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "amounts",
									"type": "uint256[]"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"author": "Francisco LÃ³pez G.",
						"details": "Implements a basic Uniswap V2-style decentralized exchange with: - Liquidity pool creation - Token swapping functionality - LP (Liquidity Provider) token issuance",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`âs `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"SafeERC20FailedOperation(address)": [
								{
									"details": "An operation with an ERC-20 token failed."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"LiquidityAdded(address,address,address,uint256,uint256,uint256)": {
								"params": {
									"amountA": "Amount of first token added",
									"amountB": "Amount of second token added",
									"liquidity": "Amount of LP tokens minted",
									"provider": "Address providing the liquidity",
									"tokenA": "First token in pair",
									"tokenB": "Second token in pair"
								}
							},
							"LiquidityRemoved(address,address,address,uint256,uint256,uint256)": {
								"params": {
									"amountA": "Amount of first token withdrawn",
									"amountB": "Amount of second token withdrawn",
									"liquidity": "Amount of LP tokens burned",
									"provider": "Address removing the liquidity",
									"tokenA": "First token in pair",
									"tokenB": "Second token in pair"
								}
							},
							"Swap(address,address,address,uint256,uint256)": {
								"params": {
									"amountIn": "Amount of input tokens",
									"amountOut": "Amount of output tokens",
									"sender": "Address initiating the swap",
									"tokenIn": "Input token address",
									"tokenOut": "Output token address"
								}
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": {
								"details": "For initial deposit, uses square root of token amount productFor subsequent deposits, maintains existing reserve ratio",
								"params": {
									"amountADesired": "Desired amount of first token to deposit",
									"amountAMin": "Minimum acceptable amount of first token",
									"amountBDesired": "Desired amount of second token to deposit",
									"amountBMin": "Minimum acceptable amount of second token",
									"deadline": "Transaction expiry timestamp",
									"to": "Address to receive LP tokens",
									"tokenA": "First token address",
									"tokenB": "Second token address"
								},
								"returns": {
									"amountA": "Actual amount of first token deposited",
									"amountB": "Actual amount of second token deposited",
									"liquidity": "Amount of LP tokens minted"
								}
							},
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Initializes contract with LP token name and symbol"
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"getAmountOut(uint256,uint256,uint256)": {
								"details": "Uses constant product formula: amountOut = (amountIn * reserveOut) / (reserveIn + amountIn)",
								"params": {
									"amountIn": "Input token amount",
									"reserveIn": "Reserve of input token",
									"reserveOut": "Reserve of output token"
								},
								"returns": {
									"amountOut": "Expected output token amount"
								}
							},
							"getPrice(address,address)": {
								"params": {
									"tokenA": "First token address",
									"tokenB": "Second token address"
								},
								"returns": {
									"price": "Price of tokenA in terms of tokenB (with 18 decimals)"
								}
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": {
								"params": {
									"amountAMin": "Minimum acceptable amount of first token to receive",
									"amountBMin": "Minimum acceptable amount of second token to receive",
									"deadline": "Transaction expiry timestamp",
									"liquidity": "Amount of LP tokens to burn",
									"to": "Address to receive withdrawn tokens",
									"tokenA": "First token address",
									"tokenB": "Second token address"
								},
								"returns": {
									"amountA": "Amount of first token withdrawn",
									"amountB": "Amount of second token withdrawn"
								}
							},
							"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": {
								"params": {
									"amountIn": "Exact amount of input tokens",
									"amountOutMin": "Minimum acceptable amount of output tokens",
									"deadline": "Transaction expiry timestamp",
									"path": "Array containing [inputToken, outputToken] addresses",
									"to": "Address to receive output tokens"
								},
								"returns": {
									"amounts": "Array containing [inputAmount, outputAmount]"
								}
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"stateVariables": {
							"pools": {
								"details": "pools[token0][token1] stores reserves for sorted token pair"
							}
						},
						"title": "SimpleSwap",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n  mstore(0x40, 0x80)\n  jumpi(tag_1, callvalue)\n  0x40\n  dup1\n  mload\n  swap1\n  dup2\n  add\n  sub(shl(0x40, 0x01), 0x01)\n  dup2\n  gt\n  dup3\n  dup3\n  lt\n  or\n  tag_20\n  jumpi\n  0x40\n  swap1\n  dup2\n  mstore\n  0x0d\n  dup3\n  mstore\n  shl(0x9c, 0x053696d706c6553776170204c5)\n  0x20\n  dup4\n  add\n  mstore\n  dup1\n  mload\n  swap1\n  dup2\n  add\n  sub(shl(0x40, 0x01), 0x01)\n  dup2\n  gt\n  dup3\n  dup3\n  lt\n  or\n  tag_20\n  jumpi\n  0x40\n  mstore\n  0x05\n  dup2\n  mstore\n  shl(0xdc, 0x053532d4c5)\n  0x20\n  dup3\n  add\n  mstore\n  dup2\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n  dup2\n  gt\n  tag_20\n  jumpi\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1648:1661  _name = name_ */\n  0x03\n    /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n  sload\n  0x01\n  dup2\n  dup2\n  shr\n  swap2\n  and\n  dup1\n  iszero\n  tag_9\n  jumpi\ntag_10:\n  0x20\n  dup3\n  lt\n  eq\n  tag_24\n  jumpi\n  0x1f\n  dup2\n  gt\n  tag_13\n  jumpi\ntag_14:\n  pop\n  0x20\n  swap3\n  0x1f\n  dup3\n  gt\n  0x01\n  eq\n  tag_15\n  jumpi\n  swap3\n  dup2\n  swap3\n  swap4\n  0x00\n  swap3\n  tag_17\n  jumpi\ntag_18:\n  pop\n  pop\n  dup2\n  0x01\n  shl\n  swap2\n  not(0x00)\n  swap1\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1648:1661  _name = name_ */\n  0x03\n    /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n  shl\n  shr\n  not\n  and\n  or\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1648:1661  _name = name_ */\n  0x03\n    /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n  sstore\ntag_19:\n  dup1\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n  dup2\n  gt\n  tag_20\n  jumpi\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1671:1688  _symbol = symbol_ */\n  0x04\n    /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n  sload\n  0x01\n  dup2\n  dup2\n  shr\n  swap2\n  and\n  dup1\n  iszero\n  tag_22\n  jumpi\ntag_23:\n  0x20\n  dup3\n  lt\n  eq\n  tag_24\n  jumpi\n  0x1f\n  dup2\n  gt\n  tag_26\n  jumpi\ntag_27:\n  pop\n  0x20\n  swap2\n  0x1f\n  dup3\n  gt\n  0x01\n  eq\n  tag_28\n  jumpi\n  swap2\n  dup2\n  swap3\n  0x00\n  swap3\n  tag_30\n  jumpi\ntag_31:\n  pop\n  pop\n  dup2\n  0x01\n  shl\n  swap2\n  not(0x00)\n  swap1\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1648:1661  _name = name_ */\n  0x03\n    /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n  shl\n  shr\n  not\n  and\n  or\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1671:1688  _symbol = symbol_ */\n  0x04\n    /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n  sstore\ntag_32:\n  mload(0x40)\n  dataSize(sub_0)\n  swap1\n  dup2\n  dataOffset(sub_0)\n  dup3\n  codecopy\n  return\ntag_30:\n  add\n  mload\n  swap1\n  pop\n  0x00\n  dup1\n  jump(tag_31)\ntag_28:\n  not(0x1f)\n  dup3\n  and\n  swap3\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1671:1688  _symbol = symbol_ */\n  0x04\n  0x00\n    /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n  mstore\n  dup1\n  0x00\n  keccak256\n  swap2\n  0x00\ntag_33:\n  dup6\n  dup2\n  lt\n  tag_34\n  jumpi\n  pop\n  dup4\n  0x01\n  swap6\n  lt\n  tag_36\n  jumpi\ntag_37:\n  pop\n  pop\n  pop\n  dup2\n  shl\n  add\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1671:1688  _symbol = symbol_ */\n  0x04\n    /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n  sstore\n  jump(tag_32)\ntag_36:\n  add\n  mload\n  not(0x00)\n  0xf8\n  dup5\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1648:1661  _name = name_ */\n  0x03\n    /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n  shl\n  and\n  shr\n  not\n  and\n  swap1\n  sstore\n  0x00\n  dup1\n  dup1\n  jump(tag_37)\ntag_34:\n  swap2\n  swap3\n  0x20\n  0x01\n  dup2\n  swap3\n  dup7\n  dup6\n  add\n  mload\n  dup2\n  sstore\n  add\n  swap5\n  add\n  swap3\n  add\n  jump(tag_33)\ntag_26:\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1671:1688  _symbol = symbol_ */\n  0x04\n  0x00\n    /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n  mstore\n  0x8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b\n  0x1f\n  dup4\n  add\n  0x05\n  shr\n  dup2\n  add\n  swap2\n  0x20\n  dup5\n  lt\n  tag_38\n  jumpi\ntag_39:\n  0x1f\n  add\n  0x05\n  shr\n  add\n  swap1\ntag_40:\n  dup2\n  dup2\n  lt\n  tag_41\n  jumpi\n  pop\n  jump(tag_27)\ntag_41:\n  0x00\n  dup2\n  sstore\n  0x01\n  add\n  jump(tag_40)\ntag_38:\n  swap1\n  swap2\n  pop\n  dup2\n  swap1\n  jump(tag_39)\ntag_24:\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  0x22\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1671:1688  _symbol = symbol_ */\n  0x04\n    /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n  mstore\n  revert(0x00, 0x24)\ntag_22:\n  swap1\n  0x7f\n  and\n  swap1\n  jump(tag_23)\ntag_20:\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  0x41\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1671:1688  _symbol = symbol_ */\n  0x04\n    /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n  mstore\n  revert(0x00, 0x24)\ntag_17:\n  add\n  mload\n  swap1\n  pop\n  0x00\n  dup1\n  jump(tag_18)\ntag_15:\n  not(0x1f)\n  dup3\n  and\n  swap4\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1648:1661  _name = name_ */\n  0x03\n  0x00\n    /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n  mstore\n  dup1\n  0x00\n  keccak256\n  swap2\n  0x00\ntag_43:\n  dup7\n  dup2\n  lt\n  tag_44\n  jumpi\n  pop\n  dup4\n  0x01\n  swap6\n  swap7\n  lt\n  tag_46\n  jumpi\ntag_47:\n  pop\n  pop\n  pop\n  dup2\n  shl\n  add\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1648:1661  _name = name_ */\n  0x03\n    /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n  sstore\n  jump(tag_19)\ntag_46:\n  add\n  mload\n  not(0x00)\n  0xf8\n  dup5\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1648:1661  _name = name_ */\n  0x03\n    /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n  shl\n  and\n  shr\n  not\n  and\n  swap1\n  sstore\n  0x00\n  dup1\n  dup1\n  jump(tag_47)\ntag_44:\n  swap2\n  swap3\n  0x20\n  0x01\n  dup2\n  swap3\n  dup7\n  dup6\n  add\n  mload\n  dup2\n  sstore\n  add\n  swap5\n  add\n  swap3\n  add\n  jump(tag_43)\ntag_13:\n    /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1648:1661  _name = name_ */\n  0x03\n  0x00\n    /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n  mstore\n  0xc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b\n  0x1f\n  dup4\n  add\n  0x05\n  shr\n  dup2\n  add\n  swap2\n  0x20\n  dup5\n  lt\n  tag_48\n  jumpi\ntag_49:\n  0x1f\n  add\n  0x05\n  shr\n  add\n  swap1\ntag_50:\n  dup2\n  dup2\n  lt\n  tag_51\n  jumpi\n  pop\n  jump(tag_14)\ntag_51:\n  0x00\n  dup2\n  sstore\n  0x01\n  add\n  jump(tag_50)\ntag_48:\n  swap1\n  swap2\n  pop\n  dup2\n  swap1\n  jump(tag_49)\ntag_9:\n  swap1\n  0x7f\n  and\n  swap1\n  jump(tag_10)\ntag_1:\n  0x00\n  dup1\n  revert\nstop\n\nsub_0: assembly {\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      mstore(0x40, 0x80)\n      jumpi(tag_25, iszero(lt(calldatasize, 0x04)))\n      0x00\n      dup1\n      revert\n    tag_25:\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x054d50d4\n      eq\n      tag_27\n      jumpi\n      dup1\n      0x06fdde03\n      eq\n      tag_29\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_31\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_33\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_35\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_37\n      jumpi\n      dup1\n      0x38ed1739\n      eq\n      tag_39\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_41\n      jumpi\n      dup1\n      0x901754d7\n      eq\n      tag_43\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_45\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_47\n      jumpi\n      dup1\n      0xac41865a\n      eq\n      tag_49\n      jumpi\n      dup1\n      0xbaa2abde\n      eq\n      tag_51\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_53\n      jumpi\n      0xe8e33700\n      eq\n      tag_55\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_55:\n      jumpi(tag_63, callvalue)\n      jumpi(tag_63, slt(add(not(0x03), calldatasize), 0x0100))\n      tag_61\n      tag_2\n      jump\t// in\n    tag_61:\n      tag_62\n      tag_3\n      jump\t// in\n    tag_62:\n      calldataload(0x64)\n      swap2\n      calldataload(0x44)\n      swap2\n      calldataload(0xa4)\n      swap2\n      calldataload(0x84)\n      swap2\n      calldataload(0xc4)\n      sub(shl(0xa0, 0x01), 0x01)\n      dup2\n      and\n      swap1\n      dup2\n      swap1\n      sub\n      tag_63\n      jumpi\n        /* \"contracts/SimpleSwap.sol\":3399:3454  require(deadline >= block.timestamp, \"Deadline passed\") */\n      tag_65\n        /* \"contracts/SimpleSwap.sol\":3419:3434  block.timestamp */\n      timestamp\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      calldataload(0xe4)\n        /* \"contracts/SimpleSwap.sol\":3407:3434  deadline >= block.timestamp */\n      lt\n      iszero\n        /* \"contracts/SimpleSwap.sol\":3399:3454  require(deadline >= block.timestamp, \"Deadline passed\") */\n      tag_13\n      jump\t// in\n    tag_65:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      dup3\n      dup2\n      and\n      swap4\n      swap1\n      dup2\n      and\n      swap3\n        /* \"contracts/SimpleSwap.sol\":3688:3733  require(tokenA != tokenB, \"Identical tokens\") */\n      tag_66\n        /* \"contracts/SimpleSwap.sol\":3696:3712  tokenA != tokenB */\n      dup5\n      dup7\n      eq\n      iszero\n        /* \"contracts/SimpleSwap.sol\":3688:3733  require(tokenA != tokenB, \"Identical tokens\") */\n      tag_17\n      jump\t// in\n    tag_66:\n        /* \"contracts/SimpleSwap.sol\":5555:5573  amountADesired > 0 */\n      dup8\n      iszero\n      iszero\n        /* \"contracts/SimpleSwap.sol\":5555:5595  amountADesired > 0 && amountBDesired > 0 */\n      dup1\n      tag_67\n      jumpi\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n    tag_68:\n      iszero\n      tag_69\n      jumpi\n        /* \"contracts/SimpleSwap.sol\":5808:5835  _sortTokens(tokenA, tokenB) */\n      tag_71\n        /* \"contracts/SimpleSwap.sol\":5633:5661  amountADesired >= amountAMin */\n      swap2\n      dup7\n      dup10\n      lt\n      iszero\n        /* \"contracts/SimpleSwap.sol\":5633:5693  amountADesired >= amountAMin && amountBDesired >= amountBMin */\n      dup1\n      tag_72\n      jumpi\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n    tag_73:\n        /* \"contracts/SimpleSwap.sol\":5625:5709  require(amountADesired >= amountAMin && amountBDesired >= amountBMin, \"Min not met\") */\n      tag_74\n      swap1\n      tag_18\n      jump\t// in\n    tag_74:\n        /* \"contracts/SimpleSwap.sol\":5808:5835  _sortTokens(tokenA, tokenB) */\n      tag_23\n      jump\t// in\n    tag_71:\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      swap5\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      dup3\n      and\n      0x00\n      mstore\n        /* \"contracts/SimpleSwap.sol\":5865:5870  pools */\n      0x05\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      0x20\n      mstore\n      keccak256(0x00, 0x40)\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      dup8\n      and\n      0x00\n      mstore\n      0x20\n      mstore\n      keccak256(0x00, 0x40)\n      swap7\n      0x01\n      dup9\n      sload\n        /* \"contracts/SimpleSwap.sol\":6024:6037  pool.reserveB */\n      swap9\n      add\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      sload\n        /* \"contracts/SimpleSwap.sol\":6052:6065  reserveA == 0 */\n      swap2\n      dup9\n      iszero\n        /* \"contracts/SimpleSwap.sol\":6052:6082  reserveA == 0 && reserveB == 0 */\n      dup1\n      tag_75\n      jumpi\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n    tag_76:\n        /* \"contracts/SimpleSwap.sol\":6048:6699  if (reserveA == 0 && reserveB == 0) {... */\n      iszero\n      tag_77\n      jumpi\n        /* \"contracts/SimpleSwap.sol\":6141:6194  (amountA, amountB) = (amountADesired, amountBDesired) */\n      pop\n      pop\n        /* \"contracts/SimpleSwap.sol\":6226:6243  amountA * amountB */\n      tag_79\n        /* \"contracts/SimpleSwap.sol\":6141:6194  (amountA, amountB) = (amountADesired, amountBDesired) */\n      dup10\n      dup10\n        /* \"contracts/SimpleSwap.sol\":6226:6243  amountA * amountB */\n      tag_7\n      jump\t// in\n    tag_79:\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      0x00\n        /* \"contracts/SimpleSwap.sol\":17254:17255  3 */\n      0x03\n        /* \"contracts/SimpleSwap.sol\":17250:17255  y > 3 */\n      dup3\n      gt\n        /* \"contracts/SimpleSwap.sol\":17254:17255  3 */\n      iszero\n      tag_80\n      jumpi\n        /* \"contracts/SimpleSwap.sol\":17271:17276  z = y */\n      pop\n      dup1\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      dup1\n      0x01\n      shr\n      0x01\n      dup2\n      add\n      dup1\n      swap2\n      gt\n      tag_82\n      jumpi\n        /* \"contracts/SimpleSwap.sol\":17325:17414  while (x < z) {... */\n      swap1\n        /* \"contracts/SimpleSwap.sol\":17332:17337  x < z */\n    tag_84:\n      dup3\n      dup3\n      lt\n      tag_85\n      jumpi\n        /* \"contracts/SimpleSwap.sol\":17246:17472  if (y > 3) {... */\n      pop\n      pop\n    tag_87:\n        /* \"contracts/SimpleSwap.sol\":6048:6699  if (reserveA == 0 && reserveB == 0) {... */\n      swap6\n    tag_88:\n        /* \"contracts/SimpleSwap.sol\":16425:16432  amountA */\n      tag_89\n        /* \"contracts/SimpleSwap.sol\":16418:16422  this */\n      dup10\n      address\n        /* \"contracts/SimpleSwap.sol\":16398:16408  msg.sender */\n      caller\n        /* \"contracts/SimpleSwap.sol\":16425:16432  amountA */\n      dup9\n      tag_20\n      jump\t// in\n    tag_89:\n        /* \"contracts/SimpleSwap.sol\":16502:16509  amountB */\n      tag_90\n        /* \"contracts/SimpleSwap.sol\":16418:16422  this */\n      dup11\n      address\n        /* \"contracts/SimpleSwap.sol\":16398:16408  msg.sender */\n      caller\n        /* \"contracts/SimpleSwap.sol\":16502:16509  amountB */\n      dup10\n      tag_20\n      jump\t// in\n    tag_90:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7509:7530  account == address(0) */\n      dup4\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7505:7596  if (account == address(0)) {... */\n      tag_91\n      jumpi\n        /* \"contracts/SimpleSwap.sol\":6955:6973  reserveB + amountB */\n      tag_93\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      dup11\n        /* \"contracts/SimpleSwap.sol\":6935:6953  reserveA + amountA */\n      tag_94\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      dup12\n      tag_95\n      swap12\n        /* \"contracts/SimpleSwap.sol\":6955:6973  reserveB + amountB */\n      tag_96\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      swap9\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7064:7089  Transfer(from, to, value) */\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      0x20\n      dup16\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6214:6235  _totalSupply += value */\n      tag_97\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6214:6235  _totalSupply += value */\n      0x02\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6214:6235  _totalSupply += value */\n      tag_8\n      jump\t// in\n    tag_97:\n      0x02\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      sstore\n      dup5\n      dup5\n      mstore\n      dup4\n      dup3\n      mstore\n      0x40\n      dup5\n      keccak256\n      dup2\n      dup2\n      sload\n      add\n      swap1\n      sstore\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7064:7089  Transfer(from, to, value) */\n      log3\n        /* \"contracts/SimpleSwap.sol\":6935:6953  reserveA + amountA */\n      tag_8\n      jump\t// in\n    tag_94:\n        /* \"contracts/SimpleSwap.sol\":6955:6973  reserveB + amountB */\n      swap4\n      tag_8\n      jump\t// in\n    tag_93:\n      swap3\n      tag_22\n      jump\t// in\n    tag_96:\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      0x40\n      dup1\n      mload\n      dup7\n      dup2\n      mstore\n      0x20\n      dup2\n      add\n      dup9\n      swap1\n      mstore\n      swap1\n      dup2\n      add\n      dup5\n      swap1\n      mstore\n        /* \"contracts/SimpleSwap.sol\":16398:16408  msg.sender */\n      caller\n      swap1\n        /* \"contracts/SimpleSwap.sol\":6990:7061  LiquidityAdded(msg.sender, tokenA, tokenB, amountA, amountB, liquidity) */\n      0x43c967b388d3a4ccad3f7ab80167852e322e5a3fde9893f530252281b2ae8b70\n      swap1\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      0x60\n      swap1\n        /* \"contracts/SimpleSwap.sol\":6990:7061  LiquidityAdded(msg.sender, tokenA, tokenB, amountA, amountB, liquidity) */\n      log4\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      mload(0x40)\n      swap4\n      dup5\n      swap4\n      dup5\n      0x40\n      swap2\n      swap5\n      swap4\n      swap3\n      0x60\n      dup3\n      add\n      swap6\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      mstore\n      add\n      mstore\n      jump\n    tag_95:\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7505:7596  if (account == address(0)) {... */\n    tag_91:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7553:7585  ERC20InvalidReceiver(address(0)) */\n      shl(0xe0, 0xec442f05)\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7553:7585  ERC20InvalidReceiver(address(0)) */\n      mstore\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      mstore(0x04, 0x00)\n      0x24\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7553:7585  ERC20InvalidReceiver(address(0)) */\n      revert\n        /* \"contracts/SimpleSwap.sol\":17325:17414  while (x < z) {... */\n    tag_85:\n        /* \"contracts/SimpleSwap.sol\":17357:17362  z = x */\n      swap1\n      swap2\n      pop\n        /* \"contracts/SimpleSwap.sol\":17385:17394  y / x + x */\n      tag_99\n        /* \"contracts/SimpleSwap.sol\":17357:17362  z = x */\n      dup3\n        /* \"contracts/SimpleSwap.sol\":17385:17390  y / x */\n      tag_100\n      dup2\n      dup5\n      tag_9\n      jump\t// in\n    tag_100:\n        /* \"contracts/SimpleSwap.sol\":17385:17394  y / x + x */\n      tag_8\n      jump\t// in\n    tag_99:\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      0x01\n      shr\n        /* \"contracts/SimpleSwap.sol\":17325:17414  while (x < z) {... */\n      swap1\n      jump(tag_84)\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n    tag_82:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x11)\n      revert(0x00, 0x24)\n        /* \"contracts/SimpleSwap.sol\":17246:17472  if (y > 3) {... */\n    tag_80:\n        /* \"contracts/SimpleSwap.sol\":17434:17440  y != 0 */\n      swap1\n        /* \"contracts/SimpleSwap.sol\":17430:17472  if (y != 0) {... */\n      iszero\n        /* \"contracts/SimpleSwap.sol\":17246:17472  if (y > 3) {... */\n      tag_87\n        /* \"contracts/SimpleSwap.sol\":17430:17472  if (y != 0) {... */\n      jumpi\n        /* \"contracts/SimpleSwap.sol\":17456:17461  z = 1 */\n      pop\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      0x01\n        /* \"contracts/SimpleSwap.sol\":17246:17472  if (y > 3) {... */\n      jump(tag_87)\n        /* \"contracts/SimpleSwap.sol\":6048:6699  if (reserveA == 0 && reserveB == 0) {... */\n    tag_77:\n        /* \"contracts/SimpleSwap.sol\":6399:6609  _calculateOptimalDeposit(... */\n      swap2\n      swap10\n      swap2\n        /* \"contracts/SimpleSwap.sol\":17896:17927  (amountA * reserveB) / reserveA */\n      tag_103\n        /* \"contracts/SimpleSwap.sol\":17897:17915  amountA * reserveB */\n      dup10\n      tag_104\n        /* \"contracts/SimpleSwap.sol\":6399:6609  _calculateOptimalDeposit(... */\n      dup14\n        /* \"contracts/SimpleSwap.sol\":17897:17915  amountA * reserveB */\n      dup14\n      tag_7\n      jump\t// in\n    tag_104:\n        /* \"contracts/SimpleSwap.sol\":17896:17927  (amountA * reserveB) / reserveA */\n      tag_9\n      jump\t// in\n    tag_103:\n        /* \"contracts/SimpleSwap.sol\":13913:13945  amountBOptimal <= amountBDesired */\n      swap3\n      dup1\n      dup5\n      gt\n      tag_105\n      jumpi\n        /* \"contracts/SimpleSwap.sol\":13969:13997  amountBOptimal >= amountBMin */\n      pop\n      pop\n      dup2\n      lt\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      tag_107\n      jumpi\n        /* \"contracts/SimpleSwap.sol\":13909:14328  if (amountBOptimal <= amountBDesired) {... */\n    tag_109:\n        /* \"contracts/SimpleSwap.sol\":6378:6609  (amountA, amountB) = _calculateOptimalDeposit(... */\n      swap8\n        /* \"contracts/SimpleSwap.sol\":14772:14804  (amount * totalSupply) / reserve */\n      tag_110\n        /* \"contracts/SimpleSwap.sol\":6378:6609  (amountA, amountB) = _calculateOptimalDeposit(... */\n      dup8\n        /* \"contracts/SimpleSwap.sol\":14773:14793  amount * totalSupply */\n      tag_104\n        /* \"contracts/SimpleSwap.sol\":6378:6609  (amountA, amountB) = _calculateOptimalDeposit(... */\n      dup11\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2908:2920  _totalSupply */\n      0x02\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      sload\n        /* \"contracts/SimpleSwap.sol\":14773:14793  amount * totalSupply */\n      swap1\n      tag_7\n      jump\t// in\n        /* \"contracts/SimpleSwap.sol\":14772:14804  (amount * totalSupply) / reserve */\n    tag_110:\n        /* \"contracts/SimpleSwap.sol\":14822:14835  liquidity > 0 */\n      dup1\n      iszero\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      tag_112\n      jumpi\n        /* \"contracts/SimpleSwap.sol\":6048:6699  if (reserveA == 0 && reserveB == 0) {... */\n      swap6\n      jump(tag_88)\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n    tag_112:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x16\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x50, 0x496e73756666696369656e74206c6971756964697479)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_107:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x0e\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x91, 0x24b739bab33334b1b4b2b73a1021)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n        /* \"contracts/SimpleSwap.sol\":13909:14328  if (amountBOptimal <= amountBDesired) {... */\n    tag_105:\n        /* \"contracts/SimpleSwap.sol\":17897:17915  amountA * reserveB */\n      swap3\n      pop\n      swap9\n      pop\n      pop\n        /* \"contracts/SimpleSwap.sol\":17896:17927  (amountA * reserveB) / reserveA */\n      tag_114\n        /* \"contracts/SimpleSwap.sol\":17897:17915  amountA * reserveB */\n      dup10\n      tag_104\n      dup10\n      dup5\n      tag_7\n      jump\t// in\n        /* \"contracts/SimpleSwap.sol\":17896:17927  (amountA * reserveB) / reserveA */\n    tag_114:\n        /* \"contracts/SimpleSwap.sol\":14203:14231  amountAOptimal >= amountAMin */\n      swap8\n      dup9\n      lt\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      iszero\n        /* \"contracts/SimpleSwap.sol\":13909:14328  if (amountBOptimal <= amountBDesired) {... */\n      tag_109\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x0e\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x90, 0x496e73756666696369656e742041)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n        /* \"contracts/SimpleSwap.sol\":6052:6082  reserveA == 0 && reserveB == 0 */\n    tag_75:\n        /* \"contracts/SimpleSwap.sol\":6069:6082  reserveB == 0 */\n      pop\n      dup3\n      iszero\n        /* \"contracts/SimpleSwap.sol\":6052:6082  reserveA == 0 && reserveB == 0 */\n      jump(tag_76)\n        /* \"contracts/SimpleSwap.sol\":5633:5693  amountADesired >= amountAMin && amountBDesired >= amountBMin */\n    tag_72:\n      pop\n        /* \"contracts/SimpleSwap.sol\":5665:5693  amountBDesired >= amountBMin */\n      dup8\n      dup11\n      lt\n      iszero\n        /* \"contracts/SimpleSwap.sol\":5633:5693  amountADesired >= amountAMin && amountBDesired >= amountBMin */\n      jump(tag_73)\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n    tag_69:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x0f\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x88, 0x496e76616c696420616d6f756e7473)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n        /* \"contracts/SimpleSwap.sol\":5555:5595  amountADesired > 0 && amountBDesired > 0 */\n    tag_67:\n        /* \"contracts/SimpleSwap.sol\":5577:5595  amountBDesired > 0 */\n      pop\n      dup9\n      iszero\n      iszero\n        /* \"contracts/SimpleSwap.sol\":5555:5595  amountADesired > 0 && amountBDesired > 0 */\n      jump(tag_68)\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n    tag_63:\n      0x00\n      dup1\n      revert\n    tag_53:\n      jumpi(tag_63, callvalue)\n      jumpi(tag_63, slt(add(not(0x03), calldatasize), 0x40))\n      tag_122\n      tag_2\n      jump\t// in\n    tag_122:\n      tag_123\n      tag_3\n      jump\t// in\n    tag_123:\n      sub(shl(0xa0, 0x01), 0x01)\n      swap2\n      dup3\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n      0x01\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n      swap5\n      swap1\n      swap4\n      and\n      dup3\n      mstore\n      swap3\n      dup4\n      mstore\n      dup2\n      swap1\n      keccak256\n      sload\n      swap1\n      mload\n      swap1\n      dup2\n      mstore\n      return\n    tag_51:\n      jumpi(tag_63, callvalue)\n      jumpi(tag_63, slt(add(not(0x03), calldatasize), 0xe0))\n      tag_128\n      tag_2\n      jump\t// in\n    tag_128:\n      tag_129\n      tag_3\n      jump\t// in\n    tag_129:\n      swap1\n      calldataload(0xa4)\n      swap1\n      calldataload(0x44)\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      dup4\n      and\n      dup4\n      sub\n      tag_63\n      jumpi\n        /* \"contracts/SimpleSwap.sol\":3399:3454  require(deadline >= block.timestamp, \"Deadline passed\") */\n      tag_132\n        /* \"contracts/SimpleSwap.sol\":3419:3434  block.timestamp */\n      timestamp\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      calldataload(0xc4)\n        /* \"contracts/SimpleSwap.sol\":3407:3434  deadline >= block.timestamp */\n      lt\n      iszero\n        /* \"contracts/SimpleSwap.sol\":3399:3454  require(deadline >= block.timestamp, \"Deadline passed\") */\n      tag_13\n      jump\t// in\n    tag_132:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      dup2\n      dup2\n      and\n      swap5\n      swap1\n      dup2\n      and\n      swap2\n      swap1\n        /* \"contracts/SimpleSwap.sol\":3688:3733  require(tokenA != tokenB, \"Identical tokens\") */\n      tag_133\n        /* \"contracts/SimpleSwap.sol\":3696:3712  tokenA != tokenB */\n      dup7\n      dup5\n      eq\n      iszero\n        /* \"contracts/SimpleSwap.sol\":3688:3733  require(tokenA != tokenB, \"Identical tokens\") */\n      tag_17\n      jump\t// in\n    tag_133:\n        /* \"contracts/SimpleSwap.sol\":8029:8042  liquidity > 0 */\n      dup4\n      iszero\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      tag_134\n      jumpi\n        /* \"contracts/SimpleSwap.sol\":8155:8182  _sortTokens(tokenA, tokenB) */\n      tag_136\n      swap2\n      tag_23\n      jump\t// in\n    tag_136:\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      swap5\n      swap1\n      swap3\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      dup5\n      and\n      swap4\n      dup5\n      0x00\n      mstore\n        /* \"contracts/SimpleSwap.sol\":8212:8217  pools */\n      0x05\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      0x20\n      mstore\n      keccak256(0x00, 0x40)\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      dup9\n      and\n      0x00\n      mstore\n      0x20\n      mstore\n      keccak256(0x00, 0x40)\n      swap7\n      0x01\n      dup9\n      sload\n        /* \"contracts/SimpleSwap.sol\":8345:8358  pool.reserveB */\n      swap9\n      add\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      sload\n      swap8\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2908:2920  _totalSupply */\n      0x02\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      sload\n        /* \"contracts/SimpleSwap.sol\":15425:15445  liquidity * reserveA */\n      swap8\n        /* \"contracts/SimpleSwap.sol\":15481:15518  (liquidity * reserveB) / _totalSupply */\n      tag_137\n        /* \"contracts/SimpleSwap.sol\":15424:15461  (liquidity * reserveA) / _totalSupply */\n      tag_138\n        /* \"contracts/SimpleSwap.sol\":15425:15445  liquidity * reserveA */\n      dup11\n      tag_104\n      dup6\n      dup10\n      tag_7\n      jump\t// in\n        /* \"contracts/SimpleSwap.sol\":15424:15461  (liquidity * reserveA) / _totalSupply */\n    tag_138:\n        /* \"contracts/SimpleSwap.sol\":15482:15502  liquidity * reserveB */\n      swap10\n      tag_104\n      dup13\n      dup9\n      tag_7\n      jump\t// in\n        /* \"contracts/SimpleSwap.sol\":15481:15518  (liquidity * reserveB) / _totalSupply */\n    tag_137:\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      swap8\n      calldataload(0x64)\n        /* \"contracts/SimpleSwap.sol\":8564:8585  amountA >= amountAMin */\n      dup11\n      lt\n      iszero\n        /* \"contracts/SimpleSwap.sol\":8564:8610  amountA >= amountAMin && amountB >= amountBMin */\n      dup1\n      tag_141\n      jumpi\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n    tag_142:\n        /* \"contracts/SimpleSwap.sol\":8556:8626  require(amountA >= amountAMin && amountB >= amountBMin, \"Min not met\") */\n      tag_143\n      swap1\n      tag_18\n      jump\t// in\n    tag_143:\n        /* \"contracts/SimpleSwap.sol\":8700:8710  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8035:8056  account == address(0) */\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8031:8120  if (account == address(0)) {... */\n      tag_144\n      jumpi\n        /* \"contracts/SimpleSwap.sol\":8700:8710  msg.sender */\n      caller\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      0x00\n      mstore\n      mstore(0x20, 0x00)\n      sload(keccak256(0x00, 0x40))\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6321:6340  fromBalance < value */\n      dup7\n      dup2\n      lt\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6317:6432  if (fromBalance < value) {... */\n      tag_146\n      jumpi\n        /* \"contracts/SimpleSwap.sol\":8901:8919  reserveA - amountA */\n      tag_148\n        /* \"contracts/SimpleSwap.sol\":8700:8710  msg.sender */\n      dup12\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      0x40\n        /* \"contracts/SimpleSwap.sol\":8700:8710  msg.sender */\n      swap14\n      swap6\n        /* \"contracts/SimpleSwap.sol\":16840:16846  amount */\n      tag_149\n        /* \"contracts/SimpleSwap.sol\":8700:8710  msg.sender */\n      dup14\n      dup8\n        /* \"contracts/SimpleSwap.sol\":16840:16846  amount */\n      tag_150\n        /* \"contracts/SimpleSwap.sol\":8700:8710  msg.sender */\n      dup6\n        /* \"contracts/SimpleSwap.sol\":8921:8939  reserveB - amountB */\n      tag_151\n        /* \"contracts/SimpleSwap.sol\":8700:8710  msg.sender */\n      swap14\n      swap13\n      swap11\n      dup16\n      swap11\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      0x00\n        /* \"contracts/SimpleSwap.sol\":8700:8710  msg.sender */\n      dup13\n        /* \"contracts/SimpleSwap.sol\":8921:8939  reserveB - amountB */\n      tag_93\n        /* \"contracts/SimpleSwap.sol\":8700:8710  msg.sender */\n      swap14\n      dup9\n      swap14\n      caller\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      dup5\n      mstore\n      dup4\n      0x20\n      mstore\n      sub\n      0x40\n      dup4\n      keccak256\n      sstore\n      dup1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2908:2920  _totalSupply */\n      0x02\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      sload\n      sub\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2908:2920  _totalSupply */\n      0x02\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      sstore\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7064:7089  Transfer(from, to, value) */\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      0x20\n        /* \"contracts/SimpleSwap.sol\":8700:8710  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7064:7089  Transfer(from, to, value) */\n      swap3\n      log3\n        /* \"contracts/SimpleSwap.sol\":16840:16846  amount */\n      tag_21\n      jump\t// in\n    tag_150:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      dup10\n      and\n        /* \"contracts/SimpleSwap.sol\":16840:16846  amount */\n      tag_21\n      jump\t// in\n    tag_149:\n        /* \"contracts/SimpleSwap.sol\":8901:8919  reserveA - amountA */\n      tag_16\n      jump\t// in\n    tag_148:\n        /* \"contracts/SimpleSwap.sol\":8921:8939  reserveB - amountB */\n      swap4\n      tag_16\n      jump\t// in\n    tag_151:\n        /* \"contracts/SimpleSwap.sol\":8956:9029  LiquidityRemoved(msg.sender, tokenA, tokenB, amountA, amountB, liquidity) */\n      0xd765e08eef31c0983ecca03ecd166297ac485ecd5dd69e291c848f0a020333c1\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      dup7\n      mload\n        /* \"contracts/SimpleSwap.sol\":8700:8710  msg.sender */\n      dup1\n        /* \"contracts/SimpleSwap.sol\":8956:9029  LiquidityRemoved(msg.sender, tokenA, tokenB, amountA, amountB, liquidity) */\n      tag_153\n        /* \"contracts/SimpleSwap.sol\":8700:8710  msg.sender */\n      caller\n        /* \"contracts/SimpleSwap.sol\":8956:9029  LiquidityRemoved(msg.sender, tokenA, tokenB, amountA, amountB, liquidity) */\n      swap5\n      dup9\n      dup11\n      dup5\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      0x40\n      swap2\n      swap5\n      swap4\n      swap3\n      0x60\n      dup3\n      add\n      swap6\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      mstore\n      add\n      mstore\n      jump\n        /* \"contracts/SimpleSwap.sol\":8956:9029  LiquidityRemoved(msg.sender, tokenA, tokenB, amountA, amountB, liquidity) */\n    tag_153:\n      sub\n      swap1\n      log4\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      dup3\n      mload\n      swap2\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      mstore\n      return\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6317:6432  if (fromBalance < value) {... */\n    tag_146:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6367:6417  ERC20InsufficientBalance(from, fromBalance, value) */\n      dup7\n      swap1\n      shl(0xe2, 0x391434e3)\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6367:6417  ERC20InsufficientBalance(from, fromBalance, value) */\n      mstore\n        /* \"contracts/SimpleSwap.sol\":8700:8710  msg.sender */\n      caller\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      0x04\n      mstore\n      0x24\n      mstore\n      0x44\n      mstore\n      0x64\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6367:6417  ERC20InsufficientBalance(from, fromBalance, value) */\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8031:8120  if (account == address(0)) {... */\n    tag_144:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8079:8109  ERC20InvalidSender(address(0)) */\n      shl(0xe1, 0x4b637e8f)\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8079:8109  ERC20InvalidSender(address(0)) */\n      mstore\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      mstore(0x04, 0x00)\n      0x24\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":8079:8109  ERC20InvalidSender(address(0)) */\n      revert\n        /* \"contracts/SimpleSwap.sol\":8564:8610  amountA >= amountAMin && amountB >= amountBMin */\n    tag_141:\n      pop\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      calldataload(0x84)\n        /* \"contracts/SimpleSwap.sol\":8589:8610  amountB >= amountBMin */\n      dup10\n      lt\n      iszero\n        /* \"contracts/SimpleSwap.sol\":8564:8610  amountA >= amountAMin && amountB >= amountBMin */\n      jump(tag_142)\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n    tag_134:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x11\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x78, 0x496e76616c6964206c6971756964697479)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_49:\n      jumpi(tag_63, callvalue)\n      jumpi(tag_63, slt(add(not(0x03), calldatasize), 0x40))\n      tag_158\n      tag_2\n      jump\t// in\n    tag_158:\n      tag_159\n      tag_3\n      jump\t// in\n    tag_159:\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      dup2\n      and\n      swap1\n        /* \"contracts/SimpleSwap.sol\":11420:11465  require(tokenA != tokenB, \"Identical tokens\") */\n      tag_160\n      swap1\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      dup4\n      and\n        /* \"contracts/SimpleSwap.sol\":11428:11444  tokenA != tokenB */\n      dup3\n      eq\n      iszero\n        /* \"contracts/SimpleSwap.sol\":11420:11465  require(tokenA != tokenB, \"Identical tokens\") */\n      tag_17\n      jump\t// in\n    tag_160:\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      0x00\n      mstore\n        /* \"contracts/SimpleSwap.sol\":11503:11508  pools */\n      0x05\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      0x20\n      mstore\n      keccak256(0x00, 0x40)\n        /* \"contracts/SimpleSwap.sol\":11503:11524  pools[tokenA][tokenB] */\n      swap1\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      and\n      0x00\n      mstore\n      0x20\n      mstore\n      keccak256(0x00, 0x40)\n      mload(0x40)\n      swap1\n      tag_161\n      dup3\n      tag_11\n      jump\t// in\n    tag_161:\n        /* \"contracts/SimpleSwap.sol\":11534:11597  require(pool.reserveA > 0 && pool.reserveB > 0, \"No liquidity\") */\n      tag_162\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      0x01\n      dup3\n      sload\n      swap3\n      dup4\n      dup6\n      mstore\n      add\n      sload\n      0x20\n      dup5\n      add\n      swap3\n      dup2\n      dup5\n      mstore\n        /* \"contracts/SimpleSwap.sol\":11542:11559  pool.reserveA > 0 */\n      iszero\n      iszero\n        /* \"contracts/SimpleSwap.sol\":11542:11580  pool.reserveA > 0 && pool.reserveB > 0 */\n      swap1\n      dup2\n      tag_163\n      jumpi\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n    tag_164:\n        /* \"contracts/SimpleSwap.sol\":11534:11597  require(pool.reserveA > 0 && pool.reserveB > 0, \"No liquidity\") */\n      pop\n      tag_6\n      jump\t// in\n    tag_162:\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      mload\n      swap1\n        /* \"contracts/SimpleSwap.sol\":11641:11645  1e18 */\n      0x0de0b6b3a7640000\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      dup3\n      mul\n      swap2\n      dup1\n      dup4\n      div\n        /* \"contracts/SimpleSwap.sol\":11641:11645  1e18 */\n      0x0de0b6b3a7640000\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      eq\n      swap1\n      iszero\n      or\n      iszero\n      tag_82\n      jumpi\n      0x20\n      swap2\n        /* \"contracts/SimpleSwap.sol\":11624:11662  (pool.reserveB * 1e18) / pool.reserveA */\n      tag_167\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      swap2\n      mload\n        /* \"contracts/SimpleSwap.sol\":11624:11662  (pool.reserveB * 1e18) / pool.reserveA */\n      swap1\n      tag_9\n      jump\t// in\n    tag_167:\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n        /* \"contracts/SimpleSwap.sol\":11542:11580  pool.reserveA > 0 && pool.reserveB > 0 */\n    tag_163:\n        /* \"contracts/SimpleSwap.sol\":11563:11580  pool.reserveB > 0 */\n      swap1\n      pop\n      iszero\n      iszero\n        /* \"contracts/SimpleSwap.sol\":11542:11580  pool.reserveA > 0 && pool.reserveB > 0 */\n      dup5\n      jump(tag_164)\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n    tag_47:\n      jumpi(tag_63, callvalue)\n      jumpi(tag_63, slt(add(not(0x03), calldatasize), 0x40))\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3440:3445  value */\n      tag_172\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      tag_173\n      tag_2\n      jump\t// in\n    tag_173:\n      calldataload(0x24)\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      swap1\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":3440:3445  value */\n      tag_19\n      jump\t// in\n    tag_172:\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      0x20\n      mload(0x40)\n      0x01\n      dup2\n      mstore\n      return\n    tag_45:\n      jumpi(tag_63, callvalue)\n      jumpi(tag_63, slt(add(not(0x03), calldatasize), 0x00))\n      mload(0x40)\n      0x00\n      sload(0x04)\n      dup1\n      0x01\n      shr\n      swap1\n      0x01\n      dup2\n      and\n      dup1\n      iszero\n      tag_178\n      jumpi\n    tag_179:\n      0x20\n      dup4\n      lt\n      dup2\n      eq\n      tag_180\n      jumpi\n      dup3\n      dup6\n      mstore\n      swap1\n      dup2\n      iszero\n      tag_182\n      jumpi\n      pop\n      0x01\n      eq\n      tag_184\n      jumpi\n    tag_185:\n      tag_95\n      dup4\n      tag_187\n      dup2\n      dup6\n      sub\n      dup3\n      tag_12\n      jump\t// in\n    tag_187:\n      mload(0x40)\n      swap2\n      dup3\n      swap2\n      dup3\n      tag_1\n      jump\t// in\n    tag_184:\n      swap2\n      swap1\n      pop\n      mstore(0x00, 0x04)\n      0x8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b\n      swap2\n      0x00\n      swap1\n    tag_188:\n      dup1\n      dup3\n      lt\n      tag_189\n      jumpi\n      pop\n      swap1\n      swap2\n      pop\n      dup2\n      add\n      0x20\n      add\n      tag_187\n      jump(tag_185)\n    tag_189:\n      swap2\n      swap3\n      0x01\n      dup2\n      0x20\n      swap3\n      sload\n      dup4\n      dup6\n      dup9\n      add\n      add\n      mstore\n      add\n      swap2\n      add\n      swap1\n      swap3\n      swap2\n      jump(tag_188)\n    tag_182:\n      not(0xff)\n      and\n      0x20\n      dup1\n      dup7\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      swap2\n      iszero\n      iszero\n      0x05\n      shl\n      dup5\n      add\n      swap1\n      swap2\n      add\n      swap2\n      pop\n      tag_187\n      swap1\n      pop\n      jump(tag_185)\n    tag_180:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x22)\n      revert(0x00, 0x24)\n    tag_178:\n      swap2\n      0x7f\n      and\n      swap2\n      jump(tag_179)\n    tag_43:\n      jumpi(tag_63, callvalue)\n      jumpi(tag_63, slt(add(not(0x03), calldatasize), 0x40))\n      tag_195\n      tag_2\n      jump\t// in\n    tag_195:\n      tag_196\n      tag_3\n      jump\t// in\n    tag_196:\n      swap1\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      and\n      0x00\n      mstore\n        /* \"contracts/SimpleSwap.sol\":1232:1289  mapping(address => mapping(address => Pool)) public pools */\n      0x05\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      0x20\n      mstore\n      keccak256(0x00, 0x40)\n        /* \"contracts/SimpleSwap.sol\":1232:1289  mapping(address => mapping(address => Pool)) public pools */\n      swap1\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      and\n      0x00\n      mstore\n      0x20\n      mstore\n      0x40\n      dup1\n      0x00\n      keccak256\n        /* \"contracts/SimpleSwap.sol\":1232:1289  mapping(address => mapping(address => Pool)) public pools */\n      0x01\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      dup2\n      sload\n        /* \"contracts/SimpleSwap.sol\":1232:1289  mapping(address => mapping(address => Pool)) public pools */\n      swap2\n      add\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      sload\n      dup3\n      mload\n      swap2\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      mstore\n      return\n    tag_41:\n      jumpi(tag_63, callvalue)\n      jumpi(tag_63, slt(add(not(0x03), calldatasize), 0x20))\n      sub(shl(0xa0, 0x01), 0x01)\n      tag_201\n      tag_2\n      jump\t// in\n    tag_201:\n      and\n      0x00\n      mstore\n      mstore(0x20, 0x00)\n      0x20\n      sload(keccak256(0x00, 0x40))\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_39:\n      jumpi(tag_63, callvalue)\n      jumpi(tag_63, slt(add(not(0x03), calldatasize), 0xa0))\n      calldataload(0x04)\n      calldataload(0x44)\n      0xffffffffffffffff\n      dup2\n      gt\n      tag_63\n      jumpi\n      calldatasize\n      0x23\n      dup3\n      add\n      slt\n      iszero\n      tag_63\n      jumpi\n      dup1\n      0x04\n      add\n      calldataload\n      0xffffffffffffffff\n      dup2\n      gt\n      tag_63\n      jumpi\n      calldatasize\n      0x24\n      dup3\n      0x05\n      shl\n      dup5\n      add\n      add\n      gt\n      tag_63\n      jumpi\n      calldataload(0x64)\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      dup3\n      and\n      dup3\n      sub\n      tag_63\n      jumpi\n        /* \"contracts/SimpleSwap.sol\":3399:3454  require(deadline >= block.timestamp, \"Deadline passed\") */\n      tag_216\n        /* \"contracts/SimpleSwap.sol\":3419:3434  block.timestamp */\n      timestamp\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      calldataload(0x84)\n        /* \"contracts/SimpleSwap.sol\":3407:3434  deadline >= block.timestamp */\n      lt\n      iszero\n        /* \"contracts/SimpleSwap.sol\":3399:3454  require(deadline >= block.timestamp, \"Deadline passed\") */\n      tag_13\n      jump\t// in\n    tag_216:\n        /* \"contracts/SimpleSwap.sol\":9815:9816  2 */\n      0x02\n        /* \"contracts/SimpleSwap.sol\":9800:9816  path.length == 2 */\n      dup2\n      sub\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      tag_217\n      jumpi\n      mload(0x40)\n      swap4\n      tag_219\n      0x60\n      dup7\n      tag_12\n      jump\t// in\n    tag_219:\n        /* \"contracts/SimpleSwap.sol\":9815:9816  2 */\n      0x02\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      dup6\n      mstore\n      0x20\n      dup6\n      add\n      swap4\n      0x40\n      calldatasize\n      dup7\n      calldatacopy\n      dup6\n      mload\n      iszero\n      tag_225\n      jumpi\n      dup2\n      dup6\n      mstore\n      dup3\n      iszero\n      tag_225\n      jumpi\n        /* \"contracts/SimpleSwap.sol\":9967:9974  path[0] */\n      tag_224\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      0x24\n      dup3\n      add\n        /* \"contracts/SimpleSwap.sol\":9967:9974  path[0] */\n      tag_15\n      jump\t// in\n    tag_224:\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      swap3\n      0x01\n      lt\n      iszero\n      tag_225\n      jumpi\n      0x44\n        /* \"contracts/SimpleSwap.sol\":9976:9983  path[1] */\n      tag_227\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      swap2\n      add\n        /* \"contracts/SimpleSwap.sol\":9976:9983  path[1] */\n      tag_15\n      jump\t// in\n    tag_227:\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      dup4\n      and\n      swap3\n      dup4\n      0x00\n      mstore\n      mstore(0x20, 0x05)\n      keccak256(0x00, 0x40)\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n      dup4\n      and\n      0x00\n      mstore\n      0x20\n      mstore\n      keccak256(0x00, 0x40)\n      swap2\n      0x01\n      dup4\n      sload\n        /* \"contracts/SimpleSwap.sol\":10153:10166  pool.reserveB */\n      swap4\n      add\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      sload\n        /* \"contracts/SimpleSwap.sol\":10193:10205  amountIn > 0 */\n      swap1\n        /* \"contracts/SimpleSwap.sol\":10185:10224  require(amountIn > 0, \"Invalid amount\") */\n      tag_228\n        /* \"contracts/SimpleSwap.sol\":10193:10205  amountIn > 0 */\n      dup6\n      iszero\n      iszero\n        /* \"contracts/SimpleSwap.sol\":10185:10224  require(amountIn > 0, \"Invalid amount\") */\n      tag_5\n      jump\t// in\n    tag_228:\n        /* \"contracts/SimpleSwap.sol\":10242:10255  reserveIn > 0 */\n      dup4\n      iszero\n      iszero\n        /* \"contracts/SimpleSwap.sol\":10242:10273  reserveIn > 0 && reserveOut > 0 */\n      dup1\n      tag_229\n      jumpi\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n    tag_230:\n        /* \"contracts/SimpleSwap.sol\":10234:10290  require(reserveIn > 0 && reserveOut > 0, \"No liquidity\") */\n      tag_231\n      swap1\n      tag_6\n      jump\t// in\n    tag_231:\n        /* \"contracts/SimpleSwap.sol\":10391:10436  getAmountOut(amountIn, reserveIn, reserveOut) */\n      tag_232\n      dup3\n      dup6\n      dup8\n      tag_10\n      jump\t// in\n    tag_232:\n        /* \"contracts/SimpleSwap.sol\":10378:10436  amounts[1] = getAmountOut(amountIn, reserveIn, reserveOut) */\n      tag_233\n      dup11\n      tag_14\n      jump\t// in\n    tag_233:\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      mstore\n      calldataload(0x24)\n        /* \"contracts/SimpleSwap.sol\":10454:10464  amounts[1] */\n      tag_234\n      dup11\n      tag_14\n      jump\t// in\n    tag_234:\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      mload\n        /* \"contracts/SimpleSwap.sol\":10454:10480  amounts[1] >= amountOutMin */\n      lt\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      tag_235\n      jumpi\n        /* \"contracts/SimpleSwap.sol\":10790:10813  reserveOut - amounts[1] */\n      tag_93\n        /* \"contracts/SimpleSwap.sol\":10768:10788  reserveIn + amountIn */\n      tag_238\n        /* \"contracts/SimpleSwap.sol\":10603:10607  this */\n      dup7\n        /* \"contracts/SimpleSwap.sol\":10790:10813  reserveOut - amounts[1] */\n      tag_239\n        /* \"contracts/SimpleSwap.sol\":10603:10607  this */\n      swap7\n        /* \"contracts/SimpleSwap.sol\":10663:10673  amounts[1] */\n      tag_100\n        /* \"contracts/SimpleSwap.sol\":10603:10607  this */\n      dup14\n      swap13\n      swap14\n      swap12\n        /* \"contracts/SimpleSwap.sol\":10610:10618  amountIn */\n      tag_241\n        /* \"contracts/SimpleSwap.sol\":10603:10607  this */\n      dup5\n      dup14\n      address\n        /* \"contracts/SimpleSwap.sol\":10583:10593  msg.sender */\n      swap1\n      caller\n        /* \"contracts/SimpleSwap.sol\":10610:10618  amountIn */\n      swap1\n      tag_20\n      jump\t// in\n    tag_241:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      dup8\n      and\n      swap13\n        /* \"contracts/SimpleSwap.sol\":10663:10673  amounts[1] */\n      tag_242\n      swap1\n      tag_14\n      jump\t// in\n    tag_242:\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      mload\n        /* \"contracts/SimpleSwap.sol\":10663:10673  amounts[1] */\n      swap1\n      dup14\n      tag_21\n      jump\t// in\n        /* \"contracts/SimpleSwap.sol\":10768:10788  reserveIn + amountIn */\n    tag_238:\n        /* \"contracts/SimpleSwap.sol\":10803:10813  amounts[1] */\n      swap3\n      tag_243\n      dup11\n      tag_14\n      jump\t// in\n    tag_243:\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      mload\n        /* \"contracts/SimpleSwap.sol\":10790:10813  reserveOut - amounts[1] */\n      swap1\n      tag_16\n      jump\t// in\n    tag_239:\n        /* \"contracts/SimpleSwap.sol\":10876:10886  amounts[1] */\n      tag_244\n      dup5\n      tag_14\n      jump\t// in\n    tag_244:\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      mload\n      mload(0x40)\n      swap2\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      mstore\n        /* \"contracts/SimpleSwap.sol\":10830:10887  Swap(msg.sender, tokenIn, tokenOut, amountIn, amounts[1]) */\n      0xcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e46062\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      0x40\n        /* \"contracts/SimpleSwap.sol\":10583:10593  msg.sender */\n      caller\n        /* \"contracts/SimpleSwap.sol\":10830:10887  Swap(msg.sender, tokenIn, tokenOut, amountIn, amounts[1]) */\n      swap3\n      log4\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      mload(0x40)\n      swap2\n      dup3\n      swap2\n      0x20\n      dup4\n      add\n      swap1\n      0x20\n      dup5\n      mstore\n      mload\n      dup1\n      swap2\n      mstore\n      0x40\n      dup4\n      add\n      swap2\n      swap1\n      0x00\n    tag_245:\n      dup2\n      dup2\n      lt\n      tag_246\n      jumpi\n      pop\n      pop\n      pop\n      sub\n      swap1\n      return\n    tag_246:\n      dup3\n      mload\n      dup5\n      mstore\n      dup6\n      swap5\n      pop\n      0x20\n      swap4\n      dup5\n      add\n      swap4\n      swap1\n      swap3\n      add\n      swap2\n      0x01\n      add\n      jump(tag_245)\n    tag_235:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x13\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x6a, 0x125b9cdd59999a58da595b9d081bdd5d1c1d5d)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n        /* \"contracts/SimpleSwap.sol\":10242:10273  reserveIn > 0 && reserveOut > 0 */\n    tag_229:\n      pop\n        /* \"contracts/SimpleSwap.sol\":10259:10273  reserveOut > 0 */\n      dup2\n      iszero\n      iszero\n        /* \"contracts/SimpleSwap.sol\":10242:10273  reserveIn > 0 && reserveOut > 0 */\n      jump(tag_230)\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n    tag_225:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x32)\n      revert(0x00, 0x24)\n    tag_217:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x0c\n      0x24\n      dup3\n      add\n      mstore\n      shl(0xa3, 0x092dcecc2d8d2c840e0c2e8d)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_37:\n      jumpi(tag_63, callvalue)\n      jumpi(tag_63, slt(add(not(0x03), calldatasize), 0x00))\n      0x20\n      mload(0x40)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2761:2763  18 */\n      0x12\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      dup2\n      mstore\n      return\n    tag_35:\n      jumpi(tag_63, callvalue)\n      jumpi(tag_63, slt(add(not(0x03), calldatasize), 0x60))\n      tag_256\n      tag_2\n      jump\t// in\n    tag_256:\n      tag_257\n      tag_3\n      jump\t// in\n    tag_257:\n      sub(shl(0xa0, 0x01), 0x01)\n      dup3\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n      0x01\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      dup5\n      mstore\n      swap1\n      swap2\n      mstore\n      swap1\n      keccak256\n      sload\n      swap1\n      swap3\n      calldataload(0x44)\n      swap3\n      swap2\n      not(0x00)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10561:10597  currentAllowance < type(uint256).max */\n      dup2\n      lt\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10557:10866  if (currentAllowance < type(uint256).max) {... */\n      tag_258\n      jumpi\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n    tag_259:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4967:4972  value */\n      pop\n      tag_172\n      swap4\n      pop\n      tag_19\n      jump\t// in\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10557:10866  if (currentAllowance < type(uint256).max) {... */\n    tag_258:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10617:10641  currentAllowance < value */\n      dup4\n      dup2\n      lt\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10613:10743  if (currentAllowance < value) {... */\n      tag_261\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9794:9813  owner == address(0) */\n      dup5\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9790:9879  if (owner == address(0)) {... */\n      tag_263\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9892:9913  spender == address(0) */\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9888:9978  if (spender == address(0)) {... */\n      tag_265\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":4967:4972  value */\n      tag_172\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      swap5\n      0x00\n      mstore\n      mstore(0x20, 0x01)\n      keccak256(0x00, 0x40)\n      0x01\n      dup1\n      0xa0\n      shl\n      sub\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      and\n      0x00\n      mstore\n      0x20\n      mstore\n      dup4\n      keccak256(0x00, 0x40)\n      swap2\n      sub\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10557:10866  if (currentAllowance < type(uint256).max) {... */\n      dup5\n      jump(tag_259)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9888:9978  if (spender == address(0)) {... */\n    tag_265:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9936:9967  ERC20InvalidSpender(address(0)) */\n      shl(0xe1, 0x4a1406b1)\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9936:9967  ERC20InvalidSpender(address(0)) */\n      mstore\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      mstore(0x04, 0x00)\n      0x24\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9936:9967  ERC20InvalidSpender(address(0)) */\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9790:9879  if (owner == address(0)) {... */\n    tag_263:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9836:9868  ERC20InvalidApprover(address(0)) */\n      shl(0xe0, 0xe602df05)\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9836:9868  ERC20InvalidApprover(address(0)) */\n      mstore\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      mstore(0x04, 0x00)\n      0x24\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9836:9868  ERC20InvalidApprover(address(0)) */\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10613:10743  if (currentAllowance < value) {... */\n    tag_261:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10668:10728  ERC20InsufficientAllowance(spender, currentAllowance, value) */\n      dup4\n      swap1\n      shl(0xe1, 0x7dc7a0d9)\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10668:10728  ERC20InsufficientAllowance(spender, currentAllowance, value) */\n      mstore\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      0x04\n      mstore\n      0x24\n      mstore\n      0x44\n      mstore\n      0x64\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10668:10728  ERC20InsufficientAllowance(spender, currentAllowance, value) */\n      revert\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n    tag_33:\n      jumpi(tag_63, callvalue)\n      jumpi(tag_63, slt(add(not(0x03), calldatasize), 0x00))\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":2908:2920  _totalSupply */\n      0x02\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      sload\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n      return\n    tag_31:\n      jumpi(tag_63, callvalue)\n      jumpi(tag_63, slt(add(not(0x03), calldatasize), 0x40))\n      tag_275\n      tag_2\n      jump\t// in\n    tag_275:\n      calldataload(0x24)\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      swap1\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9794:9813  owner == address(0) */\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9790:9879  if (owner == address(0)) {... */\n      tag_263\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      and\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9892:9913  spender == address(0) */\n      dup2\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":9888:9978  if (spender == address(0)) {... */\n      tag_265\n      jumpi\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      0x00\n      mstore\n      mstore(0x20, 0x01)\n      keccak256(0x00, 0x40)\n      dup3\n      0x00\n      mstore\n      0x20\n      mstore\n      dup1\n      keccak256(0x00, 0x40)\n      sstore\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10066:10097  Approval(owner, spender, value) */\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      0x20\n        /* \"@openzeppelin/contracts/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":10066:10097  Approval(owner, spender, value) */\n      swap3\n      log3\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      0x20\n      mload(0x40)\n      0x01\n      dup2\n      mstore\n      return\n    tag_29:\n      jumpi(tag_63, callvalue)\n      jumpi(tag_63, slt(add(not(0x03), calldatasize), 0x00))\n      mload(0x40)\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1837:1842  _name */\n      0x03\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      sload\n      dup1\n      0x01\n      shr\n      swap1\n      0x01\n      dup2\n      and\n      dup1\n      iszero\n      tag_284\n      jumpi\n    tag_285:\n      0x20\n      dup4\n      lt\n      dup2\n      eq\n      tag_180\n      jumpi\n      dup3\n      dup6\n      mstore\n      swap1\n      dup2\n      iszero\n      tag_182\n      jumpi\n      pop\n      0x01\n      eq\n      tag_290\n      jumpi\n      tag_95\n      dup4\n      tag_187\n      dup2\n      dup6\n      sub\n      dup3\n      tag_12\n      jump\t// in\n    tag_290:\n      swap2\n      swap1\n      pop\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":1837:1842  _name */\n      0x03\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      0x00\n      mstore\n      0xc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b\n      swap2\n      0x00\n      swap1\n    tag_294:\n      dup1\n      dup3\n      lt\n      tag_295\n      jumpi\n      pop\n      swap1\n      swap2\n      pop\n      dup2\n      add\n      0x20\n      add\n      tag_187\n      jump(tag_185)\n    tag_295:\n      swap2\n      swap3\n      0x01\n      dup2\n      0x20\n      swap3\n      sload\n      dup4\n      dup6\n      dup9\n      add\n      add\n      mstore\n      add\n      swap2\n      add\n      swap1\n      swap3\n      swap2\n      jump(tag_294)\n    tag_284:\n      swap2\n      0x7f\n      and\n      swap2\n      jump(tag_285)\n    tag_27:\n      jumpi(tag_63, callvalue)\n      jumpi(tag_63, slt(add(not(0x03), calldatasize), 0x60))\n      0x20\n      tag_167\n      calldataload(0x44)\n      calldataload(0x24)\n      calldataload(0x04)\n      tag_10\n      jump\t// in\n    tag_1:\n      0x20\n      0x40\n      swap3\n      dup2\n      dup4\n      mstore\n      dup1\n      mload\n      swap2\n      dup3\n      swap2\n      dup3\n      dup3\n      dup7\n      add\n      mstore\n      add\n      dup5\n      dup5\n      add\n      mcopy\n      0x00\n      dup3\n      dup3\n      add\n      dup5\n      add\n      mstore\n      0x1f\n      add\n      not(0x1f)\n      and\n      add\n      add\n      swap1\n      jump\t// out\n    tag_2:\n      calldataload(0x04)\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      dup3\n      and\n      dup3\n      sub\n      tag_63\n      jumpi\n      jump\t// out\n    tag_3:\n      calldataload(0x24)\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      dup3\n      and\n      dup3\n      sub\n      tag_63\n      jumpi\n      jump\t// out\n    tag_5:\n      iszero\n      tag_306\n      jumpi\n      jump\t// out\n    tag_306:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x0e\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x92, 0x125b9d985b1a5908185b5bdd5b9d)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_6:\n      iszero\n      tag_308\n      jumpi\n      jump\t// out\n    tag_308:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x0c\n      0x24\n      dup3\n      add\n      mstore\n      shl(0xa0, 0x4e6f206c6971756964697479)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_7:\n      dup2\n      dup2\n      mul\n      swap3\n      swap2\n      dup2\n      iszero\n      swap2\n      dup5\n      div\n      eq\n      or\n      iszero\n      tag_82\n      jumpi\n      jump\t// out\n    tag_8:\n      swap2\n      swap1\n      dup3\n      add\n      dup1\n      swap3\n      gt\n      tag_82\n      jumpi\n      jump\t// out\n    tag_9:\n      dup2\n      iszero\n      tag_314\n      jumpi\n      div\n      swap1\n      jump\t// out\n    tag_314:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x12)\n      revert(0x00, 0x24)\n        /* \"contracts/SimpleSwap.sol\":12058:12417  function getAmountOut(... */\n    tag_10:\n        /* \"contracts/SimpleSwap.sol\":12389:12409  reserveIn + amountIn */\n      tag_316\n        /* \"contracts/SimpleSwap.sol\":12058:12417  function getAmountOut(... */\n      swap1\n        /* \"contracts/SimpleSwap.sol\":12363:12384  amountIn * reserveOut */\n      tag_317\n        /* \"contracts/SimpleSwap.sol\":12362:12410  (amountIn * reserveOut) / (reserveIn + amountIn) */\n      tag_318\n        /* \"contracts/SimpleSwap.sol\":12058:12417  function getAmountOut(... */\n      swap5\n        /* \"contracts/SimpleSwap.sol\":12226:12265  require(amountIn > 0, \"Invalid amount\") */\n      tag_319\n        /* \"contracts/SimpleSwap.sol\":12234:12246  amountIn > 0 */\n      dup4\n      iszero\n      iszero\n        /* \"contracts/SimpleSwap.sol\":12226:12265  require(amountIn > 0, \"Invalid amount\") */\n      tag_5\n      jump\t// in\n    tag_319:\n        /* \"contracts/SimpleSwap.sol\":12283:12296  reserveIn > 0 */\n      dup5\n      iszero\n      iszero\n        /* \"contracts/SimpleSwap.sol\":12283:12314  reserveIn > 0 && reserveOut > 0 */\n      dup1\n      tag_320\n      jumpi\n        /* \"contracts/SimpleSwap.sol\":12058:12417  function getAmountOut(... */\n    tag_321:\n        /* \"contracts/SimpleSwap.sol\":12275:12331  require(reserveIn > 0 && reserveOut > 0, \"No liquidity\") */\n      tag_322\n      swap1\n      tag_6\n      jump\t// in\n    tag_322:\n        /* \"contracts/SimpleSwap.sol\":12363:12384  amountIn * reserveOut */\n      dup3\n      tag_7\n      jump\t// in\n    tag_317:\n        /* \"contracts/SimpleSwap.sol\":12389:12409  reserveIn + amountIn */\n      swap3\n      tag_8\n      jump\t// in\n    tag_316:\n        /* \"contracts/SimpleSwap.sol\":12362:12410  (amountIn * reserveOut) / (reserveIn + amountIn) */\n      swap1\n      tag_9\n      jump\t// in\n    tag_318:\n        /* \"contracts/SimpleSwap.sol\":12058:12417  function getAmountOut(... */\n      swap1\n      jump\t// out\n        /* \"contracts/SimpleSwap.sol\":12283:12314  reserveIn > 0 && reserveOut > 0 */\n    tag_320:\n      pop\n        /* \"contracts/SimpleSwap.sol\":12300:12314  reserveOut > 0 */\n      dup1\n      iszero\n      iszero\n        /* \"contracts/SimpleSwap.sol\":12283:12314  reserveIn > 0 && reserveOut > 0 */\n      jump(tag_321)\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n    tag_11:\n      0x40\n      dup2\n      add\n      swap1\n      dup2\n      lt\n      0xffffffffffffffff\n      dup3\n      gt\n      or\n      tag_323\n      jumpi\n      0x40\n      mstore\n      jump\t// out\n    tag_323:\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x41)\n      revert(0x00, 0x24)\n    tag_12:\n      swap1\n      0x1f\n      dup1\n      not\n      swap2\n      add\n      and\n      dup2\n      add\n      swap1\n      dup2\n      lt\n      0xffffffffffffffff\n      dup3\n      gt\n      or\n      tag_323\n      jumpi\n      0x40\n      mstore\n      jump\t// out\n    tag_13:\n      iszero\n      tag_327\n      jumpi\n      jump\t// out\n    tag_327:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x0f\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x8a, 0x111958591b1a5b99481c185cdcd959)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_14:\n      dup1\n      mload\n        /* \"contracts/SimpleSwap.sol\":9981:9982  1 */\n      0x01\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      lt\n      iszero\n      tag_225\n      jumpi\n      0x40\n      add\n      swap1\n      jump\t// out\n    tag_15:\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n      dup2\n      and\n      dup2\n      sub\n      tag_63\n      jumpi\n      swap1\n      jump\t// out\n    tag_16:\n      swap2\n      swap1\n      dup3\n      sub\n      swap2\n      dup3\n      gt\n      tag_82\n      jumpi\n      jump\t// out\n    tag_17:\n      iszero\n      tag_335\n      jumpi\n      jump\t// out\n    tag_335:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x10\n      0x24\n      dup3\n      add\n      mstore\n      shl(0x80, 0x4964656e746963616c20746f6b656e73)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n    tag_18:\n      iszero\n      tag_337\n      jumpi\n      jump\t// out\n    tag_337:\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      mstore\n      0x0b\n      0x24\n      dup3\n      add\n      mstore\n      shl(0xaa, 0x135a5b881b9bdd081b595d)\n      0x44\n      dup3\n      add\n      mstore\n      0x64\n      swap1\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5374:5674  function _transfer(address from, address to, uint256 value) internal {... */\n    tag_19:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      and\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5457:5475  from == address(0) */\n      dup2\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5453:5539  if (from == address(0)) {... */\n      tag_144\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      and\n      swap2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5552:5568  to == address(0) */\n      dup3\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5548:5634  if (to == address(0)) {... */\n      tag_91\n      jumpi\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5473:5474  0 */\n      0x00\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5473:5474  0 */\n      0x00\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      0x20\n      mstore\n      0x40\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5473:5474  0 */\n      0x00\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6321:6340  fromBalance < value */\n      dup2\n      dup2\n      lt\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6317:6432  if (fromBalance < value) {... */\n      tag_343\n      jumpi\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      dup2\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7064:7089  Transfer(from, to, value) */\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      swap3\n      0x20\n      swap3\n      dup6\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5473:5474  0 */\n      0x00\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5473:5474  0 */\n      0x00\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      dup5\n      mstore\n      sub\n      0x40\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5473:5474  0 */\n      0x00\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      keccak256\n      sstore\n      dup5\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5473:5474  0 */\n      0x00\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5473:5474  0 */\n      0x00\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      dup3\n      mstore\n      0x40\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5473:5474  0 */\n      0x00\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      keccak256\n      dup2\n      dup2\n      sload\n      add\n      swap1\n      sstore\n      mload(0x40)\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":7064:7089  Transfer(from, to, value) */\n      log3\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5374:5674  function _transfer(address from, address to, uint256 value) internal {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6317:6432  if (fromBalance < value) {... */\n    tag_343:\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6367:6417  ERC20InsufficientBalance(from, fromBalance, value) */\n      dup3\n      shl(0xe2, 0x391434e3)\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5473:5474  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6367:6417  ERC20InsufficientBalance(from, fromBalance, value) */\n      mstore\n      0x04\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      mstore\n      0x24\n      mstore\n      0x44\n      mstore\n      0x64\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":5473:5474  0 */\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/ERC20.sol\":6367:6417  ERC20InsufficientBalance(from, fromBalance, value) */\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1618:1806  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {... */\n    tag_20:\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      mload(0x40)\n      shl(0xe0, 0x23b872dd)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1745:1798  abi.encodeCall(token.transferFrom, (from, to, value)) */\n      0x20\n      dup3\n      add\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      swap3\n      dup4\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1745:1798  abi.encodeCall(token.transferFrom, (from, to, value)) */\n      0x24\n      dup3\n      add\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      mstore\n      swap3\n      swap1\n      swap2\n      and\n      0x44\n      dup4\n      add\n      mstore\n      0x64\n      dup1\n      dup4\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1745:1798  abi.encodeCall(token.transferFrom, (from, to, value)) */\n      swap2\n      dup2\n      mstore\n      tag_345\n      swap2\n      tag_346\n      0x84\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1745:1798  abi.encodeCall(token.transferFrom, (from, to, value)) */\n      tag_12\n      jump\t// in\n    tag_346:\n      tag_24\n      jump\t// in\n    tag_345:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1618:1806  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1219:1379  function safeTransfer(IERC20 token, address to, uint256 value) internal {... */\n    tag_21:\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      mload(0x40)\n      shl(0xe0, 0xa9059cbb)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1328:1371  abi.encodeCall(token.transfer, (to, value)) */\n      0x20\n      dup3\n      add\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      swap1\n      swap3\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1328:1371  abi.encodeCall(token.transfer, (to, value)) */\n      0x24\n      dup4\n      add\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      mstore\n      0x44\n      dup1\n      dup4\n      add\n      swap4\n      swap1\n      swap4\n      mstore\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1328:1371  abi.encodeCall(token.transfer, (to, value)) */\n      swap2\n      dup2\n      mstore\n      tag_345\n      swap2\n      tag_346\n      0x64\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      dup4\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":1328:1371  abi.encodeCall(token.transfer, (to, value)) */\n      tag_12\n      jump\t// in\n        /* \"contracts/SimpleSwap.sol\":15762:15979  function _updateReserves(... */\n    tag_22:\n      swap1\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      0x01\n        /* \"contracts/SimpleSwap.sol\":15762:15979  function _updateReserves(... */\n      swap3\n      swap4\n      swap2\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      mload(0x40)\n      swap5\n      tag_349\n      dup7\n      tag_11\n      jump\t// in\n    tag_349:\n      dup6\n      mstore\n        /* \"contracts/SimpleSwap.sol\":15942:15972  Pool(newReserveA, newReserveB) */\n      0x20\n      dup6\n      add\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      swap3\n      dup4\n      mstore\n      dup4\n      dup1\n      0xa0\n      shl\n      sub\n      and\n      0x00\n      mstore\n        /* \"contracts/SimpleSwap.sol\":15918:15923  pools */\n      0x05\n        /* \"contracts/SimpleSwap.sol\":15942:15972  Pool(newReserveA, newReserveB) */\n      0x20\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      mstore\n      keccak256(0x00, 0x40)\n        /* \"contracts/SimpleSwap.sol\":15918:15939  pools[tokenA][tokenB] */\n      swap1\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      dup4\n      dup1\n      0xa0\n      shl\n      sub\n      and\n      0x00\n      mstore\n      0x20\n      mstore\n      keccak256(0x00, 0x40)\n      swap3\n      mload\n      dup4\n      sstore\n      mload\n      swap2\n      add\n      sstore\n        /* \"contracts/SimpleSwap.sol\":15762:15979  function _updateReserves(... */\n      jump\t// out\n        /* \"contracts/SimpleSwap.sol\":12781:13006  function _sortTokens(address tokenA, address tokenB)... */\n    tag_23:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      dup3\n      dup2\n      and\n      swap1\n      dup3\n      and\n        /* \"contracts/SimpleSwap.sol\":12946:12961  tokenA < tokenB */\n      lt\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      iszero\n      tag_350\n      jumpi\n        /* \"contracts/SimpleSwap.sol\":12781:13006  function _sortTokens(address tokenA, address tokenB)... */\n      swap2\n      jump\t// out\n        /* \"contracts/SimpleSwap.sol\":12946:12999  tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA) */\n    tag_350:\n        /* \"contracts/SimpleSwap.sol\":12927:12999  (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA) */\n      swap1\n        /* \"contracts/SimpleSwap.sol\":12781:13006  function _sortTokens(address tokenA, address tokenB)... */\n      swap2\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8370:9090  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n    tag_24:\n      swap1\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8507:8928  assembly (\"memory-safe\") {... */\n      0x20\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8370:9090  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n      swap2\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8507:8928  assembly (\"memory-safe\") {... */\n      dup3\n      dup2\n      mload\n      swap2\n      add\n      dup3\n      dup6\n      gas\n      call\n      iszero\n      tag_353\n      jumpi\n      mload(0x00)\n      returndatasize\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8942:8957  returnSize == 0 */\n      tag_355\n      jumpi\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      dup2\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8960:8986  address(token).code.length */\n      extcodesize\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8960:8991  address(token).code.length == 0 */\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8942:9010  returnSize == 0 ? address(token).code.length == 0 : returnValue != 1 */\n    tag_357:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8938:9084  if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {... */\n      tag_358\n      jumpi\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8370:9090  function _callOptionalReturn(IERC20 token, bytes memory data) private {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8938:9084  if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {... */\n    tag_358:\n      shl(0xe0, 0x5274afe7)\n      0x00\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":9033:9073  SafeERC20FailedOperation(address(token)) */\n      swap1\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      swap2\n      swap1\n      swap2\n      and\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":9033:9073  SafeERC20FailedOperation(address(token)) */\n      0x04\n        /* \"contracts/SimpleSwap.sol\":459:17936  contract SimpleSwap is ERC20, ISimpleSwap {... */\n      mstore\n      0x24\n      swap1\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":9033:9073  SafeERC20FailedOperation(address(token)) */\n      revert\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8942:9010  returnSize == 0 ? address(token).code.length == 0 : returnValue != 1 */\n    tag_355:\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":9009:9010  1 */\n      0x01\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8994:9010  returnValue != 1 */\n      eq\n      iszero\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8942:9010  returnSize == 0 ? address(token).code.length == 0 : returnValue != 1 */\n      jump(tag_357)\n        /* \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":8507:8928  assembly (\"memory-safe\") {... */\n    tag_353:\n      mload(0x40)\n      returndatasize\n      0x00\n      dup3\n      returndatacopy\n      returndatasize\n      swap1\n      revert\n\n    auxdata: 0xa2646970667358221220299096ffe85eed1a0d6c75ee73ac09dd46a563f88bc9c1c05f0d2abb59b794e064736f6c634300081e0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH2 0x318 JUMPI PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR PUSH2 0x22B JUMPI PUSH1 0x40 SWAP1 DUP2 MSTORE PUSH1 0xD DUP3 MSTORE PUSH13 0x53696D706C6553776170204C5 PUSH1 0x9C SHL PUSH1 0x20 DUP4 ADD MSTORE DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP3 DUP3 LT OR PUSH2 0x22B JUMPI PUSH1 0x40 MSTORE PUSH1 0x5 DUP2 MSTORE PUSH5 0x53532D4C5 PUSH1 0xDC SHL PUSH1 0x20 DUP3 ADD MSTORE DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x22B JUMPI PUSH1 0x3 SLOAD PUSH1 0x1 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH2 0x30E JUMPI JUMPDEST PUSH1 0x20 DUP3 LT EQ PUSH2 0x20D JUMPI PUSH1 0x1F DUP2 GT PUSH2 0x2AB JUMPI JUMPDEST POP PUSH1 0x20 SWAP3 PUSH1 0x1F DUP3 GT PUSH1 0x1 EQ PUSH2 0x24A JUMPI SWAP3 DUP2 SWAP3 SWAP4 PUSH0 SWAP3 PUSH2 0x23F JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x3 SSTORE JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x22B JUMPI PUSH1 0x4 SLOAD PUSH1 0x1 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH2 0x221 JUMPI JUMPDEST PUSH1 0x20 DUP3 LT EQ PUSH2 0x20D JUMPI PUSH1 0x1F DUP2 GT PUSH2 0x1AA JUMPI JUMPDEST POP PUSH1 0x20 SWAP2 PUSH1 0x1F DUP3 GT PUSH1 0x1 EQ PUSH2 0x14A JUMPI SWAP2 DUP2 SWAP3 PUSH0 SWAP3 PUSH2 0x13F JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR PUSH1 0x4 SSTORE JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1337 SWAP1 DUP2 PUSH2 0x31D DUP3 CODECOPY RETURN JUMPDEST ADD MLOAD SWAP1 POP PUSH0 DUP1 PUSH2 0x11B JUMP JUMPDEST PUSH1 0x1F NOT DUP3 AND SWAP3 PUSH1 0x4 PUSH0 MSTORE DUP1 PUSH0 KECCAK256 SWAP2 PUSH0 JUMPDEST DUP6 DUP2 LT PUSH2 0x192 JUMPI POP DUP4 PUSH1 0x1 SWAP6 LT PUSH2 0x17A JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x4 SSTORE PUSH2 0x130 JUMP JUMPDEST ADD MLOAD PUSH0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE PUSH0 DUP1 DUP1 PUSH2 0x16C JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP7 DUP6 ADD MLOAD DUP2 SSTORE ADD SWAP5 ADD SWAP3 ADD PUSH2 0x15A JUMP JUMPDEST PUSH1 0x4 PUSH0 MSTORE PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 PUSH1 0x20 DUP5 LT PUSH2 0x203 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x1F8 JUMPI POP PUSH2 0x102 JUMP JUMPDEST PUSH0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x1EB JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x1E2 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH2 0xF0 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADD MLOAD SWAP1 POP PUSH0 DUP1 PUSH2 0xBA JUMP JUMPDEST PUSH1 0x1F NOT DUP3 AND SWAP4 PUSH1 0x3 PUSH0 MSTORE DUP1 PUSH0 KECCAK256 SWAP2 PUSH0 JUMPDEST DUP7 DUP2 LT PUSH2 0x293 JUMPI POP DUP4 PUSH1 0x1 SWAP6 SWAP7 LT PUSH2 0x27B JUMPI JUMPDEST POP POP POP DUP2 SHL ADD PUSH1 0x3 SSTORE PUSH2 0xCF JUMP JUMPDEST ADD MLOAD PUSH0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE PUSH0 DUP1 DUP1 PUSH2 0x26D JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP7 DUP6 ADD MLOAD DUP2 SSTORE ADD SWAP5 ADD SWAP3 ADD PUSH2 0x25A JUMP JUMPDEST PUSH1 0x3 PUSH0 MSTORE PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 PUSH1 0x20 DUP5 LT PUSH2 0x304 JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x2F9 JUMPI POP PUSH2 0xA0 JUMP JUMPDEST PUSH0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2EC JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x2E3 JUMP JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH2 0x8E JUMP JUMPDEST PUSH0 DUP1 REVERT INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x11 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x54D50D4 EQ PUSH2 0xE6D JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xDB2 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xD30 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xD13 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0xC34 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0xC19 JUMPI DUP1 PUSH4 0x38ED1739 EQ PUSH2 0x982 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x94B JUMPI DUP1 PUSH4 0x901754D7 EQ PUSH2 0x8F0 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x7F0 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x7BF JUMPI DUP1 PUSH4 0xAC41865A EQ PUSH2 0x6F2 JUMPI DUP1 PUSH4 0xBAA2ABDE EQ PUSH2 0x4B6 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x466 JUMPI PUSH4 0xE8E33700 EQ PUSH2 0xBE JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x462 JUMPI PUSH2 0x100 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x462 JUMPI PUSH2 0xD8 PUSH2 0xEBB JUMP JUMPDEST PUSH2 0xE0 PUSH2 0xED1 JUMP JUMPDEST PUSH1 0x64 CALLDATALOAD SWAP2 PUSH1 0x44 CALLDATALOAD SWAP2 PUSH1 0xA4 CALLDATALOAD SWAP2 PUSH1 0x84 CALLDATALOAD SWAP2 PUSH1 0xC4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x462 JUMPI PUSH2 0x113 TIMESTAMP PUSH1 0xE4 CALLDATALOAD LT ISZERO PUSH2 0x1035 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND SWAP4 SWAP1 DUP2 AND SWAP3 PUSH2 0x12F DUP5 DUP7 EQ ISZERO PUSH2 0x10A4 JUMP JUMPDEST DUP8 ISZERO ISZERO DUP1 PUSH2 0x459 JUMPI JUMPDEST ISZERO PUSH2 0x422 JUMPI PUSH2 0x159 SWAP2 DUP7 DUP10 LT ISZERO DUP1 PUSH2 0x418 JUMPI JUMPDEST PUSH2 0x154 SWAP1 PUSH2 0x10E3 JUMP JUMPDEST PUSH2 0x1283 JUMP JUMPDEST SWAP5 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP7 PUSH1 0x1 DUP9 SLOAD SWAP9 ADD SLOAD SWAP2 DUP9 ISZERO DUP1 PUSH2 0x410 JUMPI JUMPDEST ISZERO PUSH2 0x306 JUMPI POP POP PUSH2 0x1A2 DUP10 DUP10 PUSH2 0xF5F JUMP JUMPDEST PUSH0 PUSH1 0x3 DUP3 GT ISZERO PUSH2 0x2F8 JUMPI POP DUP1 DUP1 PUSH1 0x1 SHR PUSH1 0x1 DUP2 ADD DUP1 SWAP2 GT PUSH2 0x2E4 JUMPI SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x2C5 JUMPI POP POP JUMPDEST SWAP6 JUMPDEST PUSH2 0x1D7 DUP10 ADDRESS CALLER DUP9 PUSH2 0x11B4 JUMP JUMPDEST PUSH2 0x1E3 DUP11 ADDRESS CALLER DUP10 PUSH2 0x11B4 JUMP JUMPDEST DUP4 ISZERO PUSH2 0x2B2 JUMPI PUSH2 0x24F DUP11 PUSH2 0x249 DUP12 PUSH2 0x2AE SWAP12 PUSH2 0x255 SWAP9 PUSH0 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x20 DUP16 PUSH2 0x22A DUP2 PUSH1 0x2 SLOAD PUSH2 0xF72 JUMP JUMPDEST PUSH1 0x2 SSTORE DUP5 DUP5 MSTORE DUP4 DUP3 MSTORE PUSH1 0x40 DUP5 KECCAK256 DUP2 DUP2 SLOAD ADD SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 PUSH2 0xF72 JUMP JUMPDEST SWAP4 PUSH2 0xF72 JUMP JUMPDEST SWAP3 PUSH2 0x123A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE CALLER SWAP1 PUSH32 0x43C967B388D3A4CCAD3F7AB80167852E322E5A3FDE9893F530252281B2AE8B70 SWAP1 PUSH1 0x60 SWAP1 LOG4 PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP4 DUP5 PUSH1 0x40 SWAP2 SWAP5 SWAP4 SWAP3 PUSH1 0x60 DUP3 ADD SWAP6 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH4 0xEC442F05 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 SWAP2 POP PUSH2 0x2DB DUP3 PUSH2 0x2D6 DUP2 DUP5 PUSH2 0xF7F JUMP JUMPDEST PUSH2 0xF72 JUMP JUMPDEST PUSH1 0x1 SHR SWAP1 PUSH2 0x1BF JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 ISZERO PUSH2 0x1C9 JUMPI POP PUSH1 0x1 PUSH2 0x1C9 JUMP JUMPDEST SWAP2 SWAP10 SWAP2 PUSH2 0x31C DUP10 PUSH2 0x317 DUP14 DUP14 PUSH2 0xF5F JUMP JUMPDEST PUSH2 0xF7F JUMP JUMPDEST SWAP3 DUP1 DUP5 GT PUSH2 0x3BF JUMPI POP POP DUP2 LT PUSH2 0x389 JUMPI JUMPDEST SWAP8 PUSH2 0x33F DUP8 PUSH2 0x317 DUP11 PUSH1 0x2 SLOAD SWAP1 PUSH2 0xF5F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x34B JUMPI SWAP6 PUSH2 0x1CB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x496E73756666696369656E74206C6971756964697479 PUSH1 0x50 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x24B739BAB33334B1B4B2B73A1021 PUSH1 0x91 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP3 POP SWAP9 POP POP PUSH2 0x3D2 DUP10 PUSH2 0x317 DUP10 DUP5 PUSH2 0xF5F JUMP JUMPDEST SWAP8 DUP9 LT ISZERO PUSH2 0x32D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x496E73756666696369656E742041 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP DUP3 ISZERO PUSH2 0x191 JUMP JUMPDEST POP DUP8 DUP11 LT ISZERO PUSH2 0x14B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x496E76616C696420616D6F756E7473 PUSH1 0x88 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP DUP9 ISZERO ISZERO PUSH2 0x138 JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x462 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x462 JUMPI PUSH2 0x47F PUSH2 0xEBB JUMP JUMPDEST PUSH2 0x487 PUSH2 0xED1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP4 AND DUP3 MSTORE SWAP3 DUP4 MSTORE DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x462 JUMPI PUSH1 0xE0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x462 JUMPI PUSH2 0x4CF PUSH2 0xEBB JUMP JUMPDEST PUSH2 0x4D7 PUSH2 0xED1 JUMP JUMPDEST SWAP1 PUSH1 0xA4 CALLDATALOAD SWAP1 PUSH1 0x44 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP4 SUB PUSH2 0x462 JUMPI PUSH2 0x4FE TIMESTAMP PUSH1 0xC4 CALLDATALOAD LT ISZERO PUSH2 0x1035 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND SWAP5 SWAP1 DUP2 AND SWAP2 SWAP1 PUSH2 0x51B DUP7 DUP5 EQ ISZERO PUSH2 0x10A4 JUMP JUMPDEST DUP4 ISZERO PUSH2 0x6B9 JUMPI PUSH2 0x52A SWAP2 PUSH2 0x1283 JUMP JUMPDEST SWAP5 SWAP1 SWAP3 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP4 DUP5 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP7 PUSH1 0x1 DUP9 SLOAD SWAP9 ADD SLOAD SWAP8 PUSH1 0x2 SLOAD SWAP8 PUSH2 0x57E PUSH2 0x573 DUP11 PUSH2 0x317 DUP6 DUP10 PUSH2 0xF5F JUMP JUMPDEST SWAP10 PUSH2 0x317 DUP13 DUP9 PUSH2 0xF5F JUMP JUMPDEST SWAP8 PUSH1 0x64 CALLDATALOAD DUP11 LT ISZERO DUP1 PUSH2 0x6AD JUMPI JUMPDEST PUSH2 0x594 SWAP1 PUSH2 0x10E3 JUMP JUMPDEST CALLER ISZERO PUSH2 0x69A JUMPI CALLER PUSH0 MSTORE PUSH0 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD DUP7 DUP2 LT PUSH2 0x67F JUMPI PUSH2 0x628 DUP12 PUSH1 0x40 SWAP14 SWAP6 PUSH2 0x623 DUP14 DUP8 PUSH2 0x614 DUP6 PUSH2 0x62E SWAP14 SWAP13 SWAP11 DUP16 SWAP11 PUSH0 DUP13 PUSH2 0x24F SWAP14 DUP9 SWAP14 CALLER DUP5 MSTORE DUP4 PUSH1 0x20 MSTORE SUB PUSH1 0x40 DUP4 KECCAK256 SSTORE DUP1 PUSH1 0x2 SLOAD SUB PUSH1 0x2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x20 CALLER SWAP3 LOG3 PUSH2 0x11FF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH2 0x11FF JUMP JUMPDEST PUSH2 0x1097 JUMP JUMPDEST SWAP4 PUSH2 0x1097 JUMP JUMPDEST PUSH32 0xD765E08EEF31C0983ECCA03ECD166297AC485ECD5DD69E291C848F0A020333C1 DUP7 MLOAD DUP1 PUSH2 0x670 CALLER SWAP5 DUP9 DUP11 DUP5 PUSH1 0x40 SWAP2 SWAP5 SWAP4 SWAP3 PUSH1 0x60 DUP3 ADD SWAP6 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SUB SWAP1 LOG4 DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE RETURN JUMPDEST DUP7 SWAP1 PUSH4 0x391434E3 PUSH1 0xE2 SHL PUSH0 MSTORE CALLER PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 MSTORE PUSH1 0x64 PUSH0 REVERT JUMPDEST PUSH4 0x4B637E8F PUSH1 0xE1 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP PUSH1 0x84 CALLDATALOAD DUP10 LT ISZERO PUSH2 0x58B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x496E76616C6964206C6971756964697479 PUSH1 0x78 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x462 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x462 JUMPI PUSH2 0x70B PUSH2 0xEBB JUMP JUMPDEST PUSH2 0x713 PUSH2 0xED1 JUMP JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 PUSH2 0x72E SWAP1 DUP4 AND DUP3 EQ ISZERO PUSH2 0x10A4 JUMP JUMPDEST PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x40 MLOAD SWAP1 PUSH2 0x758 DUP3 PUSH2 0xFE3 JUMP JUMPDEST PUSH2 0x77C PUSH1 0x1 DUP3 SLOAD SWAP3 DUP4 DUP6 MSTORE ADD SLOAD PUSH1 0x20 DUP5 ADD SWAP3 DUP2 DUP5 MSTORE ISZERO ISZERO SWAP1 DUP2 PUSH2 0x7B5 JUMPI JUMPDEST POP PUSH2 0xF24 JUMP JUMPDEST MLOAD SWAP1 PUSH8 0xDE0B6B3A7640000 DUP3 MUL SWAP2 DUP1 DUP4 DIV PUSH8 0xDE0B6B3A7640000 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x2E4 JUMPI PUSH1 0x20 SWAP2 PUSH2 0x7AD SWAP2 MLOAD SWAP1 PUSH2 0xF7F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST SWAP1 POP ISZERO ISZERO DUP5 PUSH2 0x776 JUMP JUMPDEST CALLVALUE PUSH2 0x462 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x462 JUMPI PUSH2 0x7E5 PUSH2 0x7DB PUSH2 0xEBB JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x111D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x462 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x462 JUMPI PUSH1 0x40 MLOAD PUSH0 PUSH1 0x4 SLOAD DUP1 PUSH1 0x1 SHR SWAP1 PUSH1 0x1 DUP2 AND DUP1 ISZERO PUSH2 0x8E6 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT DUP2 EQ PUSH2 0x8D2 JUMPI DUP3 DUP6 MSTORE SWAP1 DUP2 ISZERO PUSH2 0x8AE JUMPI POP PUSH1 0x1 EQ PUSH2 0x850 JUMPI JUMPDEST PUSH2 0x2AE DUP4 PUSH2 0x844 DUP2 DUP6 SUB DUP3 PUSH2 0x1013 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xE91 JUMP JUMPDEST SWAP2 SWAP1 POP PUSH1 0x4 PUSH0 MSTORE PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B SWAP2 PUSH0 SWAP1 JUMPDEST DUP1 DUP3 LT PUSH2 0x894 JUMPI POP SWAP1 SWAP2 POP DUP2 ADD PUSH1 0x20 ADD PUSH2 0x844 PUSH2 0x834 JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x1 DUP2 PUSH1 0x20 SWAP3 SLOAD DUP4 DUP6 DUP9 ADD ADD MSTORE ADD SWAP2 ADD SWAP1 SWAP3 SWAP2 PUSH2 0x87C JUMP JUMPDEST PUSH1 0xFF NOT AND PUSH1 0x20 DUP1 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP2 ISZERO ISZERO PUSH1 0x5 SHL DUP5 ADD SWAP1 SWAP2 ADD SWAP2 POP PUSH2 0x844 SWAP1 POP PUSH2 0x834 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x817 JUMP JUMPDEST CALLVALUE PUSH2 0x462 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x462 JUMPI PUSH2 0x909 PUSH2 0xEBB JUMP JUMPDEST PUSH2 0x911 PUSH2 0xED1 JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 PUSH0 KECCAK256 PUSH1 0x1 DUP2 SLOAD SWAP2 ADD SLOAD DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x462 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x462 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x96C PUSH2 0xEBB JUMP JUMPDEST AND PUSH0 MSTORE PUSH0 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x462 JUMPI PUSH1 0xA0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x462 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x44 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x462 JUMPI CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x462 JUMPI DUP1 PUSH1 0x4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x462 JUMPI CALLDATASIZE PUSH1 0x24 DUP3 PUSH1 0x5 SHL DUP5 ADD ADD GT PUSH2 0x462 JUMPI PUSH1 0x64 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x462 JUMPI PUSH2 0x9F8 TIMESTAMP PUSH1 0x84 CALLDATALOAD LT ISZERO PUSH2 0x1035 JUMP JUMPDEST PUSH1 0x2 DUP2 SUB PUSH2 0xBE5 JUMPI PUSH1 0x40 MLOAD SWAP4 PUSH2 0xA0F PUSH1 0x60 DUP7 PUSH2 0x1013 JUMP JUMPDEST PUSH1 0x2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 PUSH1 0x40 CALLDATASIZE DUP7 CALLDATACOPY DUP6 MLOAD ISZERO PUSH2 0xBD1 JUMPI DUP2 DUP6 MSTORE DUP3 ISZERO PUSH2 0xBD1 JUMPI PUSH2 0xA39 PUSH1 0x24 DUP3 ADD PUSH2 0x1083 JUMP JUMPDEST SWAP3 PUSH1 0x1 LT ISZERO PUSH2 0xBD1 JUMPI PUSH1 0x44 PUSH2 0xA4E SWAP2 ADD PUSH2 0x1083 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP3 DUP4 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP2 PUSH1 0x1 DUP4 SLOAD SWAP4 ADD SLOAD SWAP1 PUSH2 0xA8A DUP6 ISZERO ISZERO PUSH2 0xEE7 JUMP JUMPDEST DUP4 ISZERO ISZERO DUP1 PUSH2 0xBC8 JUMPI JUMPDEST PUSH2 0xA9C SWAP1 PUSH2 0xF24 JUMP JUMPDEST PUSH2 0xAA7 DUP3 DUP6 DUP8 PUSH2 0xF9D JUMP JUMPDEST PUSH2 0xAB0 DUP11 PUSH2 0x1073 JUMP JUMPDEST MSTORE PUSH1 0x24 CALLDATALOAD PUSH2 0xABD DUP11 PUSH2 0x1073 JUMP JUMPDEST MLOAD LT PUSH2 0xB8D JUMPI PUSH2 0x24F PUSH2 0xAFF DUP7 PUSH2 0xB10 SWAP7 PUSH2 0x2D6 DUP14 SWAP13 SWAP14 SWAP12 PUSH2 0xAE3 DUP5 DUP14 ADDRESS SWAP1 CALLER SWAP1 PUSH2 0x11B4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP13 PUSH2 0xAF7 SWAP1 PUSH2 0x1073 JUMP JUMPDEST MLOAD SWAP1 DUP14 PUSH2 0x11FF JUMP JUMPDEST SWAP3 PUSH2 0xB09 DUP11 PUSH2 0x1073 JUMP JUMPDEST MLOAD SWAP1 PUSH2 0x1097 JUMP JUMPDEST PUSH2 0xB19 DUP5 PUSH2 0x1073 JUMP JUMPDEST MLOAD PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0xCD3829A3813DC3CDD188FD3D01DCF3268C16BE2FDD2DD21D0665418816E46062 PUSH1 0x40 CALLER SWAP3 LOG4 PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 ADD SWAP1 PUSH1 0x20 DUP5 MSTORE MLOAD DUP1 SWAP2 MSTORE PUSH1 0x40 DUP4 ADD SWAP2 SWAP1 PUSH0 JUMPDEST DUP2 DUP2 LT PUSH2 0xB74 JUMPI POP POP POP SUB SWAP1 RETURN JUMPDEST DUP3 MLOAD DUP5 MSTORE DUP6 SWAP5 POP PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xB66 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x125B9CDD59999A58DA595B9D081BDD5D1C1D5D PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP DUP2 ISZERO ISZERO PUSH2 0xA93 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x92DCECC2D8D2C840E0C2E8D PUSH1 0xA3 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x462 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x462 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x462 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x462 JUMPI PUSH2 0xC4D PUSH2 0xEBB JUMP JUMPDEST PUSH2 0xC55 PUSH2 0xED1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD SWAP1 SWAP3 PUSH1 0x44 CALLDATALOAD SWAP3 SWAP2 PUSH0 NOT DUP2 LT PUSH2 0xC93 JUMPI JUMPDEST POP PUSH2 0x7E5 SWAP4 POP PUSH2 0x111D JUMP JUMPDEST DUP4 DUP2 LT PUSH2 0xCF8 JUMPI DUP5 ISZERO PUSH2 0xCE5 JUMPI CALLER ISZERO PUSH2 0xCD2 JUMPI PUSH2 0x7E5 SWAP5 PUSH0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB CALLER AND PUSH0 MSTORE PUSH1 0x20 MSTORE DUP4 PUSH1 0x40 PUSH0 KECCAK256 SWAP2 SUB SWAP1 SSTORE DUP5 PUSH2 0xC88 JUMP JUMPDEST PUSH4 0x4A1406B1 PUSH1 0xE1 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH4 0xE602DF05 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP4 SWAP1 PUSH4 0x7DC7A0D9 PUSH1 0xE1 SHL PUSH0 MSTORE CALLER PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 MSTORE PUSH1 0x64 PUSH0 REVERT JUMPDEST CALLVALUE PUSH2 0x462 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x462 JUMPI PUSH1 0x20 PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x462 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x462 JUMPI PUSH2 0xD49 PUSH2 0xEBB JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER ISZERO PUSH2 0xCE5 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 ISZERO PUSH2 0xCD2 JUMPI CALLER PUSH0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP3 PUSH0 MSTORE PUSH1 0x20 MSTORE DUP1 PUSH1 0x40 PUSH0 KECCAK256 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x20 CALLER SWAP3 LOG3 PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x462 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x462 JUMPI PUSH1 0x40 MLOAD PUSH0 PUSH1 0x3 SLOAD DUP1 PUSH1 0x1 SHR SWAP1 PUSH1 0x1 DUP2 AND DUP1 ISZERO PUSH2 0xE63 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT DUP2 EQ PUSH2 0x8D2 JUMPI DUP3 DUP6 MSTORE SWAP1 DUP2 ISZERO PUSH2 0x8AE JUMPI POP PUSH1 0x1 EQ PUSH2 0xE05 JUMPI PUSH2 0x2AE DUP4 PUSH2 0x844 DUP2 DUP6 SUB DUP3 PUSH2 0x1013 JUMP JUMPDEST SWAP2 SWAP1 POP PUSH1 0x3 PUSH0 MSTORE PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B SWAP2 PUSH0 SWAP1 JUMPDEST DUP1 DUP3 LT PUSH2 0xE49 JUMPI POP SWAP1 SWAP2 POP DUP2 ADD PUSH1 0x20 ADD PUSH2 0x844 PUSH2 0x834 JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x1 DUP2 PUSH1 0x20 SWAP3 SLOAD DUP4 DUP6 DUP9 ADD ADD MSTORE ADD SWAP2 ADD SWAP1 SWAP3 SWAP2 PUSH2 0xE31 JUMP JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0xDD9 JUMP JUMPDEST CALLVALUE PUSH2 0x462 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x462 JUMPI PUSH1 0x20 PUSH2 0x7AD PUSH1 0x44 CALLDATALOAD PUSH1 0x24 CALLDATALOAD PUSH1 0x4 CALLDATALOAD PUSH2 0xF9D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 SWAP3 DUP2 DUP4 MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP2 DUP3 DUP3 DUP7 ADD MSTORE ADD DUP5 DUP5 ADD MCOPY PUSH0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x462 JUMPI JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x462 JUMPI JUMP JUMPDEST ISZERO PUSH2 0xEEE JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x125B9D985B1A5908185B5BDD5B9D PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0xF2B JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x4E6F206C6971756964697479 PUSH1 0xA0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0x2E4 JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x2E4 JUMPI JUMP JUMPDEST DUP2 ISZERO PUSH2 0xF89 JUMPI DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH2 0xFD1 SWAP1 PUSH2 0xFCB PUSH2 0xFD7 SWAP5 PUSH2 0xFB3 DUP4 ISZERO ISZERO PUSH2 0xEE7 JUMP JUMPDEST DUP5 ISZERO ISZERO DUP1 PUSH2 0xFDA JUMPI JUMPDEST PUSH2 0xFC5 SWAP1 PUSH2 0xF24 JUMP JUMPDEST DUP3 PUSH2 0xF5F JUMP JUMPDEST SWAP3 PUSH2 0xF72 JUMP JUMPDEST SWAP1 PUSH2 0xF7F JUMP JUMPDEST SWAP1 JUMP JUMPDEST POP DUP1 ISZERO ISZERO PUSH2 0xFBC JUMP JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xFFF JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xFFF JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST ISZERO PUSH2 0x103C JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x111958591B1A5B99481C185CDCD959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP1 MLOAD PUSH1 0x1 LT ISZERO PUSH2 0xBD1 JUMPI PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x462 JUMPI SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x2E4 JUMPI JUMP JUMPDEST ISZERO PUSH2 0x10AB JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x4964656E746963616C20746F6B656E73 PUSH1 0x80 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x10EA JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x135A5B881B9BDD081B595D PUSH1 0xAA SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 ISZERO PUSH2 0x69A JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 DUP3 ISZERO PUSH2 0x2B2 JUMPI DUP2 PUSH0 MSTORE PUSH0 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD DUP2 DUP2 LT PUSH2 0x119B JUMPI DUP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 PUSH1 0x20 SWAP3 DUP6 PUSH0 MSTORE PUSH0 DUP5 MSTORE SUB PUSH1 0x40 PUSH0 KECCAK256 SSTORE DUP5 PUSH0 MSTORE PUSH0 DUP3 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP2 DUP2 SLOAD ADD SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST DUP3 PUSH4 0x391434E3 PUSH1 0xE2 SHL PUSH0 MSTORE PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 MSTORE PUSH1 0x64 PUSH0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP2 MSTORE PUSH2 0x11FD SWAP2 PUSH2 0x11F8 PUSH1 0x84 DUP4 PUSH2 0x1013 JUMP JUMPDEST PUSH2 0x129E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP2 MSTORE PUSH2 0x11FD SWAP2 PUSH2 0x11F8 PUSH1 0x64 DUP4 PUSH2 0x1013 JUMP JUMPDEST SWAP1 PUSH1 0x1 SWAP3 SWAP4 SWAP2 PUSH1 0x40 MLOAD SWAP5 PUSH2 0x124D DUP7 PUSH2 0xFE3 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP3 DUP4 MSTORE DUP4 DUP1 PUSH1 0xA0 SHL SUB AND PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP1 DUP4 DUP1 PUSH1 0xA0 SHL SUB AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP3 MLOAD DUP4 SSTORE MLOAD SWAP2 ADD SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND SWAP1 DUP3 AND LT ISZERO PUSH2 0x129A JUMPI SWAP2 JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST SWAP1 PUSH0 PUSH1 0x20 SWAP2 DUP3 DUP2 MLOAD SWAP2 ADD DUP3 DUP6 GAS CALL ISZERO PUSH2 0x12F6 JUMPI PUSH0 MLOAD RETURNDATASIZE PUSH2 0x12ED JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND EXTCODESIZE ISZERO JUMPDEST PUSH2 0x12CD JUMPI POP JUMP JUMPDEST PUSH4 0x5274AFE7 PUSH1 0xE0 SHL PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST PUSH1 0x1 EQ ISZERO PUSH2 0x12C6 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x29 SWAP1 SWAP7 SELFDESTRUCT 0xE8 MCOPY 0xED BYTE 0xD PUSH13 0x75EE73AC09DD46A563F88BC9C1 0xC0 PUSH0 0xD 0x2A 0xBB MSIZE 0xB7 SWAP5 RJUMP 0x6473 PUSH16 0x6C634300081E00330000000000000000 ",
							"sourceMap": "459:17477:10:-:0;;;;;;;;;;;;-1:-1:-1;;;;;459:17477:10;;;;;;;;;;;;;;;-1:-1:-1;;;459:17477:10;;;;;;;;;-1:-1:-1;;;;;459:17477:10;;;;;;;;;;;;;-1:-1:-1;;;459:17477:10;;;;;;-1:-1:-1;;;;;459:17477:10;;;;1648:13:4;459:17477:10;;;;;;;;;;;-1:-1:-1;459:17477:10;;;;;;;;;;;-1:-1:-1;459:17477:10;;;;;;;;;;;;;;-1:-1:-1;459:17477:10;;;;;;;;;;;;;1648:13:4;459:17477:10;;;;;1648:13:4;459:17477:10;;;;-1:-1:-1;;;;;459:17477:10;;;;1671:17:4;459:17477:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;459:17477:10;;;;;;;;;;;;;1648:13:4;459:17477:10;;;;;1671:17:4;459:17477:10;;;;;;;;;;;;;;;-1:-1:-1;459:17477:10;;;;;;;;;;1671:17:4;-1:-1:-1;459:17477:10;;-1:-1:-1;459:17477:10;;-1:-1:-1;459:17477:10;;;;;;;;;;;;;;;;;;;;1671:17:4;459:17477:10;;;;;;;;;;1648:13:4;459:17477:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1671:17:4;-1:-1:-1;459:17477:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;459:17477:10;;;;;;;;;-1:-1:-1;459:17477:10;;;;;;;;-1:-1:-1;459:17477:10;;1671:17:4;459:17477:10;;-1:-1:-1;459:17477:10;;;;;;;;;;;;-1:-1:-1;459:17477:10;;1671:17:4;459:17477:10;;-1:-1:-1;459:17477:10;;;;;-1:-1:-1;459:17477:10;;;;;;;;;;1648:13:4;-1:-1:-1;459:17477:10;;-1:-1:-1;459:17477:10;;-1:-1:-1;459:17477:10;;;;;;;;;;;;;;;;;;;;;1648:13:4;459:17477:10;;;;;;;;;;1648:13:4;459:17477:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1648:13:4;-1:-1:-1;459:17477:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;459:17477:10;;;;;;;;;-1:-1:-1;459:17477:10;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"abi_decode_address": {
									"entryPoint": 3771,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_decode_t_address": {
									"entryPoint": 3793,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_encode_string": {
									"entryPoint": 3729,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_uint256_uint256_uint256": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"checked_add_uint256": {
									"entryPoint": 3954,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_div_uint256": {
									"entryPoint": 3967,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_uint256": {
									"entryPoint": 3935,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_sub_uint256": {
									"entryPoint": 4247,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"finalize_allocation": {
									"entryPoint": 4115,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"finalize_allocation_14333": {
									"entryPoint": 4067,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"fun_callOptionalReturn": {
									"entryPoint": 4766,
									"id": 1267,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"fun_getAmountOut": {
									"entryPoint": 3997,
									"id": 2010,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"fun_safeTransfer": {
									"entryPoint": 4607,
									"id": 890,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"fun_safeTransferFrom": {
									"entryPoint": 4532,
									"id": 917,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"fun_sortTokens": {
									"entryPoint": 4739,
									"id": 2038,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"fun_transfer": {
									"entryPoint": 4381,
									"id": 471,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"fun_updateReserves": {
									"entryPoint": 4666,
									"id": 2202,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"memory_array_index_access_uint256_dyn": {
									"entryPoint": 4211,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"read_from_calldatat_address": {
									"entryPoint": 4227,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"require_helper_stringliteral_2fd1": {
									"entryPoint": 3815,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"require_helper_stringliteral_379a": {
									"entryPoint": 3876,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"require_helper_stringliteral_564d": {
									"entryPoint": 4260,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"require_helper_stringliteral_c195": {
									"entryPoint": 4149,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"require_helper_stringliteral_e5fd": {
									"entryPoint": 4323,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "60806040526004361015610011575f80fd5b5f3560e01c8063054d50d414610e6d57806306fdde0314610db2578063095ea7b314610d3057806318160ddd14610d1357806323b872dd14610c34578063313ce56714610c1957806338ed17391461098257806370a082311461094b578063901754d7146108f057806395d89b41146107f0578063a9059cbb146107bf578063ac41865a146106f2578063baa2abde146104b6578063dd62ed3e146104665763e8e33700146100be575f80fd5b3461046257610100366003190112610462576100d8610ebb565b6100e0610ed1565b606435916044359160a435916084359160c4356001600160a01b03811690819003610462576101134260e4351015611035565b6001600160a01b03828116939081169261012f848614156110a4565b87151580610459575b1561042257610159918689101580610418575b610154906110e3565b611283565b9460018060a01b0382165f52600560205260405f2060018060a01b0387165f5260205260405f20966001885498015491881580610410575b156103065750506101a28989610f5f565b5f60038211156102f85750808060011c600181018091116102e457905b8282106102c55750505b955b6101d7893033886111b4565b6101e38a3033896111b4565b83156102b25761024f8a6102498b6102ae9b610255985f7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60208f61022a81600254610f72565b60025584845283825260408420818154019055604051908152a3610f72565b93610f72565b9261123a565b604080518681526020810188905290810184905233907f43c967b388d3a4ccad3f7ab80167852e322e5a3fde9893f530252281b2ae8b7090606090a4604051938493846040919493926060820195825260208201520152565b0390f35b63ec442f0560e01b5f525f60045260245ffd5b9091506102db826102d68184610f7f565b610f72565b60011c906101bf565b634e487b7160e01b5f52601160045260245ffd5b90156101c9575060016101c9565b91999161031c896103178d8d610f5f565b610f7f565b928084116103bf5750508110610389575b9761033f876103178a60025490610f5f565b801561034b57956101cb565b60405162461bcd60e51b8152602060048201526016602482015275496e73756666696369656e74206c697175696469747960501b6044820152606490fd5b60405162461bcd60e51b815260206004820152600e60248201526d24b739bab33334b1b4b2b73a102160911b6044820152606490fd5b92509850506103d2896103178984610f5f565b9788101561032d5760405162461bcd60e51b815260206004820152600e60248201526d496e73756666696369656e74204160901b6044820152606490fd5b508215610191565b50878a101561014b565b60405162461bcd60e51b815260206004820152600f60248201526e496e76616c696420616d6f756e747360881b6044820152606490fd5b50881515610138565b5f80fd5b346104625760403660031901126104625761047f610ebb565b610487610ed1565b6001600160a01b039182165f908152600160209081526040808320949093168252928352819020549051908152f35b346104625760e0366003190112610462576104cf610ebb565b6104d7610ed1565b9060a43590604435906001600160a01b0383168303610462576104fe4260c4351015611035565b6001600160a01b0381811694908116919061051b868414156110a4565b83156106b95761052a91611283565b94909260018060a01b03841693845f52600560205260405f2060018060a01b0388165f5260205260405f209660018854980154976002549761057e6105738a6103178589610f5f565b996103178c88610f5f565b976064358a1015806106ad575b610594906110e3565b331561069a57335f525f60205260405f205486811061067f576106288b60409d956106238d876106148561062e9d9c9a8f9a5f8c61024f9d889d3384528360205203604083205580600254036002556040519081527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203392a36111ff565b6001600160a01b0389166111ff565b611097565b93611097565b7fd765e08eef31c0983ecca03ecd166297ac485ecd5dd69e291c848f0a020333c18651806106703394888a846040919493926060820195825260208201520152565b0390a482519182526020820152f35b869063391434e360e21b5f523360045260245260445260645ffd5b634b637e8f60e11b5f525f60045260245ffd5b5060843589101561058b565b60405162461bcd60e51b8152602060048201526011602482015270496e76616c6964206c697175696469747960781b6044820152606490fd5b346104625760403660031901126104625761070b610ebb565b610713610ed1565b906001600160a01b039081169061072e9083168214156110a4565b5f52600560205260405f209060018060a01b03165f5260205260405f206040519061075882610fe3565b61077c600182549283855201546020840192818452151590816107b5575b50610f24565b5190670de0b6b3a7640000820291808304670de0b6b3a764000014901517156102e4576020916107ad915190610f7f565b604051908152f35b9050151584610776565b34610462576040366003190112610462576107e56107db610ebb565b602435903361111d565b602060405160018152f35b34610462575f366003190112610462576040515f6004548060011c906001811680156108e6575b6020831081146108d2578285529081156108ae5750600114610850575b6102ae8361084481850382611013565b60405191829182610e91565b91905060045f527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b915f905b80821061089457509091508101602001610844610834565b91926001816020925483858801015201910190929161087c565b60ff191660208086019190915291151560051b840190910191506108449050610834565b634e487b7160e01b5f52602260045260245ffd5b91607f1691610817565b3461046257604036600319011261046257610909610ebb565b610911610ed1565b9060018060a01b03165f52600560205260405f209060018060a01b03165f526020526040805f206001815491015482519182526020820152f35b34610462576020366003190112610462576001600160a01b0361096c610ebb565b165f525f602052602060405f2054604051908152f35b346104625760a03660031901126104625760043560443567ffffffffffffffff8111610462573660238201121561046257806004013567ffffffffffffffff8111610462573660248260051b8401011161046257606435906001600160a01b0382168203610462576109f8426084351015611035565b60028103610be55760405193610a0f606086611013565b6002855260208501936040368637855115610bd1578185528215610bd157610a3960248201611083565b9260011015610bd1576044610a4e9101611083565b60018060a01b03831692835f52600560205260405f2060018060a01b0383165f5260205260405f20916001835493015490610a8a851515610ee7565b83151580610bc8575b610a9c90610f24565b610aa7828587610f9d565b610ab08a611073565b52602435610abd8a611073565b5110610b8d5761024f610aff86610b10966102d68d9c9d9b610ae3848d309033906111b4565b6001600160a01b0387169c610af790611073565b51908d6111ff565b92610b098a611073565b5190611097565b610b1984611073565b5160405191825260208201527fcd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e4606260403392a4604051918291602083019060208452518091526040830191905f5b818110610b74575050500390f35b8251845285945060209384019390920191600101610b66565b60405162461bcd60e51b8152602060048201526013602482015272125b9cdd59999a58da595b9d081bdd5d1c1d5d606a1b6044820152606490fd5b50811515610a93565b634e487b7160e01b5f52603260045260245ffd5b60405162461bcd60e51b815260206004820152600c60248201526b092dcecc2d8d2c840e0c2e8d60a31b6044820152606490fd5b34610462575f36600319011261046257602060405160128152f35b3461046257606036600319011261046257610c4d610ebb565b610c55610ed1565b6001600160a01b0382165f818152600160209081526040808320338452909152902054909260443592915f198110610c93575b506107e5935061111d565b838110610cf8578415610ce5573315610cd2576107e5945f52600160205260405f2060018060a01b0333165f526020528360405f209103905584610c88565b634a1406b160e11b5f525f60045260245ffd5b63e602df0560e01b5f525f60045260245ffd5b8390637dc7a0d960e11b5f523360045260245260445260645ffd5b34610462575f366003190112610462576020600254604051908152f35b3461046257604036600319011261046257610d49610ebb565b602435903315610ce5576001600160a01b0316908115610cd257335f52600160205260405f20825f526020528060405f20556040519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560203392a3602060405160018152f35b34610462575f366003190112610462576040515f6003548060011c90600181168015610e63575b6020831081146108d2578285529081156108ae5750600114610e05576102ae8361084481850382611013565b91905060035f527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b915f905b808210610e4957509091508101602001610844610834565b919260018160209254838588010152019101909291610e31565b91607f1691610dd9565b346104625760603660031901126104625760206107ad604435602435600435610f9d565b602060409281835280519182918282860152018484015e5f828201840152601f01601f1916010190565b600435906001600160a01b038216820361046257565b602435906001600160a01b038216820361046257565b15610eee57565b60405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a5908185b5bdd5b9d60921b6044820152606490fd5b15610f2b57565b60405162461bcd60e51b815260206004820152600c60248201526b4e6f206c697175696469747960a01b6044820152606490fd5b818102929181159184041417156102e457565b919082018092116102e457565b8115610f89570490565b634e487b7160e01b5f52601260045260245ffd5b610fd190610fcb610fd794610fb3831515610ee7565b84151580610fda575b610fc590610f24565b82610f5f565b92610f72565b90610f7f565b90565b50801515610fbc565b6040810190811067ffffffffffffffff821117610fff57604052565b634e487b7160e01b5f52604160045260245ffd5b90601f8019910116810190811067ffffffffffffffff821117610fff57604052565b1561103c57565b60405162461bcd60e51b815260206004820152600f60248201526e111958591b1a5b99481c185cdcd959608a1b6044820152606490fd5b805160011015610bd15760400190565b356001600160a01b03811681036104625790565b919082039182116102e457565b156110ab57565b60405162461bcd60e51b815260206004820152601060248201526f4964656e746963616c20746f6b656e7360801b6044820152606490fd5b156110ea57565b60405162461bcd60e51b815260206004820152600b60248201526a135a5b881b9bdd081b595d60aa1b6044820152606490fd5b6001600160a01b031690811561069a576001600160a01b03169182156102b257815f525f60205260405f205481811061119b57817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92602092855f525f84520360405f2055845f525f825260405f20818154019055604051908152a3565b8263391434e360e21b5f5260045260245260445260645ffd5b6040516323b872dd60e01b60208201526001600160a01b0392831660248201529290911660448301526064808301939093529181526111fd916111f8608483611013565b61129e565b565b60405163a9059cbb60e01b60208201526001600160a01b0390921660248301526044808301939093529181526111fd916111f8606483611013565b9060019293916040519461124d86610fe3565b855260208501928352838060a01b03165f52600560205260405f2090838060a01b03165f5260205260405f209251835551910155565b6001600160a01b03828116908216101561129a5791565b9091565b905f602091828151910182855af1156112f6575f513d6112ed57506001600160a01b0381163b155b6112cd5750565b635274afe760e01b5f9081526001600160a01b0391909116600452602490fd5b600114156112c6565b6040513d5f823e3d90fdfea2646970667358221220299096ffe85eed1a0d6c75ee73ac09dd46a563f88bc9c1c05f0d2abb59b794e064736f6c634300081e0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x11 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x54D50D4 EQ PUSH2 0xE6D JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xDB2 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xD30 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xD13 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0xC34 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0xC19 JUMPI DUP1 PUSH4 0x38ED1739 EQ PUSH2 0x982 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x94B JUMPI DUP1 PUSH4 0x901754D7 EQ PUSH2 0x8F0 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x7F0 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x7BF JUMPI DUP1 PUSH4 0xAC41865A EQ PUSH2 0x6F2 JUMPI DUP1 PUSH4 0xBAA2ABDE EQ PUSH2 0x4B6 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x466 JUMPI PUSH4 0xE8E33700 EQ PUSH2 0xBE JUMPI PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x462 JUMPI PUSH2 0x100 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x462 JUMPI PUSH2 0xD8 PUSH2 0xEBB JUMP JUMPDEST PUSH2 0xE0 PUSH2 0xED1 JUMP JUMPDEST PUSH1 0x64 CALLDATALOAD SWAP2 PUSH1 0x44 CALLDATALOAD SWAP2 PUSH1 0xA4 CALLDATALOAD SWAP2 PUSH1 0x84 CALLDATALOAD SWAP2 PUSH1 0xC4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x462 JUMPI PUSH2 0x113 TIMESTAMP PUSH1 0xE4 CALLDATALOAD LT ISZERO PUSH2 0x1035 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND SWAP4 SWAP1 DUP2 AND SWAP3 PUSH2 0x12F DUP5 DUP7 EQ ISZERO PUSH2 0x10A4 JUMP JUMPDEST DUP8 ISZERO ISZERO DUP1 PUSH2 0x459 JUMPI JUMPDEST ISZERO PUSH2 0x422 JUMPI PUSH2 0x159 SWAP2 DUP7 DUP10 LT ISZERO DUP1 PUSH2 0x418 JUMPI JUMPDEST PUSH2 0x154 SWAP1 PUSH2 0x10E3 JUMP JUMPDEST PUSH2 0x1283 JUMP JUMPDEST SWAP5 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP7 PUSH1 0x1 DUP9 SLOAD SWAP9 ADD SLOAD SWAP2 DUP9 ISZERO DUP1 PUSH2 0x410 JUMPI JUMPDEST ISZERO PUSH2 0x306 JUMPI POP POP PUSH2 0x1A2 DUP10 DUP10 PUSH2 0xF5F JUMP JUMPDEST PUSH0 PUSH1 0x3 DUP3 GT ISZERO PUSH2 0x2F8 JUMPI POP DUP1 DUP1 PUSH1 0x1 SHR PUSH1 0x1 DUP2 ADD DUP1 SWAP2 GT PUSH2 0x2E4 JUMPI SWAP1 JUMPDEST DUP3 DUP3 LT PUSH2 0x2C5 JUMPI POP POP JUMPDEST SWAP6 JUMPDEST PUSH2 0x1D7 DUP10 ADDRESS CALLER DUP9 PUSH2 0x11B4 JUMP JUMPDEST PUSH2 0x1E3 DUP11 ADDRESS CALLER DUP10 PUSH2 0x11B4 JUMP JUMPDEST DUP4 ISZERO PUSH2 0x2B2 JUMPI PUSH2 0x24F DUP11 PUSH2 0x249 DUP12 PUSH2 0x2AE SWAP12 PUSH2 0x255 SWAP9 PUSH0 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x20 DUP16 PUSH2 0x22A DUP2 PUSH1 0x2 SLOAD PUSH2 0xF72 JUMP JUMPDEST PUSH1 0x2 SSTORE DUP5 DUP5 MSTORE DUP4 DUP3 MSTORE PUSH1 0x40 DUP5 KECCAK256 DUP2 DUP2 SLOAD ADD SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 PUSH2 0xF72 JUMP JUMPDEST SWAP4 PUSH2 0xF72 JUMP JUMPDEST SWAP3 PUSH2 0x123A JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP9 SWAP1 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE CALLER SWAP1 PUSH32 0x43C967B388D3A4CCAD3F7AB80167852E322E5A3FDE9893F530252281B2AE8B70 SWAP1 PUSH1 0x60 SWAP1 LOG4 PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP4 DUP5 PUSH1 0x40 SWAP2 SWAP5 SWAP4 SWAP3 PUSH1 0x60 DUP3 ADD SWAP6 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH4 0xEC442F05 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 SWAP2 POP PUSH2 0x2DB DUP3 PUSH2 0x2D6 DUP2 DUP5 PUSH2 0xF7F JUMP JUMPDEST PUSH2 0xF72 JUMP JUMPDEST PUSH1 0x1 SHR SWAP1 PUSH2 0x1BF JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 ISZERO PUSH2 0x1C9 JUMPI POP PUSH1 0x1 PUSH2 0x1C9 JUMP JUMPDEST SWAP2 SWAP10 SWAP2 PUSH2 0x31C DUP10 PUSH2 0x317 DUP14 DUP14 PUSH2 0xF5F JUMP JUMPDEST PUSH2 0xF7F JUMP JUMPDEST SWAP3 DUP1 DUP5 GT PUSH2 0x3BF JUMPI POP POP DUP2 LT PUSH2 0x389 JUMPI JUMPDEST SWAP8 PUSH2 0x33F DUP8 PUSH2 0x317 DUP11 PUSH1 0x2 SLOAD SWAP1 PUSH2 0xF5F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x34B JUMPI SWAP6 PUSH2 0x1CB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH22 0x496E73756666696369656E74206C6971756964697479 PUSH1 0x50 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x24B739BAB33334B1B4B2B73A1021 PUSH1 0x91 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST SWAP3 POP SWAP9 POP POP PUSH2 0x3D2 DUP10 PUSH2 0x317 DUP10 DUP5 PUSH2 0xF5F JUMP JUMPDEST SWAP8 DUP9 LT ISZERO PUSH2 0x32D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x496E73756666696369656E742041 PUSH1 0x90 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP DUP3 ISZERO PUSH2 0x191 JUMP JUMPDEST POP DUP8 DUP11 LT ISZERO PUSH2 0x14B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x496E76616C696420616D6F756E7473 PUSH1 0x88 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP DUP9 ISZERO ISZERO PUSH2 0x138 JUMP JUMPDEST PUSH0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x462 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x462 JUMPI PUSH2 0x47F PUSH2 0xEBB JUMP JUMPDEST PUSH2 0x487 PUSH2 0xED1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP4 AND DUP3 MSTORE SWAP3 DUP4 MSTORE DUP2 SWAP1 KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x462 JUMPI PUSH1 0xE0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x462 JUMPI PUSH2 0x4CF PUSH2 0xEBB JUMP JUMPDEST PUSH2 0x4D7 PUSH2 0xED1 JUMP JUMPDEST SWAP1 PUSH1 0xA4 CALLDATALOAD SWAP1 PUSH1 0x44 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP4 SUB PUSH2 0x462 JUMPI PUSH2 0x4FE TIMESTAMP PUSH1 0xC4 CALLDATALOAD LT ISZERO PUSH2 0x1035 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND SWAP5 SWAP1 DUP2 AND SWAP2 SWAP1 PUSH2 0x51B DUP7 DUP5 EQ ISZERO PUSH2 0x10A4 JUMP JUMPDEST DUP4 ISZERO PUSH2 0x6B9 JUMPI PUSH2 0x52A SWAP2 PUSH2 0x1283 JUMP JUMPDEST SWAP5 SWAP1 SWAP3 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP4 DUP5 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP7 PUSH1 0x1 DUP9 SLOAD SWAP9 ADD SLOAD SWAP8 PUSH1 0x2 SLOAD SWAP8 PUSH2 0x57E PUSH2 0x573 DUP11 PUSH2 0x317 DUP6 DUP10 PUSH2 0xF5F JUMP JUMPDEST SWAP10 PUSH2 0x317 DUP13 DUP9 PUSH2 0xF5F JUMP JUMPDEST SWAP8 PUSH1 0x64 CALLDATALOAD DUP11 LT ISZERO DUP1 PUSH2 0x6AD JUMPI JUMPDEST PUSH2 0x594 SWAP1 PUSH2 0x10E3 JUMP JUMPDEST CALLER ISZERO PUSH2 0x69A JUMPI CALLER PUSH0 MSTORE PUSH0 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD DUP7 DUP2 LT PUSH2 0x67F JUMPI PUSH2 0x628 DUP12 PUSH1 0x40 SWAP14 SWAP6 PUSH2 0x623 DUP14 DUP8 PUSH2 0x614 DUP6 PUSH2 0x62E SWAP14 SWAP13 SWAP11 DUP16 SWAP11 PUSH0 DUP13 PUSH2 0x24F SWAP14 DUP9 SWAP14 CALLER DUP5 MSTORE DUP4 PUSH1 0x20 MSTORE SUB PUSH1 0x40 DUP4 KECCAK256 SSTORE DUP1 PUSH1 0x2 SLOAD SUB PUSH1 0x2 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x20 CALLER SWAP3 LOG3 PUSH2 0x11FF JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND PUSH2 0x11FF JUMP JUMPDEST PUSH2 0x1097 JUMP JUMPDEST SWAP4 PUSH2 0x1097 JUMP JUMPDEST PUSH32 0xD765E08EEF31C0983ECCA03ECD166297AC485ECD5DD69E291C848F0A020333C1 DUP7 MLOAD DUP1 PUSH2 0x670 CALLER SWAP5 DUP9 DUP11 DUP5 PUSH1 0x40 SWAP2 SWAP5 SWAP4 SWAP3 PUSH1 0x60 DUP3 ADD SWAP6 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE ADD MSTORE JUMP JUMPDEST SUB SWAP1 LOG4 DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE RETURN JUMPDEST DUP7 SWAP1 PUSH4 0x391434E3 PUSH1 0xE2 SHL PUSH0 MSTORE CALLER PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 MSTORE PUSH1 0x64 PUSH0 REVERT JUMPDEST PUSH4 0x4B637E8F PUSH1 0xE1 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP PUSH1 0x84 CALLDATALOAD DUP10 LT ISZERO PUSH2 0x58B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH17 0x496E76616C6964206C6971756964697479 PUSH1 0x78 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x462 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x462 JUMPI PUSH2 0x70B PUSH2 0xEBB JUMP JUMPDEST PUSH2 0x713 PUSH2 0xED1 JUMP JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 PUSH2 0x72E SWAP1 DUP4 AND DUP3 EQ ISZERO PUSH2 0x10A4 JUMP JUMPDEST PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x40 MLOAD SWAP1 PUSH2 0x758 DUP3 PUSH2 0xFE3 JUMP JUMPDEST PUSH2 0x77C PUSH1 0x1 DUP3 SLOAD SWAP3 DUP4 DUP6 MSTORE ADD SLOAD PUSH1 0x20 DUP5 ADD SWAP3 DUP2 DUP5 MSTORE ISZERO ISZERO SWAP1 DUP2 PUSH2 0x7B5 JUMPI JUMPDEST POP PUSH2 0xF24 JUMP JUMPDEST MLOAD SWAP1 PUSH8 0xDE0B6B3A7640000 DUP3 MUL SWAP2 DUP1 DUP4 DIV PUSH8 0xDE0B6B3A7640000 EQ SWAP1 ISZERO OR ISZERO PUSH2 0x2E4 JUMPI PUSH1 0x20 SWAP2 PUSH2 0x7AD SWAP2 MLOAD SWAP1 PUSH2 0xF7F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST SWAP1 POP ISZERO ISZERO DUP5 PUSH2 0x776 JUMP JUMPDEST CALLVALUE PUSH2 0x462 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x462 JUMPI PUSH2 0x7E5 PUSH2 0x7DB PUSH2 0xEBB JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x111D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x462 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x462 JUMPI PUSH1 0x40 MLOAD PUSH0 PUSH1 0x4 SLOAD DUP1 PUSH1 0x1 SHR SWAP1 PUSH1 0x1 DUP2 AND DUP1 ISZERO PUSH2 0x8E6 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT DUP2 EQ PUSH2 0x8D2 JUMPI DUP3 DUP6 MSTORE SWAP1 DUP2 ISZERO PUSH2 0x8AE JUMPI POP PUSH1 0x1 EQ PUSH2 0x850 JUMPI JUMPDEST PUSH2 0x2AE DUP4 PUSH2 0x844 DUP2 DUP6 SUB DUP3 PUSH2 0x1013 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 DUP3 PUSH2 0xE91 JUMP JUMPDEST SWAP2 SWAP1 POP PUSH1 0x4 PUSH0 MSTORE PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B SWAP2 PUSH0 SWAP1 JUMPDEST DUP1 DUP3 LT PUSH2 0x894 JUMPI POP SWAP1 SWAP2 POP DUP2 ADD PUSH1 0x20 ADD PUSH2 0x844 PUSH2 0x834 JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x1 DUP2 PUSH1 0x20 SWAP3 SLOAD DUP4 DUP6 DUP9 ADD ADD MSTORE ADD SWAP2 ADD SWAP1 SWAP3 SWAP2 PUSH2 0x87C JUMP JUMPDEST PUSH1 0xFF NOT AND PUSH1 0x20 DUP1 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP2 ISZERO ISZERO PUSH1 0x5 SHL DUP5 ADD SWAP1 SWAP2 ADD SWAP2 POP PUSH2 0x844 SWAP1 POP PUSH2 0x834 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x817 JUMP JUMPDEST CALLVALUE PUSH2 0x462 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x462 JUMPI PUSH2 0x909 PUSH2 0xEBB JUMP JUMPDEST PUSH2 0x911 PUSH2 0xED1 JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 PUSH0 KECCAK256 PUSH1 0x1 DUP2 SLOAD SWAP2 ADD SLOAD DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x462 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x462 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x96C PUSH2 0xEBB JUMP JUMPDEST AND PUSH0 MSTORE PUSH0 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x462 JUMPI PUSH1 0xA0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x462 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x44 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x462 JUMPI CALLDATASIZE PUSH1 0x23 DUP3 ADD SLT ISZERO PUSH2 0x462 JUMPI DUP1 PUSH1 0x4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT PUSH2 0x462 JUMPI CALLDATASIZE PUSH1 0x24 DUP3 PUSH1 0x5 SHL DUP5 ADD ADD GT PUSH2 0x462 JUMPI PUSH1 0x64 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x462 JUMPI PUSH2 0x9F8 TIMESTAMP PUSH1 0x84 CALLDATALOAD LT ISZERO PUSH2 0x1035 JUMP JUMPDEST PUSH1 0x2 DUP2 SUB PUSH2 0xBE5 JUMPI PUSH1 0x40 MLOAD SWAP4 PUSH2 0xA0F PUSH1 0x60 DUP7 PUSH2 0x1013 JUMP JUMPDEST PUSH1 0x2 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 PUSH1 0x40 CALLDATASIZE DUP7 CALLDATACOPY DUP6 MLOAD ISZERO PUSH2 0xBD1 JUMPI DUP2 DUP6 MSTORE DUP3 ISZERO PUSH2 0xBD1 JUMPI PUSH2 0xA39 PUSH1 0x24 DUP3 ADD PUSH2 0x1083 JUMP JUMPDEST SWAP3 PUSH1 0x1 LT ISZERO PUSH2 0xBD1 JUMPI PUSH1 0x44 PUSH2 0xA4E SWAP2 ADD PUSH2 0x1083 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP4 AND SWAP3 DUP4 PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP2 PUSH1 0x1 DUP4 SLOAD SWAP4 ADD SLOAD SWAP1 PUSH2 0xA8A DUP6 ISZERO ISZERO PUSH2 0xEE7 JUMP JUMPDEST DUP4 ISZERO ISZERO DUP1 PUSH2 0xBC8 JUMPI JUMPDEST PUSH2 0xA9C SWAP1 PUSH2 0xF24 JUMP JUMPDEST PUSH2 0xAA7 DUP3 DUP6 DUP8 PUSH2 0xF9D JUMP JUMPDEST PUSH2 0xAB0 DUP11 PUSH2 0x1073 JUMP JUMPDEST MSTORE PUSH1 0x24 CALLDATALOAD PUSH2 0xABD DUP11 PUSH2 0x1073 JUMP JUMPDEST MLOAD LT PUSH2 0xB8D JUMPI PUSH2 0x24F PUSH2 0xAFF DUP7 PUSH2 0xB10 SWAP7 PUSH2 0x2D6 DUP14 SWAP13 SWAP14 SWAP12 PUSH2 0xAE3 DUP5 DUP14 ADDRESS SWAP1 CALLER SWAP1 PUSH2 0x11B4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND SWAP13 PUSH2 0xAF7 SWAP1 PUSH2 0x1073 JUMP JUMPDEST MLOAD SWAP1 DUP14 PUSH2 0x11FF JUMP JUMPDEST SWAP3 PUSH2 0xB09 DUP11 PUSH2 0x1073 JUMP JUMPDEST MLOAD SWAP1 PUSH2 0x1097 JUMP JUMPDEST PUSH2 0xB19 DUP5 PUSH2 0x1073 JUMP JUMPDEST MLOAD PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0xCD3829A3813DC3CDD188FD3D01DCF3268C16BE2FDD2DD21D0665418816E46062 PUSH1 0x40 CALLER SWAP3 LOG4 PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 ADD SWAP1 PUSH1 0x20 DUP5 MSTORE MLOAD DUP1 SWAP2 MSTORE PUSH1 0x40 DUP4 ADD SWAP2 SWAP1 PUSH0 JUMPDEST DUP2 DUP2 LT PUSH2 0xB74 JUMPI POP POP POP SUB SWAP1 RETURN JUMPDEST DUP3 MLOAD DUP5 MSTORE DUP6 SWAP5 POP PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xB66 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x125B9CDD59999A58DA595B9D081BDD5D1C1D5D PUSH1 0x6A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP DUP2 ISZERO ISZERO PUSH2 0xA93 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x92DCECC2D8D2C840E0C2E8D PUSH1 0xA3 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x462 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x462 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x462 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x462 JUMPI PUSH2 0xC4D PUSH2 0xEBB JUMP JUMPDEST PUSH2 0xC55 PUSH2 0xED1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD SWAP1 SWAP3 PUSH1 0x44 CALLDATALOAD SWAP3 SWAP2 PUSH0 NOT DUP2 LT PUSH2 0xC93 JUMPI JUMPDEST POP PUSH2 0x7E5 SWAP4 POP PUSH2 0x111D JUMP JUMPDEST DUP4 DUP2 LT PUSH2 0xCF8 JUMPI DUP5 ISZERO PUSH2 0xCE5 JUMPI CALLER ISZERO PUSH2 0xCD2 JUMPI PUSH2 0x7E5 SWAP5 PUSH0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB CALLER AND PUSH0 MSTORE PUSH1 0x20 MSTORE DUP4 PUSH1 0x40 PUSH0 KECCAK256 SWAP2 SUB SWAP1 SSTORE DUP5 PUSH2 0xC88 JUMP JUMPDEST PUSH4 0x4A1406B1 PUSH1 0xE1 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH4 0xE602DF05 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP4 SWAP1 PUSH4 0x7DC7A0D9 PUSH1 0xE1 SHL PUSH0 MSTORE CALLER PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 MSTORE PUSH1 0x64 PUSH0 REVERT JUMPDEST CALLVALUE PUSH2 0x462 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x462 JUMPI PUSH1 0x20 PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x462 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x462 JUMPI PUSH2 0xD49 PUSH2 0xEBB JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER ISZERO PUSH2 0xCE5 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 ISZERO PUSH2 0xCD2 JUMPI CALLER PUSH0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP3 PUSH0 MSTORE PUSH1 0x20 MSTORE DUP1 PUSH1 0x40 PUSH0 KECCAK256 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x20 CALLER SWAP3 LOG3 PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x462 JUMPI PUSH0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x462 JUMPI PUSH1 0x40 MLOAD PUSH0 PUSH1 0x3 SLOAD DUP1 PUSH1 0x1 SHR SWAP1 PUSH1 0x1 DUP2 AND DUP1 ISZERO PUSH2 0xE63 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT DUP2 EQ PUSH2 0x8D2 JUMPI DUP3 DUP6 MSTORE SWAP1 DUP2 ISZERO PUSH2 0x8AE JUMPI POP PUSH1 0x1 EQ PUSH2 0xE05 JUMPI PUSH2 0x2AE DUP4 PUSH2 0x844 DUP2 DUP6 SUB DUP3 PUSH2 0x1013 JUMP JUMPDEST SWAP2 SWAP1 POP PUSH1 0x3 PUSH0 MSTORE PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B SWAP2 PUSH0 SWAP1 JUMPDEST DUP1 DUP3 LT PUSH2 0xE49 JUMPI POP SWAP1 SWAP2 POP DUP2 ADD PUSH1 0x20 ADD PUSH2 0x844 PUSH2 0x834 JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x1 DUP2 PUSH1 0x20 SWAP3 SLOAD DUP4 DUP6 DUP9 ADD ADD MSTORE ADD SWAP2 ADD SWAP1 SWAP3 SWAP2 PUSH2 0xE31 JUMP JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0xDD9 JUMP JUMPDEST CALLVALUE PUSH2 0x462 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x462 JUMPI PUSH1 0x20 PUSH2 0x7AD PUSH1 0x44 CALLDATALOAD PUSH1 0x24 CALLDATALOAD PUSH1 0x4 CALLDATALOAD PUSH2 0xF9D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 SWAP3 DUP2 DUP4 MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP2 DUP3 DUP3 DUP7 ADD MSTORE ADD DUP5 DUP5 ADD MCOPY PUSH0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x462 JUMPI JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x462 JUMPI JUMP JUMPDEST ISZERO PUSH2 0xEEE JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH14 0x125B9D985B1A5908185B5BDD5B9D PUSH1 0x92 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0xF2B JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xC PUSH1 0x24 DUP3 ADD MSTORE PUSH12 0x4E6F206C6971756964697479 PUSH1 0xA0 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0x2E4 JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x2E4 JUMPI JUMP JUMPDEST DUP2 ISZERO PUSH2 0xF89 JUMPI DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH2 0xFD1 SWAP1 PUSH2 0xFCB PUSH2 0xFD7 SWAP5 PUSH2 0xFB3 DUP4 ISZERO ISZERO PUSH2 0xEE7 JUMP JUMPDEST DUP5 ISZERO ISZERO DUP1 PUSH2 0xFDA JUMPI JUMPDEST PUSH2 0xFC5 SWAP1 PUSH2 0xF24 JUMP JUMPDEST DUP3 PUSH2 0xF5F JUMP JUMPDEST SWAP3 PUSH2 0xF72 JUMP JUMPDEST SWAP1 PUSH2 0xF7F JUMP JUMPDEST SWAP1 JUMP JUMPDEST POP DUP1 ISZERO ISZERO PUSH2 0xFBC JUMP JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xFFF JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0xFFF JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST ISZERO PUSH2 0x103C JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x111958591B1A5B99481C185CDCD959 PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP1 MLOAD PUSH1 0x1 LT ISZERO PUSH2 0xBD1 JUMPI PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x462 JUMPI SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x2E4 JUMPI JUMP JUMPDEST ISZERO PUSH2 0x10AB JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x4964656E746963616C20746F6B656E73 PUSH1 0x80 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST ISZERO PUSH2 0x10EA JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xB PUSH1 0x24 DUP3 ADD MSTORE PUSH11 0x135A5B881B9BDD081B595D PUSH1 0xAA SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 ISZERO PUSH2 0x69A JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 DUP3 ISZERO PUSH2 0x2B2 JUMPI DUP2 PUSH0 MSTORE PUSH0 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SLOAD DUP2 DUP2 LT PUSH2 0x119B JUMPI DUP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 PUSH1 0x20 SWAP3 DUP6 PUSH0 MSTORE PUSH0 DUP5 MSTORE SUB PUSH1 0x40 PUSH0 KECCAK256 SSTORE DUP5 PUSH0 MSTORE PUSH0 DUP3 MSTORE PUSH1 0x40 PUSH0 KECCAK256 DUP2 DUP2 SLOAD ADD SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST DUP3 PUSH4 0x391434E3 PUSH1 0xE2 SHL PUSH0 MSTORE PUSH1 0x4 MSTORE PUSH1 0x24 MSTORE PUSH1 0x44 MSTORE PUSH1 0x64 PUSH0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP2 MSTORE PUSH2 0x11FD SWAP2 PUSH2 0x11F8 PUSH1 0x84 DUP4 PUSH2 0x1013 JUMP JUMPDEST PUSH2 0x129E JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP2 MSTORE PUSH2 0x11FD SWAP2 PUSH2 0x11F8 PUSH1 0x64 DUP4 PUSH2 0x1013 JUMP JUMPDEST SWAP1 PUSH1 0x1 SWAP3 SWAP4 SWAP2 PUSH1 0x40 MLOAD SWAP5 PUSH2 0x124D DUP7 PUSH2 0xFE3 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP3 DUP4 MSTORE DUP4 DUP1 PUSH1 0xA0 SHL SUB AND PUSH0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP1 DUP4 DUP1 PUSH1 0xA0 SHL SUB AND PUSH0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH0 KECCAK256 SWAP3 MLOAD DUP4 SSTORE MLOAD SWAP2 ADD SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND SWAP1 DUP3 AND LT ISZERO PUSH2 0x129A JUMPI SWAP2 JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST SWAP1 PUSH0 PUSH1 0x20 SWAP2 DUP3 DUP2 MLOAD SWAP2 ADD DUP3 DUP6 GAS CALL ISZERO PUSH2 0x12F6 JUMPI PUSH0 MLOAD RETURNDATASIZE PUSH2 0x12ED JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND EXTCODESIZE ISZERO JUMPDEST PUSH2 0x12CD JUMPI POP JUMP JUMPDEST PUSH4 0x5274AFE7 PUSH1 0xE0 SHL PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST PUSH1 0x1 EQ ISZERO PUSH2 0x12C6 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x29 SWAP1 SWAP7 SELFDESTRUCT 0xE8 MCOPY 0xED BYTE 0xD PUSH13 0x75EE73AC09DD46A563F88BC9C1 0xC0 PUSH0 0xD 0x2A 0xBB MSIZE 0xB7 SWAP5 RJUMP 0x6473 PUSH16 0x6C634300081E00330000000000000000 ",
							"sourceMap": "459:17477:10:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;459:17477:10;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;-1:-1:-1;;;;;459:17477:10;;;;;;;;3399:55;3419:15;459:17477;;3407:27;;3399:55;:::i;:::-;-1:-1:-1;;;;;459:17477:10;;;;;;;;3688:45;3696:16;;;;3688:45;:::i;:::-;5555:18;;;:40;;;459:17477;;;;5808:27;5633:28;;;;;:60;;;459:17477;5625:84;;;:::i;:::-;5808:27;:::i;:::-;459:17477;;;;;;;;;;5865:5;459:17477;;;;;;;;;;;;;;;;;;;;;;;6024:13;;459:17477;6052:13;;;:30;;;459:17477;6048:651;;;6141:53;;6226:17;6141:53;;6226:17;:::i;:::-;459:17477;17254:1;17250:5;;17254:1;;;17271:5;;459:17477;;;;;;;;;;;17325:89;17332:5;;;;;;17246:226;;;6048:651;;16425:7;16418:4;;16398:10;16425:7;;:::i;:::-;16502;16418:4;;16398:10;16502:7;;:::i;:::-;7509:21:4;;7505:91;;6955:18:10;459:17477;6935:18;459:17477;;;6955:18;459:17477;;7064:25:4;459:17477:10;;6214:21:4;459:17477:10;6214:21:4;459:17477:10;6214:21:4;:::i;:::-;;459:17477:10;;;;;;;;;;;;;;;;;;;;;7064:25:4;6935:18:10;:::i;:::-;6955;;:::i;:::-;;;:::i;:::-;459:17477;;;;;;;;;;;;;;;;;;16398:10;;6990:71;;459:17477;;6990:71;459:17477;;;;;;;;;;;;;;;;;;;;;;;;;;;;7505:91:4;7553:32;;;459:17477:10;7553:32:4;459:17477:10;;;;;7553:32:4;17325:89:10;17357:5;;;17385:9;17357:5;17385;;;;:::i;:::-;:9;:::i;:::-;459:17477;;17325:89;;;459:17477;;;;;;;;;;;;17246:226;17434:6;17430:42;17246:226;17430:42;17456:5;459:17477;17246:226;;6048:651;6399:210;;;17896:31;17897:18;;6399:210;17897:18;;:::i;:::-;17896:31;:::i;:::-;13913:32;;;;;;13969:28;;;;459:17477;;13909:419;6378:231;14772:32;6378:231;14773:20;6378:231;2908:12:4;459:17477:10;14773:20;;:::i;14772:32::-;14822:13;;459:17477;;6048:651;;;459:17477;;;-1:-1:-1;;;459:17477:10;;;;;;;;;;;;-1:-1:-1;;;459:17477:10;;;;;;;;;;-1:-1:-1;;;459:17477:10;;;;;;;;;;;;-1:-1:-1;;;459:17477:10;;;;;;;13909:419;17897:18;;;;;17896:31;17897:18;;;;;:::i;17896:31::-;14203:28;;;459:17477;13909:419;459:17477;;;-1:-1:-1;;;459:17477:10;;;;;;;;;;;;-1:-1:-1;;;459:17477:10;;;;;;;6052:30;6069:13;;;6052:30;;5633:60;-1:-1:-1;5665:28:10;;;;5633:60;;459:17477;;;-1:-1:-1;;;459:17477:10;;;;;;;;;;;;-1:-1:-1;;;459:17477:10;;;;;;;5555:40;5577:18;;;;5555:40;;459:17477;;;;;;;;;;-1:-1:-1;;459:17477:10;;;;;;:::i;:::-;;;:::i;:::-;-1:-1:-1;;;;;459:17477:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;459:17477:10;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;-1:-1:-1;;;;;459:17477:10;;;;;;3399:55;3419:15;459:17477;;3407:27;;3399:55;:::i;:::-;-1:-1:-1;;;;;459:17477:10;;;;;;;;;3688:45;3696:16;;;;3688:45;:::i;:::-;8029:13;;459:17477;;8155:27;;;:::i;:::-;459:17477;;;;;;;;;;;;;;8212:5;459:17477;;;;;;;;;;;;-1:-1:-1;459:17477:10;;;;-1:-1:-1;459:17477:10;;;;;8345:13;;459:17477;;2908:12:4;459:17477:10;15425:20;15481:37;15424;15425:20;;;;;:::i;15424:37::-;15482:20;;;;;:::i;15481:37::-;459:17477;;;8564:21;;;:46;;;459:17477;8556:70;;;:::i;:::-;8700:10;8035:21:4;8031:89;;8700:10:10;459:17477;;;;;;;;;6321:19:4;;;6317:115;;8901:18:10;8700:10;459:17477;8700:10;;16840:6;8700:10;;16840:6;8700:10;8921:18;8700:10;;;;;459:17477;8700:10;8921:18;8700:10;;;;459:17477;;;;;;;;;;;2908:12:4;459:17477:10;;2908:12:4;459:17477:10;;;;;;7064:25:4;459:17477:10;8700:10;7064:25:4;;16840:6:10;:::i;:::-;-1:-1:-1;;;;;459:17477:10;;16840:6;:::i;:::-;8901:18;:::i;:::-;8921;;:::i;:::-;8956:73;459:17477;;8700:10;8956:73;8700:10;8956:73;;;;459:17477;;;;;;;;;;;;;;;;;;8956:73;;;;459:17477;;;;;;;;;;6317:115:4;6367:50;;;;;459:17477:10;6367:50:4;8700:10:10;459:17477;;;;;;;;6367:50:4;8031:89;8079:30;;;459:17477:10;8079:30:4;459:17477:10;;;;;8079:30:4;8564:46:10;-1:-1:-1;459:17477:10;;8589:21;;;8564:46;;459:17477;;;-1:-1:-1;;;459:17477:10;;;;;;;;;;;;-1:-1:-1;;;459:17477:10;;;;;;;;;;;;;-1:-1:-1;;459:17477:10;;;;;;:::i;:::-;;;:::i;:::-;;-1:-1:-1;;;;;459:17477:10;;;;11420:45;;459:17477;;11428:16;;;11420:45;:::i;:::-;459:17477;;11503:5;459:17477;;;;;11503:21;459:17477;;;;;;-1:-1:-1;459:17477:10;;;;-1:-1:-1;459:17477:10;;;;;;;:::i;:::-;11534:63;459:17477;;;;;;;;;;;;;;;;11542:17;;:38;;;;459:17477;11534:63;;:::i;:::-;459:17477;;11641:4;459:17477;;;;;;11641:4;459:17477;;;;;;;;;11624:38;459:17477;;11624:38;;:::i;:::-;459:17477;;;;;;11542:38;11563:17;;;;11542:38;;;459:17477;;;;;;-1:-1:-1;;459:17477:10;;;;3440:5:4;459:17477:10;;:::i;:::-;;;735:10:8;;3440:5:4;:::i;:::-;459:17477:10;;;;;;;;;;;;;-1:-1:-1;;459:17477:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;459:17477:10;;-1:-1:-1;459:17477:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;459:17477:10;;;;;;;;;;;;;;;;;;;;-1:-1:-1;459:17477:10;;-1:-1:-1;459:17477:10;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;459:17477:10;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;1232:57;459:17477;;;;;1232:57;459:17477;;;;;;-1:-1:-1;459:17477:10;;;;;-1:-1:-1;459:17477:10;1232:57;459:17477;;1232:57;;459:17477;;;;;;;;;;;;;;;;;-1:-1:-1;;459:17477:10;;;;-1:-1:-1;;;;;459:17477:10;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;459:17477:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;459:17477:10;;;;;;3399:55;3419:15;459:17477;;3407:27;;3399:55;:::i;:::-;9815:1;9800:16;;459:17477;;;;;;;;;:::i;:::-;9815:1;459:17477;;;;;;;;;;;;;;;;;;;;;;9967:7;459:17477;;;9967:7;:::i;:::-;459:17477;;;;;;;9976:7;459:17477;;9976:7;:::i;:::-;459:17477;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;459:17477:10;;;;-1:-1:-1;459:17477:10;;;;;10153:13;;459:17477;10193:12;10185:39;10193:12;;;10185:39;:::i;:::-;10242:13;;;:31;;;459:17477;10234:56;;;:::i;:::-;10391:45;;;;;:::i;:::-;10378:58;;;:::i;:::-;459:17477;;;10454:10;;;:::i;:::-;459:17477;10454:26;459:17477;;10790:23;10768:20;10603:4;10790:23;10603:4;10663:10;10603:4;;;;10610:8;10603:4;;;10583:10;;10610:8;;:::i;:::-;-1:-1:-1;;;;;459:17477:10;;;10663:10;;;:::i;:::-;459:17477;10663:10;;;:::i;10768:20::-;10803:10;;;;:::i;:::-;459:17477;10790:23;;:::i;:::-;10876:10;;;:::i;:::-;459:17477;;;;;;;;;;10830:57;459:17477;10583:10;10830:57;;459:17477;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;459:17477:10;;;;;;;;;;;;;;;;-1:-1:-1;;;459:17477:10;;;;;;;;;;;;-1:-1:-1;;;459:17477:10;;;;;;;10242:31;-1:-1:-1;10259:14:10;;;10242:31;;459:17477;;;;;;;;;;;;;;;-1:-1:-1;;;459:17477:10;;;;;;;;;;;;-1:-1:-1;;;459:17477:10;;;;;;;;;;;;;-1:-1:-1;;459:17477:10;;;;;;;2761:2:4;459:17477:10;;;;;;;;;-1:-1:-1;;459:17477:10;;;;;;:::i;:::-;;;:::i;:::-;-1:-1:-1;;;;;459:17477:10;;;;;;;;;;;;;;;735:10:8;459:17477:10;;;;;;;;;;;;;;-1:-1:-1;;10561:36:4;;10557:309;;459:17477:10;4967:5:4;;;;;:::i;10557:309::-;10617:24;;;10613:130;;9794:19;;9790:89;;735:10:8;9892:21:4;9888:90;;4967:5;459:17477:10;;;;;;;;;;;;;;735:10:8;459:17477:10;-1:-1:-1;459:17477:10;;;;;-1:-1:-1;459:17477:10;;;;;10557:309:4;;;9888:90;9936:31;;;459:17477:10;9936:31:4;459:17477:10;;;;;9936:31:4;9790:89;9836:32;;;459:17477:10;9836:32:4;459:17477:10;;;;;9836:32:4;10613:130;10668:60;;;;;459:17477:10;10668:60:4;735:10:8;459:17477:10;;;;;;;;10668:60:4;459:17477:10;;;;;;-1:-1:-1;;459:17477:10;;;;;2908:12:4;459:17477:10;;;;;;;;;;;;;-1:-1:-1;;459:17477:10;;;;;;:::i;:::-;;;735:10:8;;9794:19:4;9790:89;;-1:-1:-1;;;;;459:17477:10;;9892:21:4;;9888:90;;735:10:8;459:17477:10;;;;;;;;;-1:-1:-1;459:17477:10;;;;;-1:-1:-1;459:17477:10;;;;;;;10066:31:4;459:17477:10;735:10:8;10066:31:4;;459:17477:10;;;;;;;;;;;;;-1:-1:-1;;459:17477:10;;;;;;;1837:5:4;459:17477:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;1837:5:4;459:17477:10;;;;;;;;;;;;-1:-1:-1;459:17477:10;;-1:-1:-1;459:17477:10;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;459:17477:10;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;459:17477:10;;;;:::o;:::-;;;;-1:-1:-1;;;;;459:17477:10;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;459:17477:10;;;;;;:::o;:::-;;;;:::o;:::-;;;-1:-1:-1;;;459:17477:10;;;;;;;;;;;;-1:-1:-1;;;459:17477:10;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;459:17477:10;;;;;;;;;;;;-1:-1:-1;;;459:17477:10;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;:::o;:::-;;;;;;;;;;;;12058:359;12389:20;12058:359;12363:21;12362:48;12058:359;12226:39;12234:12;;;12226:39;:::i;:::-;12283:13;;;:31;;;12058:359;12275:56;;;:::i;:::-;12363:21;;:::i;:::-;12389:20;;:::i;:::-;12362:48;;:::i;:::-;12058:359;:::o;12283:31::-;-1:-1:-1;12300:14:10;;;12283:31;;459:17477;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;459:17477:10;;;;;-1:-1:-1;459:17477:10;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;:::o;:::-;;;-1:-1:-1;;;459:17477:10;;;;;;;;;;;;-1:-1:-1;;;459:17477:10;;;;;;;;;;9981:1;459:17477;;;;;;;:::o;:::-;;-1:-1:-1;;;;;459:17477:10;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;:::o;:::-;;;-1:-1:-1;;;459:17477:10;;;;;;;;;;;;-1:-1:-1;;;459:17477:10;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;;459:17477:10;;;;;;;;;;;;-1:-1:-1;;;459:17477:10;;;;;;;5374:300:4;-1:-1:-1;;;;;459:17477:10;;5457:18:4;;5453:86;;-1:-1:-1;;;;;459:17477:10;;5552:16:4;;5548:86;;459:17477:10;5473:1:4;459:17477:10;5473:1:4;459:17477:10;;;5473:1:4;459:17477:10;;6321:19:4;;;6317:115;;459:17477:10;7064:25:4;459:17477:10;;;;5473:1:4;459:17477:10;5473:1:4;459:17477:10;;;;5473:1:4;459:17477:10;;;5473:1:4;459:17477:10;5473:1:4;459:17477:10;;;5473:1:4;459:17477:10;;;;;;;;;;;;7064:25:4;5374:300::o;6317:115::-;6367:50;;;;5473:1;6367:50;;459:17477:10;;;;;;5473:1:4;6367:50;1618:188:7;459:17477:10;;-1:-1:-1;;;1745:53:7;;;;-1:-1:-1;;;;;459:17477:10;;;1745:53:7;;;459:17477:10;;;;;;;;;;;;;;;;;1745:53:7;;;;;;;459:17477:10;1745:53:7;:::i;:::-;;:::i;:::-;1618:188::o;1219:160::-;459:17477:10;;-1:-1:-1;;;1328:43:7;;;;-1:-1:-1;;;;;459:17477:10;;;1328:43:7;;;459:17477:10;;;;;;;;;1328:43:7;;;;;;;459:17477:10;1328:43:7;:::i;15762:217:10:-;;459:17477;15762:217;;;459:17477;;;;;;:::i;:::-;;;15942:30;;;459:17477;;;;;;;;;-1:-1:-1;459:17477:10;15918:5;15942:30;459:17477;;-1:-1:-1;459:17477:10;15918:21;459:17477;;;;;;-1:-1:-1;459:17477:10;;;;-1:-1:-1;459:17477:10;;;;;;;;;15762:217::o;12781:225::-;-1:-1:-1;;;;;459:17477:10;;;;;;12946:15;459:17477;;;12781:225;:::o;12946:53::-;12927:72;12781:225;:::o;8370:720:7:-;;-1:-1:-1;8507:421:7;8370:720;8507:421;;;;;;;;;;;;-1:-1:-1;8507:421:7;;8942:15;;-1:-1:-1;;;;;;459:17477:10;;8960:26:7;:31;8942:68;8938:146;;8370:720;:::o;8938:146::-;-1:-1:-1;;;;9033:40:7;;;-1:-1:-1;;;;;459:17477:10;;;;9033:40:7;459:17477:10;;;9033:40:7;8942:68;9009:1;8994:16;;8942:68;;8507:421;;;;-1:-1:-1;8507:421:7;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "983800",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": "infinite",
								"allowance(address,address)": "2851",
								"approve(address,uint256)": "24339",
								"balanceOf(address)": "2551",
								"decimals()": "255",
								"getAmountOut(uint256,uint256,uint256)": "536",
								"getPrice(address,address)": "5314",
								"name()": "infinite",
								"pools(address,address)": "4856",
								"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": "infinite",
								"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "2314",
								"transfer(address,uint256)": "50966",
								"transferFrom(address,address,uint256)": "75537"
							},
							"internal": {
								"_calculateLiquidity(uint256,uint256,uint256)": "infinite",
								"_calculateOptimalDeposit(uint256,uint256,uint256,uint256,uint256,uint256)": "infinite",
								"_calculateWithdrawalAmounts(uint256,uint256,uint256)": "infinite",
								"_quote(uint256,uint256,uint256)": "infinite",
								"_safeTransfer(address,address,uint256)": "infinite",
								"_sortTokens(address,address)": "68",
								"_sqrt(uint256)": "infinite",
								"_transferTokens(address,address,uint256,uint256)": "infinite",
								"_updateReserves(address,address,uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "80"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "CALLVALUE",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "OR",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "D"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "53696D706C6553776170204C5"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "9C"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "OR",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "5"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "53532D4C5"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "DC"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 1648,
									"end": 1661,
									"name": "PUSH",
									"source": 4,
									"value": "3"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SLOAD",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SHR",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "9"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "tag",
									"source": -1,
									"value": "10"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "JUMPDEST",
									"source": -1
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "EQ",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "1F"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "13"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "tag",
									"source": -1,
									"value": "14"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "JUMPDEST",
									"source": -1
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "1F"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "EQ",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "15"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP4",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "17"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "tag",
									"source": 10,
									"value": "18"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SHL",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "NOT",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1648,
									"end": 1661,
									"name": "PUSH",
									"source": 4,
									"value": "3"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SHL",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SHR",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "NOT",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "OR",
									"source": 10
								},
								{
									"begin": 1648,
									"end": 1661,
									"name": "PUSH",
									"source": 4,
									"value": "3"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "tag",
									"source": 10,
									"value": "19"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 1671,
									"end": 1688,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SLOAD",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SHR",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "ISZERO",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "22"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "tag",
									"source": 10,
									"value": "23"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "EQ",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "1F"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "26"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "tag",
									"source": 10,
									"value": "27"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "1F"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "GT",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "EQ",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "28"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "30"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "tag",
									"source": 10,
									"value": "31"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SHL",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "NOT",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 1648,
									"end": 1661,
									"name": "PUSH",
									"source": 4,
									"value": "3"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SHL",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SHR",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "NOT",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "OR",
									"source": 10
								},
								{
									"begin": 1671,
									"end": 1688,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "tag",
									"source": 10,
									"value": "32"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH #[$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH [$]",
									"source": 10,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "CODECOPY",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "RETURN",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "tag",
									"source": 10,
									"value": "30"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "31"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "tag",
									"source": 10,
									"value": "28"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "1F"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "NOT",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 1671,
									"end": 1688,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "KECCAK256",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "tag",
									"source": 10,
									"value": "33"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "34"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP6",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "36"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "tag",
									"source": 10,
									"value": "37"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SHL",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1671,
									"end": 1688,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "32"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "tag",
									"source": 10,
									"value": "36"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "NOT",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "F8"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 1648,
									"end": 1661,
									"name": "PUSH",
									"source": 4,
									"value": "3"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SHL",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SHR",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "NOT",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "37"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "tag",
									"source": 10,
									"value": "34"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP7",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP5",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "33"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "tag",
									"source": 10,
									"value": "26"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1671,
									"end": 1688,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "1F"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "5"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SHR",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "38"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "tag",
									"source": 10,
									"value": "39"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "1F"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "5"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SHR",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "tag",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "41"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "27"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "tag",
									"source": 10,
									"value": "41"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "40"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "tag",
									"source": 10,
									"value": "38"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "39"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "tag",
									"source": 10,
									"value": "24"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "4E487B71"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "E0"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SHL",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "22"
								},
								{
									"begin": 1671,
									"end": 1688,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "24"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "tag",
									"source": 10,
									"value": "22"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "7F"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "23"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "tag",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "4E487B71"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "E0"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SHL",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "41"
								},
								{
									"begin": 1671,
									"end": 1688,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "24"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "REVERT",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "tag",
									"source": 10,
									"value": "17"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "18"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "tag",
									"source": 10,
									"value": "15"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "1F"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "NOT",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP3",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP4",
									"source": 10
								},
								{
									"begin": 1648,
									"end": 1661,
									"name": "PUSH",
									"source": 4,
									"value": "3"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "KECCAK256",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "tag",
									"source": 10,
									"value": "43"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP7",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "44"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP6",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP7",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "46"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "tag",
									"source": 10,
									"value": "47"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SHL",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 1648,
									"end": 1661,
									"name": "PUSH",
									"source": 4,
									"value": "3"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "19"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "tag",
									"source": 10,
									"value": "46"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "NOT",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "F8"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 1648,
									"end": 1661,
									"name": "PUSH",
									"source": 4,
									"value": "3"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SHL",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SHR",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "NOT",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "47"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "tag",
									"source": 10,
									"value": "44"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP7",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP6",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "MLOAD",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP5",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP3",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "43"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "tag",
									"source": 10,
									"value": "13"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 1648,
									"end": 1661,
									"name": "PUSH",
									"source": 4,
									"value": "3"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "MSTORE",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "C2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "1F"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP4",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "5"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SHR",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "20"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP5",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "48"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "tag",
									"source": 10,
									"value": "49"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "1F"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "5"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SHR",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "tag",
									"source": 10,
									"value": "50"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "LT",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "51"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPI",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "POP",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "14"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "tag",
									"source": 10,
									"value": "51"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SSTORE",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "ADD",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "50"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "tag",
									"source": 10,
									"value": "48"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP2",
									"source": 10
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP2",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "49"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "tag",
									"source": 10,
									"value": "9"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "7F"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "AND",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "SWAP1",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH [tag]",
									"source": 10,
									"value": "10"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMP",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "tag",
									"source": 10,
									"value": "1"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "JUMPDEST",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "PUSH",
									"source": 10,
									"value": "0"
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "DUP1",
									"source": 10
								},
								{
									"begin": 459,
									"end": 17936,
									"name": "REVERT",
									"source": 10
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220299096ffe85eed1a0d6c75ee73ac09dd46a563f88bc9c1c05f0d2abb59b794e064736f6c634300081e0033",
									".code": [
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "25"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "25"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "54D50D4"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "27"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "6FDDE03"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "29"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "95EA7B3"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "31"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "18160DDD"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "33"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "23B872DD"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "35"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "313CE567"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "37"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "38ED1739"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "39"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "70A08231"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "41"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "901754D7"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "43"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "95D89B41"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "45"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "A9059CBB"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "47"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "AC41865A"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "49"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "BAA2ABDE"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "51"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "DD62ED3E"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "53"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "E8E33700"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "55"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "55"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "100"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "61"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 459,
											"end": 17936,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "61"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "62"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 459,
											"end": 17936,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "62"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "A4"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "C4"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3399,
											"end": 3454,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "65"
										},
										{
											"begin": 3419,
											"end": 3434,
											"name": "TIMESTAMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "E4"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 3407,
											"end": 3434,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 3407,
											"end": 3434,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3399,
											"end": 3454,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "13"
										},
										{
											"begin": 3399,
											"end": 3454,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3399,
											"end": 3454,
											"name": "tag",
											"source": 10,
											"value": "65"
										},
										{
											"begin": 3399,
											"end": 3454,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 3688,
											"end": 3733,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "66"
										},
										{
											"begin": 3696,
											"end": 3712,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 3696,
											"end": 3712,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 3696,
											"end": 3712,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 3696,
											"end": 3712,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3688,
											"end": 3733,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "17"
										},
										{
											"begin": 3688,
											"end": 3733,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3688,
											"end": 3733,
											"name": "tag",
											"source": 10,
											"value": "66"
										},
										{
											"begin": 3688,
											"end": 3733,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5555,
											"end": 5573,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 5555,
											"end": 5573,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 5555,
											"end": 5573,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 5555,
											"end": 5595,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5555,
											"end": 5595,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "67"
										},
										{
											"begin": 5555,
											"end": 5595,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "68"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "69"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 5808,
											"end": 5835,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "71"
										},
										{
											"begin": 5633,
											"end": 5661,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5633,
											"end": 5661,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 5633,
											"end": 5661,
											"name": "DUP10",
											"source": 10
										},
										{
											"begin": 5633,
											"end": 5661,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 5633,
											"end": 5661,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 5633,
											"end": 5693,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 5633,
											"end": 5693,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "72"
										},
										{
											"begin": 5633,
											"end": 5693,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "73"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5625,
											"end": 5709,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "74"
										},
										{
											"begin": 5625,
											"end": 5709,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5625,
											"end": 5709,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "18"
										},
										{
											"begin": 5625,
											"end": 5709,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5625,
											"end": 5709,
											"name": "tag",
											"source": 10,
											"value": "74"
										},
										{
											"begin": 5625,
											"end": 5709,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5808,
											"end": 5835,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "23"
										},
										{
											"begin": 5808,
											"end": 5835,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5808,
											"end": 5835,
											"name": "tag",
											"source": 10,
											"value": "71"
										},
										{
											"begin": 5808,
											"end": 5835,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5865,
											"end": 5870,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP7",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 6024,
											"end": 6037,
											"name": "SWAP9",
											"source": 10
										},
										{
											"begin": 6024,
											"end": 6037,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 6052,
											"end": 6065,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6052,
											"end": 6065,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 6052,
											"end": 6065,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 6052,
											"end": 6082,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 6052,
											"end": 6082,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "75"
										},
										{
											"begin": 6052,
											"end": 6082,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "76"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6048,
											"end": 6699,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 6048,
											"end": 6699,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "77"
										},
										{
											"begin": 6048,
											"end": 6699,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 6141,
											"end": 6194,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6141,
											"end": 6194,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6226,
											"end": 6243,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "79"
										},
										{
											"begin": 6141,
											"end": 6194,
											"name": "DUP10",
											"source": 10
										},
										{
											"begin": 6141,
											"end": 6194,
											"name": "DUP10",
											"source": 10
										},
										{
											"begin": 6226,
											"end": 6243,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 6226,
											"end": 6243,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6226,
											"end": 6243,
											"name": "tag",
											"source": 10,
											"value": "79"
										},
										{
											"begin": 6226,
											"end": 6243,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 17254,
											"end": 17255,
											"name": "PUSH",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 17250,
											"end": 17255,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 17250,
											"end": 17255,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 17254,
											"end": 17255,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 17254,
											"end": 17255,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 17254,
											"end": 17255,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 17271,
											"end": 17276,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 17271,
											"end": 17276,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "82"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 17325,
											"end": 17414,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 17332,
											"end": 17337,
											"name": "tag",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 17332,
											"end": 17337,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 17332,
											"end": 17337,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 17332,
											"end": 17337,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 17332,
											"end": 17337,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 17332,
											"end": 17337,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "85"
										},
										{
											"begin": 17332,
											"end": 17337,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 17246,
											"end": 17472,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 17246,
											"end": 17472,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 17246,
											"end": 17472,
											"name": "tag",
											"source": 10,
											"value": "87"
										},
										{
											"begin": 17246,
											"end": 17472,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6048,
											"end": 6699,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 6048,
											"end": 6699,
											"name": "tag",
											"source": 10,
											"value": "88"
										},
										{
											"begin": 6048,
											"end": 6699,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 16425,
											"end": 16432,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "89"
										},
										{
											"begin": 16418,
											"end": 16422,
											"name": "DUP10",
											"source": 10
										},
										{
											"begin": 16418,
											"end": 16422,
											"name": "ADDRESS",
											"source": 10
										},
										{
											"begin": 16398,
											"end": 16408,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 16425,
											"end": 16432,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 16425,
											"end": 16432,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 16425,
											"end": 16432,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 16425,
											"end": 16432,
											"name": "tag",
											"source": 10,
											"value": "89"
										},
										{
											"begin": 16425,
											"end": 16432,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 16502,
											"end": 16509,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "90"
										},
										{
											"begin": 16418,
											"end": 16422,
											"name": "DUP11",
											"source": 10
										},
										{
											"begin": 16418,
											"end": 16422,
											"name": "ADDRESS",
											"source": 10
										},
										{
											"begin": 16398,
											"end": 16408,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 16502,
											"end": 16509,
											"name": "DUP10",
											"source": 10
										},
										{
											"begin": 16502,
											"end": 16509,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 16502,
											"end": 16509,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 16502,
											"end": 16509,
											"name": "tag",
											"source": 10,
											"value": "90"
										},
										{
											"begin": 16502,
											"end": 16509,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 7509,
											"end": 7530,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 7509,
											"end": 7530,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 7505,
											"end": 7596,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "91"
										},
										{
											"begin": 7505,
											"end": 7596,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 6955,
											"end": 6973,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "93"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP11",
											"source": 10
										},
										{
											"begin": 6935,
											"end": 6953,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "94"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP12",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "95"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP12",
											"source": 10
										},
										{
											"begin": 6955,
											"end": 6973,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "96"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP9",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7064,
											"end": 7089,
											"name": "PUSH",
											"source": 4,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP16",
											"source": 10
										},
										{
											"begin": 6214,
											"end": 6235,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "97"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 6214,
											"end": 6235,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 6214,
											"end": 6235,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "8"
										},
										{
											"begin": 6214,
											"end": 6235,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 6214,
											"end": 6235,
											"name": "tag",
											"source": 4,
											"value": "97"
										},
										{
											"begin": 6214,
											"end": 6235,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6214,
											"end": 6235,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7064,
											"end": 7089,
											"name": "LOG3",
											"source": 4
										},
										{
											"begin": 6935,
											"end": 6953,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "8"
										},
										{
											"begin": 6935,
											"end": 6953,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6935,
											"end": 6953,
											"name": "tag",
											"source": 10,
											"value": "94"
										},
										{
											"begin": 6935,
											"end": 6953,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6955,
											"end": 6973,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 6955,
											"end": 6973,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "8"
										},
										{
											"begin": 6955,
											"end": 6973,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6955,
											"end": 6973,
											"name": "tag",
											"source": 10,
											"value": "93"
										},
										{
											"begin": 6955,
											"end": 6973,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6955,
											"end": 6973,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 6955,
											"end": 6973,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "22"
										},
										{
											"begin": 6955,
											"end": 6973,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6955,
											"end": 6973,
											"name": "tag",
											"source": 10,
											"value": "96"
										},
										{
											"begin": 6955,
											"end": 6973,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 16398,
											"end": 16408,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 16398,
											"end": 16408,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6990,
											"end": 7061,
											"name": "PUSH",
											"source": 10,
											"value": "43C967B388D3A4CCAD3F7AB80167852E322E5A3FDE9893F530252281B2AE8B70"
										},
										{
											"begin": 6990,
											"end": 7061,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 6990,
											"end": 7061,
											"name": "LOG4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "95"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "RETURN",
											"source": 10
										},
										{
											"begin": 7505,
											"end": 7596,
											"name": "tag",
											"source": 4,
											"value": "91"
										},
										{
											"begin": 7505,
											"end": 7596,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 7553,
											"end": 7585,
											"name": "PUSH",
											"source": 4,
											"value": "EC442F05"
										},
										{
											"begin": 7553,
											"end": 7585,
											"name": "PUSH",
											"source": 4,
											"value": "E0"
										},
										{
											"begin": 7553,
											"end": 7585,
											"name": "SHL",
											"source": 4
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7553,
											"end": 7585,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 7553,
											"end": 7585,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 17325,
											"end": 17414,
											"name": "tag",
											"source": 10,
											"value": "85"
										},
										{
											"begin": 17325,
											"end": 17414,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 17357,
											"end": 17362,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 17357,
											"end": 17362,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 17357,
											"end": 17362,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 17385,
											"end": 17394,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "99"
										},
										{
											"begin": 17357,
											"end": 17362,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 17385,
											"end": 17390,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "100"
										},
										{
											"begin": 17385,
											"end": 17390,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 17385,
											"end": 17390,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 17385,
											"end": 17390,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 17385,
											"end": 17390,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 17385,
											"end": 17390,
											"name": "tag",
											"source": 10,
											"value": "100"
										},
										{
											"begin": 17385,
											"end": 17390,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 17385,
											"end": 17394,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "8"
										},
										{
											"begin": 17385,
											"end": 17394,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 17385,
											"end": 17394,
											"name": "tag",
											"source": 10,
											"value": "99"
										},
										{
											"begin": 17385,
											"end": 17394,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 17325,
											"end": 17414,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 17325,
											"end": 17414,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 17325,
											"end": 17414,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "82"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B71"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 17246,
											"end": 17472,
											"name": "tag",
											"source": 10,
											"value": "80"
										},
										{
											"begin": 17246,
											"end": 17472,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 17434,
											"end": 17440,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 17430,
											"end": 17472,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 17246,
											"end": 17472,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "87"
										},
										{
											"begin": 17430,
											"end": 17472,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 17456,
											"end": 17461,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 17246,
											"end": 17472,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "87"
										},
										{
											"begin": 17246,
											"end": 17472,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 6048,
											"end": 6699,
											"name": "tag",
											"source": 10,
											"value": "77"
										},
										{
											"begin": 6048,
											"end": 6699,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6399,
											"end": 6609,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 6399,
											"end": 6609,
											"name": "SWAP10",
											"source": 10
										},
										{
											"begin": 6399,
											"end": 6609,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 17896,
											"end": 17927,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "103"
										},
										{
											"begin": 17897,
											"end": 17915,
											"name": "DUP10",
											"source": 10
										},
										{
											"begin": 17897,
											"end": 17915,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "104"
										},
										{
											"begin": 6399,
											"end": 6609,
											"name": "DUP14",
											"source": 10
										},
										{
											"begin": 17897,
											"end": 17915,
											"name": "DUP14",
											"source": 10
										},
										{
											"begin": 17897,
											"end": 17915,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 17897,
											"end": 17915,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 17897,
											"end": 17915,
											"name": "tag",
											"source": 10,
											"value": "104"
										},
										{
											"begin": 17897,
											"end": 17915,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 17896,
											"end": 17927,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 17896,
											"end": 17927,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 17896,
											"end": 17927,
											"name": "tag",
											"source": 10,
											"value": "103"
										},
										{
											"begin": 17896,
											"end": 17927,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 13913,
											"end": 13945,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 13913,
											"end": 13945,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 13913,
											"end": 13945,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 13913,
											"end": 13945,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 13913,
											"end": 13945,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "105"
										},
										{
											"begin": 13913,
											"end": 13945,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 13969,
											"end": 13997,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 13969,
											"end": 13997,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 13969,
											"end": 13997,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 13969,
											"end": 13997,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "107"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 13909,
											"end": 14328,
											"name": "tag",
											"source": 10,
											"value": "109"
										},
										{
											"begin": 13909,
											"end": 14328,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6378,
											"end": 6609,
											"name": "SWAP8",
											"source": 10
										},
										{
											"begin": 14772,
											"end": 14804,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "110"
										},
										{
											"begin": 6378,
											"end": 6609,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 14773,
											"end": 14793,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "104"
										},
										{
											"begin": 6378,
											"end": 6609,
											"name": "DUP11",
											"source": 10
										},
										{
											"begin": 2908,
											"end": 2920,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 14773,
											"end": 14793,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 14773,
											"end": 14793,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 14773,
											"end": 14793,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 14772,
											"end": 14804,
											"name": "tag",
											"source": 10,
											"value": "110"
										},
										{
											"begin": 14772,
											"end": 14804,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 14822,
											"end": 14835,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 14822,
											"end": 14835,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "112"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 6048,
											"end": 6699,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 6048,
											"end": 6699,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "88"
										},
										{
											"begin": 6048,
											"end": 6699,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "112"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "16"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "496E73756666696369656E74206C6971756964697479"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "50"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "107"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "E"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "24B739BAB33334B1B4B2B73A1021"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "91"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 13909,
											"end": 14328,
											"name": "tag",
											"source": 10,
											"value": "105"
										},
										{
											"begin": 13909,
											"end": 14328,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 17897,
											"end": 17915,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 17897,
											"end": 17915,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 17897,
											"end": 17915,
											"name": "SWAP9",
											"source": 10
										},
										{
											"begin": 17897,
											"end": 17915,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 17897,
											"end": 17915,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 17896,
											"end": 17927,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 17897,
											"end": 17915,
											"name": "DUP10",
											"source": 10
										},
										{
											"begin": 17897,
											"end": 17915,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "104"
										},
										{
											"begin": 17897,
											"end": 17915,
											"name": "DUP10",
											"source": 10
										},
										{
											"begin": 17897,
											"end": 17915,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 17897,
											"end": 17915,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 17897,
											"end": 17915,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 17896,
											"end": 17927,
											"name": "tag",
											"source": 10,
											"value": "114"
										},
										{
											"begin": 17896,
											"end": 17927,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 14203,
											"end": 14231,
											"name": "SWAP8",
											"source": 10
										},
										{
											"begin": 14203,
											"end": 14231,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 14203,
											"end": 14231,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 13909,
											"end": 14328,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "109"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "E"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "496E73756666696369656E742041"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "90"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 6052,
											"end": 6082,
											"name": "tag",
											"source": 10,
											"value": "75"
										},
										{
											"begin": 6052,
											"end": 6082,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 6069,
											"end": 6082,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 6069,
											"end": 6082,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 6069,
											"end": 6082,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 6052,
											"end": 6082,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "76"
										},
										{
											"begin": 6052,
											"end": 6082,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5633,
											"end": 5693,
											"name": "tag",
											"source": 10,
											"value": "72"
										},
										{
											"begin": 5633,
											"end": 5693,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5665,
											"end": 5693,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 5665,
											"end": 5693,
											"name": "DUP11",
											"source": 10
										},
										{
											"begin": 5665,
											"end": 5693,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 5665,
											"end": 5693,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 5633,
											"end": 5693,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "73"
										},
										{
											"begin": 5633,
											"end": 5693,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "69"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "F"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "496E76616C696420616D6F756E7473"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "88"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 5555,
											"end": 5595,
											"name": "tag",
											"source": 10,
											"value": "67"
										},
										{
											"begin": 5555,
											"end": 5595,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 5577,
											"end": 5595,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 5577,
											"end": 5595,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 5577,
											"end": 5595,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 5577,
											"end": 5595,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 5555,
											"end": 5595,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "68"
										},
										{
											"begin": 5555,
											"end": 5595,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "53"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "122"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 459,
											"end": 17936,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "122"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "123"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 459,
											"end": 17936,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "123"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "RETURN",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "51"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "128"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 459,
											"end": 17936,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "128"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "129"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 459,
											"end": 17936,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "129"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "A4"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3399,
											"end": 3454,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "132"
										},
										{
											"begin": 3419,
											"end": 3434,
											"name": "TIMESTAMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "C4"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 3407,
											"end": 3434,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 3407,
											"end": 3434,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3399,
											"end": 3454,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "13"
										},
										{
											"begin": 3399,
											"end": 3454,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3399,
											"end": 3454,
											"name": "tag",
											"source": 10,
											"value": "132"
										},
										{
											"begin": 3399,
											"end": 3454,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 3688,
											"end": 3733,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "133"
										},
										{
											"begin": 3696,
											"end": 3712,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 3696,
											"end": 3712,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 3696,
											"end": 3712,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 3696,
											"end": 3712,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3688,
											"end": 3733,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "17"
										},
										{
											"begin": 3688,
											"end": 3733,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3688,
											"end": 3733,
											"name": "tag",
											"source": 10,
											"value": "133"
										},
										{
											"begin": 3688,
											"end": 3733,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8029,
											"end": 8042,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 8029,
											"end": 8042,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "134"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 8155,
											"end": 8182,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "136"
										},
										{
											"begin": 8155,
											"end": 8182,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 8155,
											"end": 8182,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "23"
										},
										{
											"begin": 8155,
											"end": 8182,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8155,
											"end": 8182,
											"name": "tag",
											"source": 10,
											"value": "136"
										},
										{
											"begin": 8155,
											"end": 8182,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 8212,
											"end": 8217,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP7",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 8345,
											"end": 8358,
											"name": "SWAP9",
											"source": 10
										},
										{
											"begin": 8345,
											"end": 8358,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP8",
											"source": 10
										},
										{
											"begin": 2908,
											"end": 2920,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 15425,
											"end": 15445,
											"name": "SWAP8",
											"source": 10
										},
										{
											"begin": 15481,
											"end": 15518,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "137"
										},
										{
											"begin": 15424,
											"end": 15461,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "138"
										},
										{
											"begin": 15425,
											"end": 15445,
											"name": "DUP11",
											"source": 10
										},
										{
											"begin": 15425,
											"end": 15445,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "104"
										},
										{
											"begin": 15425,
											"end": 15445,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 15425,
											"end": 15445,
											"name": "DUP10",
											"source": 10
										},
										{
											"begin": 15425,
											"end": 15445,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 15425,
											"end": 15445,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 15424,
											"end": 15461,
											"name": "tag",
											"source": 10,
											"value": "138"
										},
										{
											"begin": 15424,
											"end": 15461,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15482,
											"end": 15502,
											"name": "SWAP10",
											"source": 10
										},
										{
											"begin": 15482,
											"end": 15502,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "104"
										},
										{
											"begin": 15482,
											"end": 15502,
											"name": "DUP13",
											"source": 10
										},
										{
											"begin": 15482,
											"end": 15502,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 15482,
											"end": 15502,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 15482,
											"end": 15502,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 15481,
											"end": 15518,
											"name": "tag",
											"source": 10,
											"value": "137"
										},
										{
											"begin": 15481,
											"end": 15518,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP8",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 8564,
											"end": 8585,
											"name": "DUP11",
											"source": 10
										},
										{
											"begin": 8564,
											"end": 8585,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 8564,
											"end": 8585,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 8564,
											"end": 8610,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8564,
											"end": 8610,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "141"
										},
										{
											"begin": 8564,
											"end": 8610,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "142"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8556,
											"end": 8626,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "143"
										},
										{
											"begin": 8556,
											"end": 8626,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8556,
											"end": 8626,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "18"
										},
										{
											"begin": 8556,
											"end": 8626,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8556,
											"end": 8626,
											"name": "tag",
											"source": 10,
											"value": "143"
										},
										{
											"begin": 8556,
											"end": 8626,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8700,
											"end": 8710,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 8035,
											"end": 8056,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 8031,
											"end": 8120,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "144"
										},
										{
											"begin": 8031,
											"end": 8120,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 8700,
											"end": 8710,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 6321,
											"end": 6340,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 6321,
											"end": 6340,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6321,
											"end": 6340,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 6317,
											"end": 6432,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "146"
										},
										{
											"begin": 6317,
											"end": 6432,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 8901,
											"end": 8919,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "148"
										},
										{
											"begin": 8700,
											"end": 8710,
											"name": "DUP12",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 8700,
											"end": 8710,
											"name": "SWAP14",
											"source": 10
										},
										{
											"begin": 8700,
											"end": 8710,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 16840,
											"end": 16846,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "149"
										},
										{
											"begin": 8700,
											"end": 8710,
											"name": "DUP14",
											"source": 10
										},
										{
											"begin": 8700,
											"end": 8710,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 16840,
											"end": 16846,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "150"
										},
										{
											"begin": 8700,
											"end": 8710,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 8921,
											"end": 8939,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "151"
										},
										{
											"begin": 8700,
											"end": 8710,
											"name": "SWAP14",
											"source": 10
										},
										{
											"begin": 8700,
											"end": 8710,
											"name": "SWAP13",
											"source": 10
										},
										{
											"begin": 8700,
											"end": 8710,
											"name": "SWAP11",
											"source": 10
										},
										{
											"begin": 8700,
											"end": 8710,
											"name": "DUP16",
											"source": 10
										},
										{
											"begin": 8700,
											"end": 8710,
											"name": "SWAP11",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8700,
											"end": 8710,
											"name": "DUP13",
											"source": 10
										},
										{
											"begin": 8921,
											"end": 8939,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "93"
										},
										{
											"begin": 8700,
											"end": 8710,
											"name": "SWAP14",
											"source": 10
										},
										{
											"begin": 8700,
											"end": 8710,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 8700,
											"end": 8710,
											"name": "SWAP14",
											"source": 10
										},
										{
											"begin": 8700,
											"end": 8710,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 2908,
											"end": 2920,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 2908,
											"end": 2920,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7064,
											"end": 7089,
											"name": "PUSH",
											"source": 4,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 8700,
											"end": 8710,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 7064,
											"end": 7089,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 7064,
											"end": 7089,
											"name": "LOG3",
											"source": 4
										},
										{
											"begin": 16840,
											"end": 16846,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "21"
										},
										{
											"begin": 16840,
											"end": 16846,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 16840,
											"end": 16846,
											"name": "tag",
											"source": 10,
											"value": "150"
										},
										{
											"begin": 16840,
											"end": 16846,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP10",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 16840,
											"end": 16846,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "21"
										},
										{
											"begin": 16840,
											"end": 16846,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 16840,
											"end": 16846,
											"name": "tag",
											"source": 10,
											"value": "149"
										},
										{
											"begin": 16840,
											"end": 16846,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8901,
											"end": 8919,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "16"
										},
										{
											"begin": 8901,
											"end": 8919,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8901,
											"end": 8919,
											"name": "tag",
											"source": 10,
											"value": "148"
										},
										{
											"begin": 8901,
											"end": 8919,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8921,
											"end": 8939,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 8921,
											"end": 8939,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "16"
										},
										{
											"begin": 8921,
											"end": 8939,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8921,
											"end": 8939,
											"name": "tag",
											"source": 10,
											"value": "151"
										},
										{
											"begin": 8921,
											"end": 8939,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8956,
											"end": 9029,
											"name": "PUSH",
											"source": 10,
											"value": "D765E08EEF31C0983ECCA03ECD166297AC485ECD5DD69E291C848F0A020333C1"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 8700,
											"end": 8710,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 8956,
											"end": 9029,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "153"
										},
										{
											"begin": 8700,
											"end": 8710,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 8956,
											"end": 9029,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 8956,
											"end": 9029,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 8956,
											"end": 9029,
											"name": "DUP11",
											"source": 10
										},
										{
											"begin": 8956,
											"end": 9029,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP6",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8956,
											"end": 9029,
											"name": "tag",
											"source": 10,
											"value": "153"
										},
										{
											"begin": 8956,
											"end": 9029,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 8956,
											"end": 9029,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 8956,
											"end": 9029,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 8956,
											"end": 9029,
											"name": "LOG4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "RETURN",
											"source": 10
										},
										{
											"begin": 6317,
											"end": 6432,
											"name": "tag",
											"source": 4,
											"value": "146"
										},
										{
											"begin": 6317,
											"end": 6432,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6367,
											"end": 6417,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 6367,
											"end": 6417,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6367,
											"end": 6417,
											"name": "PUSH",
											"source": 4,
											"value": "391434E3"
										},
										{
											"begin": 6367,
											"end": 6417,
											"name": "PUSH",
											"source": 4,
											"value": "E2"
										},
										{
											"begin": 6367,
											"end": 6417,
											"name": "SHL",
											"source": 4
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6367,
											"end": 6417,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 8700,
											"end": 8710,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 6367,
											"end": 6417,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 8031,
											"end": 8120,
											"name": "tag",
											"source": 4,
											"value": "144"
										},
										{
											"begin": 8031,
											"end": 8120,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 8079,
											"end": 8109,
											"name": "PUSH",
											"source": 4,
											"value": "4B637E8F"
										},
										{
											"begin": 8079,
											"end": 8109,
											"name": "PUSH",
											"source": 4,
											"value": "E1"
										},
										{
											"begin": 8079,
											"end": 8109,
											"name": "SHL",
											"source": 4
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8079,
											"end": 8109,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 8079,
											"end": 8109,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 8564,
											"end": 8610,
											"name": "tag",
											"source": 10,
											"value": "141"
										},
										{
											"begin": 8564,
											"end": 8610,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 8589,
											"end": 8610,
											"name": "DUP10",
											"source": 10
										},
										{
											"begin": 8589,
											"end": 8610,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 8589,
											"end": 8610,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 8564,
											"end": 8610,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "142"
										},
										{
											"begin": 8564,
											"end": 8610,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "134"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "496E76616C6964206C6971756964697479"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "78"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "49"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "158"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 459,
											"end": 17936,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "158"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "159"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 459,
											"end": 17936,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "159"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 11420,
											"end": 11465,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "160"
										},
										{
											"begin": 11420,
											"end": 11465,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 11428,
											"end": 11444,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 11428,
											"end": 11444,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 11428,
											"end": 11444,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 11420,
											"end": 11465,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "17"
										},
										{
											"begin": 11420,
											"end": 11465,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 11420,
											"end": 11465,
											"name": "tag",
											"source": 10,
											"value": "160"
										},
										{
											"begin": 11420,
											"end": 11465,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 11503,
											"end": 11508,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 11503,
											"end": 11524,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "161"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 459,
											"end": 17936,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "161"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11534,
											"end": 11597,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "162"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 11542,
											"end": 11559,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 11542,
											"end": 11559,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 11542,
											"end": 11580,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 11542,
											"end": 11580,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 11542,
											"end": 11580,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "163"
										},
										{
											"begin": 11542,
											"end": 11580,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "164"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11534,
											"end": 11597,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11534,
											"end": 11597,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 11534,
											"end": 11597,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 11534,
											"end": 11597,
											"name": "tag",
											"source": 10,
											"value": "162"
										},
										{
											"begin": 11534,
											"end": 11597,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 11641,
											"end": 11645,
											"name": "PUSH",
											"source": 10,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 11641,
											"end": 11645,
											"name": "PUSH",
											"source": 10,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "82"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 11624,
											"end": 11662,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "167"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 11624,
											"end": 11662,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 11624,
											"end": 11662,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 11624,
											"end": 11662,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 11624,
											"end": 11662,
											"name": "tag",
											"source": 10,
											"value": "167"
										},
										{
											"begin": 11624,
											"end": 11662,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "RETURN",
											"source": 10
										},
										{
											"begin": 11542,
											"end": 11580,
											"name": "tag",
											"source": 10,
											"value": "163"
										},
										{
											"begin": 11542,
											"end": 11580,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 11563,
											"end": 11580,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 11563,
											"end": 11580,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 11563,
											"end": 11580,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 11563,
											"end": 11580,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 11542,
											"end": 11580,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 11542,
											"end": 11580,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "164"
										},
										{
											"begin": 11542,
											"end": 11580,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "47"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3440,
											"end": 3445,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "172"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "173"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 459,
											"end": 17936,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "173"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 735,
											"end": 745,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 3440,
											"end": 3445,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "19"
										},
										{
											"begin": 3440,
											"end": 3445,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 3440,
											"end": 3445,
											"name": "tag",
											"source": 4,
											"value": "172"
										},
										{
											"begin": 3440,
											"end": 3445,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "RETURN",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "45"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "178"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "179"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "180"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "182"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "184"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "185"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "95"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "187"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "12"
										},
										{
											"begin": 459,
											"end": 17936,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "187"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 459,
											"end": 17936,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "184"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "188"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "189"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "187"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "185"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "189"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "188"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "182"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "187"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "185"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "180"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B71"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "22"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "178"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "7F"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "179"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "43"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "195"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 459,
											"end": 17936,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "195"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "196"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 459,
											"end": 17936,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "196"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1232,
											"end": 1289,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 1232,
											"end": 1289,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 1232,
											"end": 1289,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 1232,
											"end": 1289,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1232,
											"end": 1289,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "RETURN",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "41"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "201"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 459,
											"end": 17936,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "201"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "RETURN",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "39"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "23"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 3399,
											"end": 3454,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "216"
										},
										{
											"begin": 3419,
											"end": 3434,
											"name": "TIMESTAMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "84"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 3407,
											"end": 3434,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 3407,
											"end": 3434,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 3399,
											"end": 3454,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "13"
										},
										{
											"begin": 3399,
											"end": 3454,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 3399,
											"end": 3454,
											"name": "tag",
											"source": 10,
											"value": "216"
										},
										{
											"begin": 3399,
											"end": 3454,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9815,
											"end": 9816,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 9800,
											"end": 9816,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 9800,
											"end": 9816,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "217"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "219"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "12"
										},
										{
											"begin": 459,
											"end": 17936,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "219"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 9815,
											"end": 9816,
											"name": "PUSH",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATACOPY",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "225"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "225"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 9967,
											"end": 9974,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "224"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9967,
											"end": 9974,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "15"
										},
										{
											"begin": 9967,
											"end": 9974,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 9967,
											"end": 9974,
											"name": "tag",
											"source": 10,
											"value": "224"
										},
										{
											"begin": 9967,
											"end": 9974,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "225"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 9976,
											"end": 9983,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "227"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 9976,
											"end": 9983,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "15"
										},
										{
											"begin": 9976,
											"end": 9983,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 9976,
											"end": 9983,
											"name": "tag",
											"source": 10,
											"value": "227"
										},
										{
											"begin": 9976,
											"end": 9983,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 10153,
											"end": 10166,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 10153,
											"end": 10166,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 10193,
											"end": 10205,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10185,
											"end": 10224,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "228"
										},
										{
											"begin": 10193,
											"end": 10205,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 10193,
											"end": 10205,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 10193,
											"end": 10205,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 10185,
											"end": 10224,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 10185,
											"end": 10224,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10185,
											"end": 10224,
											"name": "tag",
											"source": 10,
											"value": "228"
										},
										{
											"begin": 10185,
											"end": 10224,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10242,
											"end": 10255,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 10242,
											"end": 10255,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 10242,
											"end": 10255,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 10242,
											"end": 10273,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 10242,
											"end": 10273,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "229"
										},
										{
											"begin": 10242,
											"end": 10273,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "230"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10234,
											"end": 10290,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "231"
										},
										{
											"begin": 10234,
											"end": 10290,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10234,
											"end": 10290,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 10234,
											"end": 10290,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10234,
											"end": 10290,
											"name": "tag",
											"source": 10,
											"value": "231"
										},
										{
											"begin": 10234,
											"end": 10290,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10391,
											"end": 10436,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "232"
										},
										{
											"begin": 10391,
											"end": 10436,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 10391,
											"end": 10436,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 10391,
											"end": 10436,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 10391,
											"end": 10436,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "10"
										},
										{
											"begin": 10391,
											"end": 10436,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10391,
											"end": 10436,
											"name": "tag",
											"source": 10,
											"value": "232"
										},
										{
											"begin": 10391,
											"end": 10436,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10378,
											"end": 10436,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "233"
										},
										{
											"begin": 10378,
											"end": 10436,
											"name": "DUP11",
											"source": 10
										},
										{
											"begin": 10378,
											"end": 10436,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "14"
										},
										{
											"begin": 10378,
											"end": 10436,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10378,
											"end": 10436,
											"name": "tag",
											"source": 10,
											"value": "233"
										},
										{
											"begin": 10378,
											"end": 10436,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 10454,
											"end": 10464,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "234"
										},
										{
											"begin": 10454,
											"end": 10464,
											"name": "DUP11",
											"source": 10
										},
										{
											"begin": 10454,
											"end": 10464,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "14"
										},
										{
											"begin": 10454,
											"end": 10464,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10454,
											"end": 10464,
											"name": "tag",
											"source": 10,
											"value": "234"
										},
										{
											"begin": 10454,
											"end": 10464,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 10454,
											"end": 10480,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "235"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 10790,
											"end": 10813,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "93"
										},
										{
											"begin": 10768,
											"end": 10788,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "238"
										},
										{
											"begin": 10603,
											"end": 10607,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 10790,
											"end": 10813,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "239"
										},
										{
											"begin": 10603,
											"end": 10607,
											"name": "SWAP7",
											"source": 10
										},
										{
											"begin": 10663,
											"end": 10673,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "100"
										},
										{
											"begin": 10603,
											"end": 10607,
											"name": "DUP14",
											"source": 10
										},
										{
											"begin": 10603,
											"end": 10607,
											"name": "SWAP13",
											"source": 10
										},
										{
											"begin": 10603,
											"end": 10607,
											"name": "SWAP14",
											"source": 10
										},
										{
											"begin": 10603,
											"end": 10607,
											"name": "SWAP12",
											"source": 10
										},
										{
											"begin": 10610,
											"end": 10618,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "241"
										},
										{
											"begin": 10603,
											"end": 10607,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 10603,
											"end": 10607,
											"name": "DUP14",
											"source": 10
										},
										{
											"begin": 10603,
											"end": 10607,
											"name": "ADDRESS",
											"source": 10
										},
										{
											"begin": 10583,
											"end": 10593,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10583,
											"end": 10593,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 10610,
											"end": 10618,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10610,
											"end": 10618,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 10610,
											"end": 10618,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10610,
											"end": 10618,
											"name": "tag",
											"source": 10,
											"value": "241"
										},
										{
											"begin": 10610,
											"end": 10618,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP8",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP13",
											"source": 10
										},
										{
											"begin": 10663,
											"end": 10673,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "242"
										},
										{
											"begin": 10663,
											"end": 10673,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10663,
											"end": 10673,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "14"
										},
										{
											"begin": 10663,
											"end": 10673,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10663,
											"end": 10673,
											"name": "tag",
											"source": 10,
											"value": "242"
										},
										{
											"begin": 10663,
											"end": 10673,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 10663,
											"end": 10673,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10663,
											"end": 10673,
											"name": "DUP14",
											"source": 10
										},
										{
											"begin": 10663,
											"end": 10673,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "21"
										},
										{
											"begin": 10663,
											"end": 10673,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10768,
											"end": 10788,
											"name": "tag",
											"source": 10,
											"value": "238"
										},
										{
											"begin": 10768,
											"end": 10788,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10803,
											"end": 10813,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 10803,
											"end": 10813,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "243"
										},
										{
											"begin": 10803,
											"end": 10813,
											"name": "DUP11",
											"source": 10
										},
										{
											"begin": 10803,
											"end": 10813,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "14"
										},
										{
											"begin": 10803,
											"end": 10813,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10803,
											"end": 10813,
											"name": "tag",
											"source": 10,
											"value": "243"
										},
										{
											"begin": 10803,
											"end": 10813,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 10790,
											"end": 10813,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 10790,
											"end": 10813,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "16"
										},
										{
											"begin": 10790,
											"end": 10813,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10790,
											"end": 10813,
											"name": "tag",
											"source": 10,
											"value": "239"
										},
										{
											"begin": 10790,
											"end": 10813,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 10876,
											"end": 10886,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "244"
										},
										{
											"begin": 10876,
											"end": 10886,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 10876,
											"end": 10886,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "14"
										},
										{
											"begin": 10876,
											"end": 10886,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 10876,
											"end": 10886,
											"name": "tag",
											"source": 10,
											"value": "244"
										},
										{
											"begin": 10876,
											"end": 10886,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 10830,
											"end": 10887,
											"name": "PUSH",
											"source": 10,
											"value": "CD3829A3813DC3CDD188FD3D01DCF3268C16BE2FDD2DD21D0665418816E46062"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 10583,
											"end": 10593,
											"name": "CALLER",
											"source": 10
										},
										{
											"begin": 10830,
											"end": 10887,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 10830,
											"end": 10887,
											"name": "LOG4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "245"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "246"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "RETURN",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "246"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "245"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "235"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "13"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "125B9CDD59999A58DA595B9D081BDD5D1C1D5D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6A"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 10242,
											"end": 10273,
											"name": "tag",
											"source": 10,
											"value": "229"
										},
										{
											"begin": 10242,
											"end": 10273,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10259,
											"end": 10273,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 10259,
											"end": 10273,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 10259,
											"end": 10273,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 10242,
											"end": 10273,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "230"
										},
										{
											"begin": 10242,
											"end": 10273,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "225"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B71"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "32"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "217"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "C"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "92DCECC2D8D2C840E0C2E8D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "37"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 2761,
											"end": 2763,
											"name": "PUSH",
											"source": 4,
											"value": "12"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "RETURN",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "35"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "256"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 459,
											"end": 17936,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "256"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "257"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 459,
											"end": 17936,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "257"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 10561,
											"end": 10597,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10561,
											"end": 10597,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 10557,
											"end": 10866,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "258"
										},
										{
											"begin": 10557,
											"end": 10866,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "259"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 4967,
											"end": 4972,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4967,
											"end": 4972,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "172"
										},
										{
											"begin": 4967,
											"end": 4972,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": 4967,
											"end": 4972,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4967,
											"end": 4972,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "19"
										},
										{
											"begin": 4967,
											"end": 4972,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 10557,
											"end": 10866,
											"name": "tag",
											"source": 4,
											"value": "258"
										},
										{
											"begin": 10557,
											"end": 10866,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10617,
											"end": 10641,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 10617,
											"end": 10641,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 10617,
											"end": 10641,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 10613,
											"end": 10743,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "261"
										},
										{
											"begin": 10613,
											"end": 10743,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 9794,
											"end": 9813,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 9794,
											"end": 9813,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 9790,
											"end": 9879,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "263"
										},
										{
											"begin": 9790,
											"end": 9879,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 9892,
											"end": 9913,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 9888,
											"end": 9978,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "265"
										},
										{
											"begin": 9888,
											"end": 9978,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 4967,
											"end": 4972,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "172"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 10557,
											"end": 10866,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 10557,
											"end": 10866,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "259"
										},
										{
											"begin": 10557,
											"end": 10866,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 9888,
											"end": 9978,
											"name": "tag",
											"source": 4,
											"value": "265"
										},
										{
											"begin": 9888,
											"end": 9978,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9936,
											"end": 9967,
											"name": "PUSH",
											"source": 4,
											"value": "4A1406B1"
										},
										{
											"begin": 9936,
											"end": 9967,
											"name": "PUSH",
											"source": 4,
											"value": "E1"
										},
										{
											"begin": 9936,
											"end": 9967,
											"name": "SHL",
											"source": 4
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9936,
											"end": 9967,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9936,
											"end": 9967,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 9790,
											"end": 9879,
											"name": "tag",
											"source": 4,
											"value": "263"
										},
										{
											"begin": 9790,
											"end": 9879,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 9836,
											"end": 9868,
											"name": "PUSH",
											"source": 4,
											"value": "E602DF05"
										},
										{
											"begin": 9836,
											"end": 9868,
											"name": "PUSH",
											"source": 4,
											"value": "E0"
										},
										{
											"begin": 9836,
											"end": 9868,
											"name": "SHL",
											"source": 4
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9836,
											"end": 9868,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 9836,
											"end": 9868,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 10613,
											"end": 10743,
											"name": "tag",
											"source": 4,
											"value": "261"
										},
										{
											"begin": 10613,
											"end": 10743,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 10668,
											"end": 10728,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 10668,
											"end": 10728,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 10668,
											"end": 10728,
											"name": "PUSH",
											"source": 4,
											"value": "7DC7A0D9"
										},
										{
											"begin": 10668,
											"end": 10728,
											"name": "PUSH",
											"source": 4,
											"value": "E1"
										},
										{
											"begin": 10668,
											"end": 10728,
											"name": "SHL",
											"source": 4
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 10668,
											"end": 10728,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 10668,
											"end": 10728,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "33"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 2908,
											"end": 2920,
											"name": "PUSH",
											"source": 4,
											"value": "2"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "RETURN",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "31"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "275"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 459,
											"end": 17936,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "275"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 735,
											"end": 745,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 9794,
											"end": 9813,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 9790,
											"end": 9879,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "263"
										},
										{
											"begin": 9790,
											"end": 9879,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9892,
											"end": 9913,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 9892,
											"end": 9913,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 9888,
											"end": 9978,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "265"
										},
										{
											"begin": 9888,
											"end": 9978,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 10066,
											"end": 10097,
											"name": "PUSH",
											"source": 4,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 8
										},
										{
											"begin": 10066,
											"end": 10097,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 10066,
											"end": 10097,
											"name": "LOG3",
											"source": 4
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "RETURN",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "29"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1837,
											"end": 1842,
											"name": "PUSH",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SHR",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "284"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "285"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "180"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "182"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "290"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "95"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "187"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "12"
										},
										{
											"begin": 459,
											"end": 17936,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "290"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "POP",
											"source": 10
										},
										{
											"begin": 1837,
											"end": 1842,
											"name": "PUSH",
											"source": 4,
											"value": "3"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "C2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "294"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "295"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "187"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "185"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "295"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP9",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "294"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "284"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "7F"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "285"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "27"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLVALUE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "60"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATASIZE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SLT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "167"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "10"
										},
										{
											"begin": 459,
											"end": 17936,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MCOPY",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "2"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "3"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "306"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "306"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "E"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "125B9D985B1A5908185B5BDD5B9D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "92"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "308"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "308"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "C"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E6F206C6971756964697479"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MUL",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "EQ",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "82"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "8"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "82"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "314"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DIV",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "314"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B71"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "12"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 12058,
											"end": 12417,
											"name": "tag",
											"source": 10,
											"value": "10"
										},
										{
											"begin": 12058,
											"end": 12417,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12389,
											"end": 12409,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "316"
										},
										{
											"begin": 12058,
											"end": 12417,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 12363,
											"end": 12384,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "317"
										},
										{
											"begin": 12362,
											"end": 12410,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "318"
										},
										{
											"begin": 12058,
											"end": 12417,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 12226,
											"end": 12265,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "319"
										},
										{
											"begin": 12234,
											"end": 12246,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 12234,
											"end": 12246,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 12234,
											"end": 12246,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 12226,
											"end": 12265,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 12226,
											"end": 12265,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 12226,
											"end": 12265,
											"name": "tag",
											"source": 10,
											"value": "319"
										},
										{
											"begin": 12226,
											"end": 12265,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12283,
											"end": 12296,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 12283,
											"end": 12296,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 12283,
											"end": 12296,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 12283,
											"end": 12314,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 12283,
											"end": 12314,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "320"
										},
										{
											"begin": 12283,
											"end": 12314,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 12058,
											"end": 12417,
											"name": "tag",
											"source": 10,
											"value": "321"
										},
										{
											"begin": 12058,
											"end": 12417,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12275,
											"end": 12331,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "322"
										},
										{
											"begin": 12275,
											"end": 12331,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 12275,
											"end": 12331,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "6"
										},
										{
											"begin": 12275,
											"end": 12331,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 12275,
											"end": 12331,
											"name": "tag",
											"source": 10,
											"value": "322"
										},
										{
											"begin": 12275,
											"end": 12331,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12363,
											"end": 12384,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 12363,
											"end": 12384,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 12363,
											"end": 12384,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 12363,
											"end": 12384,
											"name": "tag",
											"source": 10,
											"value": "317"
										},
										{
											"begin": 12363,
											"end": 12384,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12389,
											"end": 12409,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 12389,
											"end": 12409,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "8"
										},
										{
											"begin": 12389,
											"end": 12409,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 12389,
											"end": 12409,
											"name": "tag",
											"source": 10,
											"value": "316"
										},
										{
											"begin": 12389,
											"end": 12409,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12362,
											"end": 12410,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 12362,
											"end": 12410,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "9"
										},
										{
											"begin": 12362,
											"end": 12410,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 12362,
											"end": 12410,
											"name": "tag",
											"source": 10,
											"value": "318"
										},
										{
											"begin": 12362,
											"end": 12410,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12058,
											"end": 12417,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 12058,
											"end": 12417,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 12283,
											"end": 12314,
											"name": "tag",
											"source": 10,
											"value": "320"
										},
										{
											"begin": 12283,
											"end": 12314,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 12300,
											"end": 12314,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 12300,
											"end": 12314,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 12300,
											"end": 12314,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 12283,
											"end": 12314,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "321"
										},
										{
											"begin": 12283,
											"end": 12314,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "323"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "323"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "4E487B71"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "E0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "41"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "12"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "1F"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "NOT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "OR",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "323"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "13"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "327"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "327"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "F"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "111958591B1A5B99481C185CDCD959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "8A"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "14"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 9981,
											"end": 9982,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "225"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "15"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "CALLDATALOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "63"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "16"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "GT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "82"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "17"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "335"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "335"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "10"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4964656E746963616C20746F6B656E73"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "18"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "337"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "337"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "4"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "B"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "135A5B881B9BDD081B595D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "AA"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "REVERT",
											"source": 10
										},
										{
											"begin": 5374,
											"end": 5674,
											"name": "tag",
											"source": 4,
											"value": "19"
										},
										{
											"begin": 5374,
											"end": 5674,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 5457,
											"end": 5475,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5457,
											"end": 5475,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 5453,
											"end": 5539,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "144"
										},
										{
											"begin": 5453,
											"end": 5539,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 5552,
											"end": 5568,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5552,
											"end": 5568,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 5548,
											"end": 5634,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "91"
										},
										{
											"begin": 5548,
											"end": 5634,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 5473,
											"end": 5474,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5473,
											"end": 5474,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 5473,
											"end": 5474,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 6321,
											"end": 6340,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6321,
											"end": 6340,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6321,
											"end": 6340,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 6317,
											"end": 6432,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "343"
										},
										{
											"begin": 6317,
											"end": 6432,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 7064,
											"end": 7089,
											"name": "PUSH",
											"source": 4,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 5473,
											"end": 5474,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5473,
											"end": 5474,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 5473,
											"end": 5474,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP5",
											"source": 10
										},
										{
											"begin": 5473,
											"end": 5474,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 5473,
											"end": 5474,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 5473,
											"end": 5474,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 7064,
											"end": 7089,
											"name": "LOG3",
											"source": 4
										},
										{
											"begin": 5374,
											"end": 5674,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 6317,
											"end": 6432,
											"name": "tag",
											"source": 4,
											"value": "343"
										},
										{
											"begin": 6317,
											"end": 6432,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6367,
											"end": 6417,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 6367,
											"end": 6417,
											"name": "PUSH",
											"source": 4,
											"value": "391434E3"
										},
										{
											"begin": 6367,
											"end": 6417,
											"name": "PUSH",
											"source": 4,
											"value": "E2"
										},
										{
											"begin": 6367,
											"end": 6417,
											"name": "SHL",
											"source": 4
										},
										{
											"begin": 5473,
											"end": 5474,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6367,
											"end": 6417,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 6367,
											"end": 6417,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 5473,
											"end": 5474,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 6367,
											"end": 6417,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 1618,
											"end": 1806,
											"name": "tag",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1618,
											"end": 1806,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "23B872DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "64"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "345"
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "346"
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "PUSH",
											"source": 7,
											"value": "84"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 1745,
											"end": 1798,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "tag",
											"source": 7,
											"value": "346"
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 1745,
											"end": 1798,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "tag",
											"source": 7,
											"value": "345"
										},
										{
											"begin": 1745,
											"end": 1798,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1618,
											"end": 1806,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1219,
											"end": 1379,
											"name": "tag",
											"source": 7,
											"value": "21"
										},
										{
											"begin": 1219,
											"end": 1379,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "44"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "345"
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "346"
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "PUSH",
											"source": 7,
											"value": "64"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 1328,
											"end": 1371,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 1328,
											"end": 1371,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 15762,
											"end": 15979,
											"name": "tag",
											"source": 10,
											"value": "22"
										},
										{
											"begin": 15762,
											"end": 15979,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 15762,
											"end": 15979,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 15762,
											"end": 15979,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 15762,
											"end": 15979,
											"name": "SWAP4",
											"source": 10
										},
										{
											"begin": 15762,
											"end": 15979,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP5",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "349"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP7",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "11"
										},
										{
											"begin": 459,
											"end": 17936,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "tag",
											"source": 10,
											"value": "349"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 15942,
											"end": 15972,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 15942,
											"end": 15972,
											"name": "DUP6",
											"source": 10
										},
										{
											"begin": 15942,
											"end": 15972,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 15918,
											"end": 15923,
											"name": "PUSH",
											"source": 10,
											"value": "5"
										},
										{
											"begin": 15942,
											"end": 15972,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 15918,
											"end": 15939,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "A0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SHL",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SUB",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP4",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MLOAD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 15762,
											"end": 15979,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 12781,
											"end": 13006,
											"name": "tag",
											"source": 10,
											"value": "23"
										},
										{
											"begin": 12781,
											"end": 13006,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP3",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 12946,
											"end": 12961,
											"name": "LT",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "ISZERO",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH [tag]",
											"source": 10,
											"value": "350"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "JUMPI",
											"source": 10
										},
										{
											"begin": 12781,
											"end": 13006,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 12781,
											"end": 13006,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 12946,
											"end": 12999,
											"name": "tag",
											"source": 10,
											"value": "350"
										},
										{
											"begin": 12946,
											"end": 12999,
											"name": "JUMPDEST",
											"source": 10
										},
										{
											"begin": 12927,
											"end": 12999,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 12781,
											"end": 13006,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 12781,
											"end": 13006,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 8370,
											"end": 9090,
											"name": "tag",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 8370,
											"end": 9090,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8370,
											"end": 9090,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 8370,
											"end": 9090,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "GAS",
											"source": 7
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "CALL",
											"source": 7
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "353"
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 8942,
											"end": 8957,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "355"
										},
										{
											"begin": 8942,
											"end": 8957,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 8960,
											"end": 8986,
											"name": "EXTCODESIZE",
											"source": 7
										},
										{
											"begin": 8960,
											"end": 8991,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 8942,
											"end": 9010,
											"name": "tag",
											"source": 7,
											"value": "357"
										},
										{
											"begin": 8942,
											"end": 9010,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8938,
											"end": 9084,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "358"
										},
										{
											"begin": 8938,
											"end": 9084,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 8370,
											"end": 9090,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 8370,
											"end": 9090,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 8938,
											"end": 9084,
											"name": "tag",
											"source": 7,
											"value": "358"
										},
										{
											"begin": 8938,
											"end": 9084,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "5274AFE7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 9033,
											"end": 9073,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 9033,
											"end": 9073,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 9033,
											"end": 9073,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 9033,
											"end": 9073,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "PUSH",
											"source": 10,
											"value": "24"
										},
										{
											"begin": 459,
											"end": 17936,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 9033,
											"end": 9073,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 8942,
											"end": 9010,
											"name": "tag",
											"source": 7,
											"value": "355"
										},
										{
											"begin": 8942,
											"end": 9010,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 9009,
											"end": 9010,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 8994,
											"end": 9010,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 8994,
											"end": 9010,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 8942,
											"end": 9010,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "357"
										},
										{
											"begin": 8942,
											"end": 9010,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "tag",
											"source": 7,
											"value": "353"
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "RETURNDATACOPY",
											"source": 7
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 8507,
											"end": 8928,
											"name": "REVERT",
											"source": 7
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts/interfaces/IERC1363.sol",
								"@openzeppelin/contracts/interfaces/IERC165.sol",
								"@openzeppelin/contracts/interfaces/IERC20.sol",
								"@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
								"@openzeppelin/contracts/utils/Context.sol",
								"@openzeppelin/contracts/utils/introspection/IERC165.sol",
								"contracts/SimpleSwap.sol",
								"contracts/interfaces/ISimpleSwap.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": "e8e33700",
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"getAmountOut(uint256,uint256,uint256)": "054d50d4",
							"getPrice(address,address)": "ac41865a",
							"name()": "06fdde03",
							"pools(address,address)": "901754d7",
							"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": "baa2abde",
							"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": "38ed1739",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Francisco L\\u00f3pez G.\",\"details\":\"Implements a basic Uniswap V2-style decentralized exchange with: - Liquidity pool creation - Token swapping functionality - LP (Liquidity Provider) token issuance\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"LiquidityAdded(address,address,address,uint256,uint256,uint256)\":{\"params\":{\"amountA\":\"Amount of first token added\",\"amountB\":\"Amount of second token added\",\"liquidity\":\"Amount of LP tokens minted\",\"provider\":\"Address providing the liquidity\",\"tokenA\":\"First token in pair\",\"tokenB\":\"Second token in pair\"}},\"LiquidityRemoved(address,address,address,uint256,uint256,uint256)\":{\"params\":{\"amountA\":\"Amount of first token withdrawn\",\"amountB\":\"Amount of second token withdrawn\",\"liquidity\":\"Amount of LP tokens burned\",\"provider\":\"Address removing the liquidity\",\"tokenA\":\"First token in pair\",\"tokenB\":\"Second token in pair\"}},\"Swap(address,address,address,uint256,uint256)\":{\"params\":{\"amountIn\":\"Amount of input tokens\",\"amountOut\":\"Amount of output tokens\",\"sender\":\"Address initiating the swap\",\"tokenIn\":\"Input token address\",\"tokenOut\":\"Output token address\"}},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)\":{\"details\":\"For initial deposit, uses square root of token amount productFor subsequent deposits, maintains existing reserve ratio\",\"params\":{\"amountADesired\":\"Desired amount of first token to deposit\",\"amountAMin\":\"Minimum acceptable amount of first token\",\"amountBDesired\":\"Desired amount of second token to deposit\",\"amountBMin\":\"Minimum acceptable amount of second token\",\"deadline\":\"Transaction expiry timestamp\",\"to\":\"Address to receive LP tokens\",\"tokenA\":\"First token address\",\"tokenB\":\"Second token address\"},\"returns\":{\"amountA\":\"Actual amount of first token deposited\",\"amountB\":\"Actual amount of second token deposited\",\"liquidity\":\"Amount of LP tokens minted\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes contract with LP token name and symbol\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"getAmountOut(uint256,uint256,uint256)\":{\"details\":\"Uses constant product formula: amountOut = (amountIn * reserveOut) / (reserveIn + amountIn)\",\"params\":{\"amountIn\":\"Input token amount\",\"reserveIn\":\"Reserve of input token\",\"reserveOut\":\"Reserve of output token\"},\"returns\":{\"amountOut\":\"Expected output token amount\"}},\"getPrice(address,address)\":{\"params\":{\"tokenA\":\"First token address\",\"tokenB\":\"Second token address\"},\"returns\":{\"price\":\"Price of tokenA in terms of tokenB (with 18 decimals)\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)\":{\"params\":{\"amountAMin\":\"Minimum acceptable amount of first token to receive\",\"amountBMin\":\"Minimum acceptable amount of second token to receive\",\"deadline\":\"Transaction expiry timestamp\",\"liquidity\":\"Amount of LP tokens to burn\",\"to\":\"Address to receive withdrawn tokens\",\"tokenA\":\"First token address\",\"tokenB\":\"Second token address\"},\"returns\":{\"amountA\":\"Amount of first token withdrawn\",\"amountB\":\"Amount of second token withdrawn\"}},\"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)\":{\"params\":{\"amountIn\":\"Exact amount of input tokens\",\"amountOutMin\":\"Minimum acceptable amount of output tokens\",\"deadline\":\"Transaction expiry timestamp\",\"path\":\"Array containing [inputToken, outputToken] addresses\",\"to\":\"Address to receive output tokens\"},\"returns\":{\"amounts\":\"Array containing [inputAmount, outputAmount]\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Skips emitting an {Approval} event indicating an allowance update. This is not required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve]. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"stateVariables\":{\"pools\":{\"details\":\"pools[token0][token1] stores reserves for sorted token pair\"}},\"title\":\"SimpleSwap\",\"version\":1},\"userdoc\":{\"events\":{\"LiquidityAdded(address,address,address,uint256,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is added to a pool\"},\"LiquidityRemoved(address,address,address,uint256,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is removed from a pool\"},\"Swap(address,address,address,uint256,uint256)\":{\"notice\":\"Emitted when a token swap occurs\"}},\"kind\":\"user\",\"methods\":{\"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Adds liquidity to a token pair\"},\"getAmountOut(uint256,uint256,uint256)\":{\"notice\":\"Calculates output amount for a given input and reserves\"},\"getPrice(address,address)\":{\"notice\":\"Gets the price of tokenA in terms of tokenB\"},\"pools(address,address)\":{\"notice\":\"Mapping of token pairs to their reserve balances\"},\"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Removes liquidity from a token pair\"},\"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)\":{\"notice\":\"Swaps an exact amount of input tokens for output tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SimpleSwap.sol\":\"SimpleSwap\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://da62d6be1f5c6edf577f0cb45666a8aa9c2086a4bac87d95d65f02e2f4c36a4b\",\"dweb:/ipfs/QmNkpvBpoCMvX8JwAFNSc5XxJ2q5BXJpL5L1txb4QkqVFF\"]},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://11fea9f8bc98949ac6709f0c1699db7430d2948137aa94d5a9e95a91f61a710a\",\"dweb:/ipfs/QmQdfRXxQjwP6yn3DVo1GHPpriKNcFghSPi94Z1oKEFUNS\"]},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a2608291cb038b388d80b79a06b6118a42f7894ff67b7da10ec0dbbf5b2973ba\",\"dweb:/ipfs/QmWohqcBLbcxmA4eGPhZDXe5RYMMEEpFq22nfkaUMvTfw1\"]},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b\",\"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz\"]},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x41f6b3b9e030561e7896dbef372b499cc8d418a80c3884a4d65a68f2fdc7493a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://80b0992a11b2fd1f75ced2971696d07bbd1d19ce6761dd50d8b6d48aa435f42a\",\"dweb:/ipfs/QmZDe5xd2gXHjVEjv9t8C1KQ68K5T8qFwdinwQgmP3rF3x\"]},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db\",\"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9\"]},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf\",\"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r\"]},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"keccak256\":\"0x982c5cb790ab941d1e04f807120a71709d4c313ba0bfc16006447ffbd27fbbd5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8150ceb4ac947e8a442b2a9c017e01e880b2be2dd958f1fa9bc405f4c5a86508\",\"dweb:/ipfs/QmbcBmFX66AY6Kbhnd5gx7zpkgqnUafo43XnmayAM7zVdB\"]},\"@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f6fda447a62815e8064f47eff0dd1cf58d9207ad69b5d32280f8d7ed1d1e4621\",\"dweb:/ipfs/QmfDRc7pxfaXB2Dh9np5Uf29Na3pQ7tafRS684wd3GLjVL\"]},\"contracts/SimpleSwap.sol\":{\"keccak256\":\"0x1cb22f8240ce729efa1c389a6a45a1a64cb529a67d3c558ab984d6d29e654be3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0b3c32ffb65f35ecc32cd33fb9508d876e8b3fdea34bc76d153bd755a6b1f4a3\",\"dweb:/ipfs/QmUc5Q8HkptGas4m21vbB3Sutmhi4BzCVeWSk1NejYZvwg\"]},\"contracts/interfaces/ISimpleSwap.sol\":{\"keccak256\":\"0xad15620f4ce09de7e036d99aa567ad8b3f259cd6cbddd7ff140377cc11beb0e9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d475f367c38a03d75116d298007056ec69db2e6510c633da05953f18b5916cec\",\"dweb:/ipfs/QmVNDfCHxvbzRAWvuN4MZoFpJo7x4pqosEk4hZgFkZyr8p\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 249,
								"contract": "contracts/SimpleSwap.sol:SimpleSwap",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 255,
								"contract": "contracts/SimpleSwap.sol:SimpleSwap",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 257,
								"contract": "contracts/SimpleSwap.sol:SimpleSwap",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 259,
								"contract": "contracts/SimpleSwap.sol:SimpleSwap",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 261,
								"contract": "contracts/SimpleSwap.sol:SimpleSwap",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							},
							{
								"astId": 1379,
								"contract": "contracts/SimpleSwap.sol:SimpleSwap",
								"label": "pools",
								"offset": 0,
								"slot": "5",
								"type": "t_mapping(t_address,t_mapping(t_address,t_struct(Pool)1371_storage))"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_struct(Pool)1371_storage))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => struct SimpleSwap.Pool))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_struct(Pool)1371_storage)"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_struct(Pool)1371_storage)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => struct SimpleSwap.Pool)",
								"numberOfBytes": "32",
								"value": "t_struct(Pool)1371_storage"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_struct(Pool)1371_storage": {
								"encoding": "inplace",
								"label": "struct SimpleSwap.Pool",
								"members": [
									{
										"astId": 1368,
										"contract": "contracts/SimpleSwap.sol:SimpleSwap",
										"label": "reserveA",
										"offset": 0,
										"slot": "0",
										"type": "t_uint256"
									},
									{
										"astId": 1370,
										"contract": "contracts/SimpleSwap.sol:SimpleSwap",
										"label": "reserveB",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									}
								],
								"numberOfBytes": "64"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"events": {
							"LiquidityAdded(address,address,address,uint256,uint256,uint256)": {
								"notice": "Emitted when liquidity is added to a pool"
							},
							"LiquidityRemoved(address,address,address,uint256,uint256,uint256)": {
								"notice": "Emitted when liquidity is removed from a pool"
							},
							"Swap(address,address,address,uint256,uint256)": {
								"notice": "Emitted when a token swap occurs"
							}
						},
						"kind": "user",
						"methods": {
							"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": {
								"notice": "Adds liquidity to a token pair"
							},
							"getAmountOut(uint256,uint256,uint256)": {
								"notice": "Calculates output amount for a given input and reserves"
							},
							"getPrice(address,address)": {
								"notice": "Gets the price of tokenA in terms of tokenB"
							},
							"pools(address,address)": {
								"notice": "Mapping of token pairs to their reserve balances"
							},
							"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": {
								"notice": "Removes liquidity from a token pair"
							},
							"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": {
								"notice": "Swaps an exact amount of input tokens for output tokens"
							}
						},
						"version": 1
					}
				}
			},
			"contracts/interfaces/ISimpleSwap.sol": {
				"ISimpleSwap": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenA",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenB",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amountADesired",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amountBDesired",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amountAMin",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amountBMin",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "addLiquidity",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountA",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amountB",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "liquidity",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "reserveIn",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "reserveOut",
									"type": "uint256"
								}
							],
							"name": "getAmountOut",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountOut",
									"type": "uint256"
								}
							],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenA",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenB",
									"type": "address"
								}
							],
							"name": "getPrice",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "price",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "tokenA",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "tokenB",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "liquidity",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amountAMin",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amountBMin",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "removeLiquidity",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "amountA",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amountB",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "amountIn",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amountOutMin",
									"type": "uint256"
								},
								{
									"internalType": "address[]",
									"name": "path",
									"type": "address[]"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "swapExactTokensForTokens",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "amounts",
									"type": "uint256[]"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the SimpleSwap decentralized exchange contract",
						"kind": "dev",
						"methods": {
							"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": {
								"details": "Mints LP tokens representing pool share",
								"params": {
									"amountADesired": "Desired amount of tokenA to deposit",
									"amountAMin": "Minimum acceptable amount of tokenA",
									"amountBDesired": "Desired amount of tokenB to deposit",
									"amountBMin": "Minimum acceptable amount of tokenB",
									"deadline": "Transaction expiry timestamp",
									"to": "Recipient of LP tokens",
									"tokenA": "First token in pair",
									"tokenB": "Second token in pair"
								},
								"returns": {
									"amountA": "Actual amount of tokenA deposited",
									"amountB": "Actual amount of tokenB deposited",
									"liquidity": "Amount of LP tokens minted"
								}
							},
							"getAmountOut(uint256,uint256,uint256)": {
								"details": "Uses formula: amountOut = (amountIn * reserveOut) / (reserveIn + amountIn)",
								"params": {
									"amountIn": "Input token amount",
									"reserveIn": "Reserve of input token",
									"reserveOut": "Reserve of output token"
								},
								"returns": {
									"amountOut": "Expected output amount"
								}
							},
							"getPrice(address,address)": {
								"details": "Price is calculated as reserveB/reserveA",
								"params": {
									"tokenA": "First token in pair",
									"tokenB": "Second token in pair"
								},
								"returns": {
									"price": "Price ratio with 18 decimals precision"
								}
							},
							"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": {
								"details": "Burns LP tokens and returns underlying assets",
								"params": {
									"amountAMin": "Minimum acceptable amount of tokenA",
									"amountBMin": "Minimum acceptable amount of tokenB",
									"deadline": "Transaction expiry timestamp",
									"liquidity": "Amount of LP tokens to burn",
									"to": "Recipient of withdrawn tokens",
									"tokenA": "First token in pair",
									"tokenB": "Second token in pair"
								},
								"returns": {
									"amountA": "Amount of tokenA withdrawn",
									"amountB": "Amount of tokenB withdrawn"
								}
							},
							"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": {
								"details": "Uses constant product market maker formula",
								"params": {
									"amountIn": "Exact amount of input tokens",
									"amountOutMin": "Minimum acceptable output amount",
									"deadline": "Transaction expiry timestamp",
									"path": "Array with [inputToken, outputToken]",
									"to": "Recipient of output tokens"
								},
								"returns": {
									"amounts": "Array containing [inputAmount, outputAmount]"
								}
							}
						},
						"title": "ISimpleSwap",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": "e8e33700",
							"getAmountOut(uint256,uint256,uint256)": "054d50d4",
							"getPrice(address,address)": "ac41865a",
							"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": "baa2abde",
							"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": "38ed1739"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the SimpleSwap decentralized exchange contract\",\"kind\":\"dev\",\"methods\":{\"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)\":{\"details\":\"Mints LP tokens representing pool share\",\"params\":{\"amountADesired\":\"Desired amount of tokenA to deposit\",\"amountAMin\":\"Minimum acceptable amount of tokenA\",\"amountBDesired\":\"Desired amount of tokenB to deposit\",\"amountBMin\":\"Minimum acceptable amount of tokenB\",\"deadline\":\"Transaction expiry timestamp\",\"to\":\"Recipient of LP tokens\",\"tokenA\":\"First token in pair\",\"tokenB\":\"Second token in pair\"},\"returns\":{\"amountA\":\"Actual amount of tokenA deposited\",\"amountB\":\"Actual amount of tokenB deposited\",\"liquidity\":\"Amount of LP tokens minted\"}},\"getAmountOut(uint256,uint256,uint256)\":{\"details\":\"Uses formula: amountOut = (amountIn * reserveOut) / (reserveIn + amountIn)\",\"params\":{\"amountIn\":\"Input token amount\",\"reserveIn\":\"Reserve of input token\",\"reserveOut\":\"Reserve of output token\"},\"returns\":{\"amountOut\":\"Expected output amount\"}},\"getPrice(address,address)\":{\"details\":\"Price is calculated as reserveB/reserveA\",\"params\":{\"tokenA\":\"First token in pair\",\"tokenB\":\"Second token in pair\"},\"returns\":{\"price\":\"Price ratio with 18 decimals precision\"}},\"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)\":{\"details\":\"Burns LP tokens and returns underlying assets\",\"params\":{\"amountAMin\":\"Minimum acceptable amount of tokenA\",\"amountBMin\":\"Minimum acceptable amount of tokenB\",\"deadline\":\"Transaction expiry timestamp\",\"liquidity\":\"Amount of LP tokens to burn\",\"to\":\"Recipient of withdrawn tokens\",\"tokenA\":\"First token in pair\",\"tokenB\":\"Second token in pair\"},\"returns\":{\"amountA\":\"Amount of tokenA withdrawn\",\"amountB\":\"Amount of tokenB withdrawn\"}},\"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)\":{\"details\":\"Uses constant product market maker formula\",\"params\":{\"amountIn\":\"Exact amount of input tokens\",\"amountOutMin\":\"Minimum acceptable output amount\",\"deadline\":\"Transaction expiry timestamp\",\"path\":\"Array with [inputToken, outputToken]\",\"to\":\"Recipient of output tokens\"},\"returns\":{\"amounts\":\"Array containing [inputAmount, outputAmount]\"}}},\"title\":\"ISimpleSwap\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Adds liquidity to a token pair\"},\"getAmountOut(uint256,uint256,uint256)\":{\"notice\":\"Calculates output amount for given input\"},\"getPrice(address,address)\":{\"notice\":\"Gets price of tokenA in terms of tokenB\"},\"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Removes liquidity from a token pair\"},\"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)\":{\"notice\":\"Swaps exact input tokens for output tokens\"}},\"notice\":\"Defines the core functionality for: - Adding/removing liquidity from token pairs - Swapping tokens with price calculations - Querying token prices and swap amounts\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interfaces/ISimpleSwap.sol\":\"ISimpleSwap\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/interfaces/ISimpleSwap.sol\":{\"keccak256\":\"0xad15620f4ce09de7e036d99aa567ad8b3f259cd6cbddd7ff140377cc11beb0e9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d475f367c38a03d75116d298007056ec69db2e6510c633da05953f18b5916cec\",\"dweb:/ipfs/QmVNDfCHxvbzRAWvuN4MZoFpJo7x4pqosEk4hZgFkZyr8p\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": {
								"notice": "Adds liquidity to a token pair"
							},
							"getAmountOut(uint256,uint256,uint256)": {
								"notice": "Calculates output amount for given input"
							},
							"getPrice(address,address)": {
								"notice": "Gets price of tokenA in terms of tokenB"
							},
							"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": {
								"notice": "Removes liquidity from a token pair"
							},
							"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": {
								"notice": "Swaps exact input tokens for output tokens"
							}
						},
						"notice": "Defines the core functionality for: - Adding/removing liquidity from token pairs - Swapping tokens with price calculations - Querying token prices and swap amounts",
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts/interfaces/IERC1363.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/IERC1363.sol",
					"exportedSymbols": {
						"IERC1363": [
							81
						],
						"IERC165": [
							1351
						],
						"IERC20": [
							819
						]
					},
					"id": 82,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "107:24:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 82,
							"sourceUnit": 90,
							"src": "133:36:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 819,
										"src": "141:6:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/IERC165.sol",
							"file": "./IERC165.sol",
							"id": 5,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 82,
							"sourceUnit": 86,
							"src": "170:38:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 4,
										"name": "IERC165",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1351,
										"src": "178:7:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 7,
										"name": "IERC20",
										"nameLocations": [
											"590:6:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 819,
										"src": "590:6:0"
									},
									"id": 8,
									"nodeType": "InheritanceSpecifier",
									"src": "590:6:0"
								},
								{
									"baseName": {
										"id": 9,
										"name": "IERC165",
										"nameLocations": [
											"598:7:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1351,
										"src": "598:7:0"
									},
									"id": 10,
									"nodeType": "InheritanceSpecifier",
									"src": "598:7:0"
								}
							],
							"canonicalName": "IERC1363",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 6,
								"nodeType": "StructuredDocumentation",
								"src": "210:357:0",
								"text": " @title IERC1363\n @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction."
							},
							"fullyImplemented": false,
							"id": 81,
							"linearizedBaseContracts": [
								81,
								1351,
								819
							],
							"name": "IERC1363",
							"nameLocation": "578:8:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 11,
										"nodeType": "StructuredDocumentation",
										"src": "1148:370:0",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @return A boolean value indicating whether the operation succeeded unless throwing."
									},
									"functionSelector": "1296ee62",
									"id": 20,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferAndCall",
									"nameLocation": "1532:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 13,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1556:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "1548:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 12,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1548:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 15,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1568:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "1560:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 14,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1560:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1547:27:0"
									},
									"returnParameters": {
										"id": 19,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 18,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "1593:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 17,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1593:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1592:6:0"
									},
									"scope": 81,
									"src": "1523:76:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 21,
										"nodeType": "StructuredDocumentation",
										"src": "1605:453:0",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @param data Additional data with no specified format, sent in call to `to`.\n @return A boolean value indicating whether the operation succeeded unless throwing."
									},
									"functionSelector": "4000aea0",
									"id": 32,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferAndCall",
									"nameLocation": "2072:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 23,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2096:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "2088:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 22,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2088:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 25,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2108:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "2100:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 24,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2100:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 27,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "2130:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "2115:19:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 26,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2115:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2087:48:0"
									},
									"returnParameters": {
										"id": 31,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 30,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "2154:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 29,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2154:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2153:6:0"
									},
									"scope": 81,
									"src": "2063:97:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 33,
										"nodeType": "StructuredDocumentation",
										"src": "2166:453:0",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param from The address which you want to send tokens from.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @return A boolean value indicating whether the operation succeeded unless throwing."
									},
									"functionSelector": "d8fbe994",
									"id": 44,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFromAndCall",
									"nameLocation": "2633:19:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 35,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2661:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "2653:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 34,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2653:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 37,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2675:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "2667:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 36,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2667:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 39,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2687:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "2679:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 38,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2679:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2652:41:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 42,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 44,
												"src": "2712:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 41,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2712:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2711:6:0"
									},
									"scope": 81,
									"src": "2624:94:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 45,
										"nodeType": "StructuredDocumentation",
										"src": "2724:536:0",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param from The address which you want to send tokens from.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @param data Additional data with no specified format, sent in call to `to`.\n @return A boolean value indicating whether the operation succeeded unless throwing."
									},
									"functionSelector": "c1d34b89",
									"id": 58,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFromAndCall",
									"nameLocation": "3274:19:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 54,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 47,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "3302:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 58,
												"src": "3294:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 46,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3294:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 49,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3316:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 58,
												"src": "3308:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 48,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3308:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 51,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3328:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 58,
												"src": "3320:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 50,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3320:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 53,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3350:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 58,
												"src": "3335:19:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 52,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3335:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3293:62:0"
									},
									"returnParameters": {
										"id": 57,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 56,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 58,
												"src": "3374:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 55,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3374:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3373:6:0"
									},
									"scope": 81,
									"src": "3265:115:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 59,
										"nodeType": "StructuredDocumentation",
										"src": "3386:390:0",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n @param spender The address which will spend the funds.\n @param value The amount of tokens to be spent.\n @return A boolean value indicating whether the operation succeeded unless throwing."
									},
									"functionSelector": "3177029f",
									"id": 68,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approveAndCall",
									"nameLocation": "3790:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 64,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 61,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3813:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 68,
												"src": "3805:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 60,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3805:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 63,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3830:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 68,
												"src": "3822:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 62,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3822:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3804:32:0"
									},
									"returnParameters": {
										"id": 67,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 66,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 68,
												"src": "3855:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 65,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3855:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3854:6:0"
									},
									"scope": 81,
									"src": "3781:80:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 69,
										"nodeType": "StructuredDocumentation",
										"src": "3867:478:0",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n @param spender The address which will spend the funds.\n @param value The amount of tokens to be spent.\n @param data Additional data with no specified format, sent in call to `spender`.\n @return A boolean value indicating whether the operation succeeded unless throwing."
									},
									"functionSelector": "cae9ca51",
									"id": 80,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approveAndCall",
									"nameLocation": "4359:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 76,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4382:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "4374:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 70,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4374:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 73,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4399:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "4391:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 72,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4391:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 75,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4421:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "4406:19:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 74,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4406:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4373:53:0"
									},
									"returnParameters": {
										"id": 79,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 78,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 80,
												"src": "4445:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 77,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4445:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4444:6:0"
									},
									"scope": 81,
									"src": "4350:101:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 82,
							"src": "568:3885:0",
							"usedErrors": [],
							"usedEvents": [
								753,
								762
							]
						}
					],
					"src": "107:4347:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts/interfaces/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							1351
						]
					},
					"id": 86,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 83,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "106:24:1"
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
							"file": "../utils/introspection/IERC165.sol",
							"id": 85,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 86,
							"sourceUnit": 1352,
							"src": "132:59:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 84,
										"name": "IERC165",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1351,
										"src": "140:7:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						}
					],
					"src": "106:86:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts/interfaces/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							819
						]
					},
					"id": 90,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 87,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "105:24:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../token/ERC20/IERC20.sol",
							"id": 89,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 90,
							"sourceUnit": 820,
							"src": "131:49:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 88,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 819,
										"src": "139:6:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						}
					],
					"src": "105:76:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
					"exportedSymbols": {
						"IERC1155Errors": [
							226
						],
						"IERC20Errors": [
							131
						],
						"IERC721Errors": [
							179
						]
					},
					"id": 227,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 91,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "112:24:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 92,
								"nodeType": "StructuredDocumentation",
								"src": "138:141:3",
								"text": " @dev Standard ERC-20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens."
							},
							"fullyImplemented": true,
							"id": 131,
							"linearizedBaseContracts": [
								131
							],
							"name": "IERC20Errors",
							"nameLocation": "290:12:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 93,
										"nodeType": "StructuredDocumentation",
										"src": "309:309:3",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "e450d38c",
									"id": 101,
									"name": "ERC20InsufficientBalance",
									"nameLocation": "629:24:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 95,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "662:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "654:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 94,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "654:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 97,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "678:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "670:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 96,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "670:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 99,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "695:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "687:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 98,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "687:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "653:49:3"
									},
									"src": "623:80:3"
								},
								{
									"documentation": {
										"id": 102,
										"nodeType": "StructuredDocumentation",
										"src": "709:152:3",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "96c6fd1e",
									"id": 106,
									"name": "ERC20InvalidSender",
									"nameLocation": "872:18:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 105,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 104,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "899:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 106,
												"src": "891:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 103,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "891:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "890:16:3"
									},
									"src": "866:41:3"
								},
								{
									"documentation": {
										"id": 107,
										"nodeType": "StructuredDocumentation",
										"src": "913:159:3",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "ec442f05",
									"id": 111,
									"name": "ERC20InvalidReceiver",
									"nameLocation": "1083:20:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 110,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 109,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "1112:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "1104:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 108,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1104:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1103:18:3"
									},
									"src": "1077:45:3"
								},
								{
									"documentation": {
										"id": 112,
										"nodeType": "StructuredDocumentation",
										"src": "1128:345:3",
										"text": " @dev Indicates a failure with the `spender`âs `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "fb8f41b2",
									"id": 120,
									"name": "ERC20InsufficientAllowance",
									"nameLocation": "1484:26:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 119,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 114,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1519:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 120,
												"src": "1511:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 113,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1511:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 116,
												"mutability": "mutable",
												"name": "allowance",
												"nameLocation": "1536:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 120,
												"src": "1528:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 115,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1528:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 118,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "1555:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 120,
												"src": "1547:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 117,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1547:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1510:52:3"
									},
									"src": "1478:85:3"
								},
								{
									"documentation": {
										"id": 121,
										"nodeType": "StructuredDocumentation",
										"src": "1569:174:3",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "e602df05",
									"id": 125,
									"name": "ERC20InvalidApprover",
									"nameLocation": "1754:20:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 124,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 123,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "1783:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 125,
												"src": "1775:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 122,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1775:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1774:18:3"
									},
									"src": "1748:45:3"
								},
								{
									"documentation": {
										"id": 126,
										"nodeType": "StructuredDocumentation",
										"src": "1799:195:3",
										"text": " @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "94280d62",
									"id": 130,
									"name": "ERC20InvalidSpender",
									"nameLocation": "2005:19:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 129,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 128,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2033:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 130,
												"src": "2025:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 127,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2025:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2024:17:3"
									},
									"src": "1999:43:3"
								}
							],
							"scope": 227,
							"src": "280:1764:3",
							"usedErrors": [
								101,
								106,
								111,
								120,
								125,
								130
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC721Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 132,
								"nodeType": "StructuredDocumentation",
								"src": "2046:143:3",
								"text": " @dev Standard ERC-721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens."
							},
							"fullyImplemented": true,
							"id": 179,
							"linearizedBaseContracts": [
								179
							],
							"name": "IERC721Errors",
							"nameLocation": "2200:13:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 133,
										"nodeType": "StructuredDocumentation",
										"src": "2220:219:3",
										"text": " @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "89c62b64",
									"id": 137,
									"name": "ERC721InvalidOwner",
									"nameLocation": "2450:18:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 136,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 135,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2477:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 137,
												"src": "2469:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 134,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2469:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2468:15:3"
									},
									"src": "2444:40:3"
								},
								{
									"documentation": {
										"id": 138,
										"nodeType": "StructuredDocumentation",
										"src": "2490:132:3",
										"text": " @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "7e273289",
									"id": 142,
									"name": "ERC721NonexistentToken",
									"nameLocation": "2633:22:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 141,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 140,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2664:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 142,
												"src": "2656:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 139,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2656:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2655:17:3"
									},
									"src": "2627:46:3"
								},
								{
									"documentation": {
										"id": 143,
										"nodeType": "StructuredDocumentation",
										"src": "2679:289:3",
										"text": " @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "64283d7b",
									"id": 151,
									"name": "ERC721IncorrectOwner",
									"nameLocation": "2979:20:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 150,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 145,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3008:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 151,
												"src": "3000:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 144,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3000:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 147,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3024:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 151,
												"src": "3016:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 146,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3016:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 149,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3041:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 151,
												"src": "3033:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 148,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3033:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2999:48:3"
									},
									"src": "2973:75:3"
								},
								{
									"documentation": {
										"id": 152,
										"nodeType": "StructuredDocumentation",
										"src": "3054:152:3",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "73c6ac6e",
									"id": 156,
									"name": "ERC721InvalidSender",
									"nameLocation": "3217:19:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 155,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 154,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3245:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 156,
												"src": "3237:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 153,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3237:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3236:16:3"
									},
									"src": "3211:42:3"
								},
								{
									"documentation": {
										"id": 157,
										"nodeType": "StructuredDocumentation",
										"src": "3259:159:3",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "64a0ae92",
									"id": 161,
									"name": "ERC721InvalidReceiver",
									"nameLocation": "3429:21:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 160,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 159,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "3459:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 161,
												"src": "3451:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 158,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3451:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3450:18:3"
									},
									"src": "3423:46:3"
								},
								{
									"documentation": {
										"id": 162,
										"nodeType": "StructuredDocumentation",
										"src": "3475:247:3",
										"text": " @dev Indicates a failure with the `operator`âs approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "177e802f",
									"id": 168,
									"name": "ERC721InsufficientApproval",
									"nameLocation": "3733:26:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 167,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 164,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "3768:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 168,
												"src": "3760:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 163,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3760:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 166,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3786:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 168,
												"src": "3778:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 165,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3778:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3759:35:3"
									},
									"src": "3727:68:3"
								},
								{
									"documentation": {
										"id": 169,
										"nodeType": "StructuredDocumentation",
										"src": "3801:174:3",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "a9fbf51f",
									"id": 173,
									"name": "ERC721InvalidApprover",
									"nameLocation": "3986:21:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 172,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 171,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "4016:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 173,
												"src": "4008:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 170,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4008:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4007:18:3"
									},
									"src": "3980:46:3"
								},
								{
									"documentation": {
										"id": 174,
										"nodeType": "StructuredDocumentation",
										"src": "4032:197:3",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "5b08ba18",
									"id": 178,
									"name": "ERC721InvalidOperator",
									"nameLocation": "4240:21:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 177,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 176,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4270:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 178,
												"src": "4262:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 175,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4262:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4261:18:3"
									},
									"src": "4234:46:3"
								}
							],
							"scope": 227,
							"src": "2190:2092:3",
							"usedErrors": [
								137,
								142,
								151,
								156,
								161,
								168,
								173,
								178
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC1155Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 180,
								"nodeType": "StructuredDocumentation",
								"src": "4284:145:3",
								"text": " @dev Standard ERC-1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens."
							},
							"fullyImplemented": true,
							"id": 226,
							"linearizedBaseContracts": [
								226
							],
							"name": "IERC1155Errors",
							"nameLocation": "4440:14:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 181,
										"nodeType": "StructuredDocumentation",
										"src": "4461:361:3",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "03dee4c5",
									"id": 191,
									"name": "ERC1155InsufficientBalance",
									"nameLocation": "4833:26:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 190,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 183,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "4868:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 191,
												"src": "4860:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 182,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4860:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 185,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "4884:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 191,
												"src": "4876:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 184,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4876:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 187,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "4901:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 191,
												"src": "4893:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 186,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4893:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 189,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4917:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 191,
												"src": "4909:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 188,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4909:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4859:66:3"
									},
									"src": "4827:99:3"
								},
								{
									"documentation": {
										"id": 192,
										"nodeType": "StructuredDocumentation",
										"src": "4932:152:3",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "01a83514",
									"id": 196,
									"name": "ERC1155InvalidSender",
									"nameLocation": "5095:20:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 195,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 194,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "5124:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 196,
												"src": "5116:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 193,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5116:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5115:16:3"
									},
									"src": "5089:43:3"
								},
								{
									"documentation": {
										"id": 197,
										"nodeType": "StructuredDocumentation",
										"src": "5138:159:3",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "57f447ce",
									"id": 201,
									"name": "ERC1155InvalidReceiver",
									"nameLocation": "5308:22:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 200,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 199,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "5339:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 201,
												"src": "5331:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 198,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5331:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5330:18:3"
									},
									"src": "5302:47:3"
								},
								{
									"documentation": {
										"id": 202,
										"nodeType": "StructuredDocumentation",
										"src": "5355:256:3",
										"text": " @dev Indicates a failure with the `operator`âs approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "e237d922",
									"id": 208,
									"name": "ERC1155MissingApprovalForAll",
									"nameLocation": "5622:28:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 207,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 204,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "5659:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 208,
												"src": "5651:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 203,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5651:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 206,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5677:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 208,
												"src": "5669:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 205,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5669:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5650:33:3"
									},
									"src": "5616:68:3"
								},
								{
									"documentation": {
										"id": 209,
										"nodeType": "StructuredDocumentation",
										"src": "5690:174:3",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "3e31884e",
									"id": 213,
									"name": "ERC1155InvalidApprover",
									"nameLocation": "5875:22:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 212,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 211,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "5906:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 213,
												"src": "5898:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 210,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5898:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5897:18:3"
									},
									"src": "5869:47:3"
								},
								{
									"documentation": {
										"id": 214,
										"nodeType": "StructuredDocumentation",
										"src": "5922:197:3",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "ced3e100",
									"id": 218,
									"name": "ERC1155InvalidOperator",
									"nameLocation": "6130:22:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 217,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 216,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "6161:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 218,
												"src": "6153:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 215,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6153:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6152:18:3"
									},
									"src": "6124:47:3"
								},
								{
									"documentation": {
										"id": 219,
										"nodeType": "StructuredDocumentation",
										"src": "6177:280:3",
										"text": " @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"
									},
									"errorSelector": "5b059991",
									"id": 225,
									"name": "ERC1155InvalidArrayLength",
									"nameLocation": "6468:25:3",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 224,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 221,
												"mutability": "mutable",
												"name": "idsLength",
												"nameLocation": "6502:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 225,
												"src": "6494:17:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 220,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6494:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 223,
												"mutability": "mutable",
												"name": "valuesLength",
												"nameLocation": "6521:12:3",
												"nodeType": "VariableDeclaration",
												"scope": 225,
												"src": "6513:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 222,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6513:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6493:41:3"
									},
									"src": "6462:73:3"
								}
							],
							"scope": 227,
							"src": "4430:2107:3",
							"usedErrors": [
								191,
								196,
								201,
								208,
								213,
								218,
								225
							],
							"usedEvents": []
						}
					],
					"src": "112:6426:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
					"exportedSymbols": {
						"Context": [
							1339
						],
						"ERC20": [
							741
						],
						"IERC20": [
							819
						],
						"IERC20Errors": [
							131
						],
						"IERC20Metadata": [
							845
						]
					},
					"id": 742,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 228,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "105:24:4"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 230,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 742,
							"sourceUnit": 820,
							"src": "131:36:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 229,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 819,
										"src": "139:6:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
							"file": "./extensions/IERC20Metadata.sol",
							"id": 232,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 742,
							"sourceUnit": 846,
							"src": "168:63:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 231,
										"name": "IERC20Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 845,
										"src": "176:14:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
							"file": "../../utils/Context.sol",
							"id": 234,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 742,
							"sourceUnit": 1340,
							"src": "232:48:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 233,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1339,
										"src": "240:7:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/draft-IERC6093.sol",
							"file": "../../interfaces/draft-IERC6093.sol",
							"id": 236,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 742,
							"sourceUnit": 227,
							"src": "281:65:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 235,
										"name": "IERC20Errors",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 131,
										"src": "289:12:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 238,
										"name": "Context",
										"nameLocations": [
											"1133:7:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1339,
										"src": "1133:7:4"
									},
									"id": 239,
									"nodeType": "InheritanceSpecifier",
									"src": "1133:7:4"
								},
								{
									"baseName": {
										"id": 240,
										"name": "IERC20",
										"nameLocations": [
											"1142:6:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 819,
										"src": "1142:6:4"
									},
									"id": 241,
									"nodeType": "InheritanceSpecifier",
									"src": "1142:6:4"
								},
								{
									"baseName": {
										"id": 242,
										"name": "IERC20Metadata",
										"nameLocations": [
											"1150:14:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 845,
										"src": "1150:14:4"
									},
									"id": 243,
									"nodeType": "InheritanceSpecifier",
									"src": "1150:14:4"
								},
								{
									"baseName": {
										"id": 244,
										"name": "IERC20Errors",
										"nameLocations": [
											"1166:12:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 131,
										"src": "1166:12:4"
									},
									"id": 245,
									"nodeType": "InheritanceSpecifier",
									"src": "1166:12:4"
								}
							],
							"canonicalName": "ERC20",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 237,
								"nodeType": "StructuredDocumentation",
								"src": "348:757:4",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC-20\n applications."
							},
							"fullyImplemented": true,
							"id": 741,
							"linearizedBaseContracts": [
								741,
								131,
								845,
								819,
								1339
							],
							"name": "ERC20",
							"nameLocation": "1124:5:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 249,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1229:9:4",
									"nodeType": "VariableDeclaration",
									"scope": 741,
									"src": "1185:53:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 248,
										"keyName": "account",
										"keyNameLocation": "1201:7:4",
										"keyType": {
											"id": 246,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1193:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1185:35:4",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 247,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1212:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 255,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "1317:11:4",
									"nodeType": "VariableDeclaration",
									"scope": 741,
									"src": "1245:83:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 254,
										"keyName": "account",
										"keyNameLocation": "1261:7:4",
										"keyType": {
											"id": 250,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1253:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1245:63:4",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 253,
											"keyName": "spender",
											"keyNameLocation": "1288:7:4",
											"keyType": {
												"id": 251,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1280:7:4",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1272:35:4",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueName": "",
											"valueNameLocation": "-1:-1:-1",
											"valueType": {
												"id": 252,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1299:7:4",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 257,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "1351:12:4",
									"nodeType": "VariableDeclaration",
									"scope": 741,
									"src": "1335:28:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 256,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1335:7:4",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 259,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1385:5:4",
									"nodeType": "VariableDeclaration",
									"scope": 741,
									"src": "1370:20:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 258,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1370:6:4",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 261,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1411:7:4",
									"nodeType": "VariableDeclaration",
									"scope": 741,
									"src": "1396:22:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 260,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1396:6:4",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 277,
										"nodeType": "Block",
										"src": "1638:57:4",
										"statements": [
											{
												"expression": {
													"id": 271,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 269,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 259,
														"src": "1648:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 270,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 264,
														"src": "1656:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1648:13:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 272,
												"nodeType": "ExpressionStatement",
												"src": "1648:13:4"
											},
											{
												"expression": {
													"id": 275,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 273,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 261,
														"src": "1671:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 274,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 266,
														"src": "1681:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1671:17:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 276,
												"nodeType": "ExpressionStatement",
												"src": "1671:17:4"
											}
										]
									},
									"documentation": {
										"id": 262,
										"nodeType": "StructuredDocumentation",
										"src": "1425:152:4",
										"text": " @dev Sets the values for {name} and {symbol}.\n Both values are immutable: they can only be set once during construction."
									},
									"id": 278,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 267,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 264,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "1608:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 278,
												"src": "1594:19:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 263,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1594:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 266,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "1629:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 278,
												"src": "1615:21:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 265,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1615:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1593:44:4"
									},
									"returnParameters": {
										"id": 268,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1638:0:4"
									},
									"scope": 741,
									"src": "1582:113:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										832
									],
									"body": {
										"id": 286,
										"nodeType": "Block",
										"src": "1820:29:4",
										"statements": [
											{
												"expression": {
													"id": 284,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 259,
													"src": "1837:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 283,
												"id": 285,
												"nodeType": "Return",
												"src": "1830:12:4"
											}
										]
									},
									"documentation": {
										"id": 279,
										"nodeType": "StructuredDocumentation",
										"src": "1701:54:4",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 287,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "1769:4:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 280,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1773:2:4"
									},
									"returnParameters": {
										"id": 283,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 282,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 287,
												"src": "1805:13:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 281,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1805:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1804:15:4"
									},
									"scope": 741,
									"src": "1760:89:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										838
									],
									"body": {
										"id": 295,
										"nodeType": "Block",
										"src": "2024:31:4",
										"statements": [
											{
												"expression": {
													"id": 293,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 261,
													"src": "2041:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 292,
												"id": 294,
												"nodeType": "Return",
												"src": "2034:14:4"
											}
										]
									},
									"documentation": {
										"id": 288,
										"nodeType": "StructuredDocumentation",
										"src": "1855:102:4",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 296,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "1971:6:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 289,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1977:2:4"
									},
									"returnParameters": {
										"id": 292,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 291,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 296,
												"src": "2009:13:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 290,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2009:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2008:15:4"
									},
									"scope": 741,
									"src": "1962:93:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										844
									],
									"body": {
										"id": 304,
										"nodeType": "Block",
										"src": "2744:26:4",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 302,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "2761:2:4",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 301,
												"id": 303,
												"nodeType": "Return",
												"src": "2754:9:4"
											}
										]
									},
									"documentation": {
										"id": 297,
										"nodeType": "StructuredDocumentation",
										"src": "2061:622:4",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 305,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "2697:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 298,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2705:2:4"
									},
									"returnParameters": {
										"id": 301,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 300,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "2737:5:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 299,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "2737:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2736:7:4"
									},
									"scope": 741,
									"src": "2688:82:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										768
									],
									"body": {
										"id": 313,
										"nodeType": "Block",
										"src": "2891:36:4",
										"statements": [
											{
												"expression": {
													"id": 311,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 257,
													"src": "2908:12:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 310,
												"id": 312,
												"nodeType": "Return",
												"src": "2901:19:4"
											}
										]
									},
									"documentation": {
										"id": 306,
										"nodeType": "StructuredDocumentation",
										"src": "2776:49:4",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 314,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "2839:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 307,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2850:2:4"
									},
									"returnParameters": {
										"id": 310,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 309,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 314,
												"src": "2882:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 308,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2882:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2881:9:4"
									},
									"scope": 741,
									"src": "2830:97:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										776
									],
									"body": {
										"id": 326,
										"nodeType": "Block",
										"src": "3059:42:4",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 322,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 249,
														"src": "3076:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 324,
													"indexExpression": {
														"id": 323,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 317,
														"src": "3086:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3076:18:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 321,
												"id": 325,
												"nodeType": "Return",
												"src": "3069:25:4"
											}
										]
									},
									"documentation": {
										"id": 315,
										"nodeType": "StructuredDocumentation",
										"src": "2933:47:4",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 327,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "2994:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 318,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 317,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3012:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 327,
												"src": "3004:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 316,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3004:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3003:17:4"
									},
									"returnParameters": {
										"id": 321,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 320,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 327,
												"src": "3050:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 319,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3050:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3049:9:4"
									},
									"scope": 741,
									"src": "2985:116:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										786
									],
									"body": {
										"id": 350,
										"nodeType": "Block",
										"src": "3371:103:4",
										"statements": [
											{
												"assignments": [
													338
												],
												"declarations": [
													{
														"constant": false,
														"id": 338,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "3389:5:4",
														"nodeType": "VariableDeclaration",
														"scope": 350,
														"src": "3381:13:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 337,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3381:7:4",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 341,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 339,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1321,
														"src": "3397:10:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 340,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3397:12:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3381:28:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 343,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 338,
															"src": "3429:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 344,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 330,
															"src": "3436:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 345,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 332,
															"src": "3440:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 342,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 471,
														"src": "3419:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 346,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3419:27:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 347,
												"nodeType": "ExpressionStatement",
												"src": "3419:27:4"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 348,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3463:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 336,
												"id": 349,
												"nodeType": "Return",
												"src": "3456:11:4"
											}
										]
									},
									"documentation": {
										"id": 328,
										"nodeType": "StructuredDocumentation",
										"src": "3107:184:4",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `value`."
									},
									"functionSelector": "a9059cbb",
									"id": 351,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "3305:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 333,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 330,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3322:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 351,
												"src": "3314:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 329,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3314:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 332,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3334:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 351,
												"src": "3326:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 331,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3326:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3313:27:4"
									},
									"returnParameters": {
										"id": 336,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 335,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 351,
												"src": "3365:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 334,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3365:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3364:6:4"
									},
									"scope": 741,
									"src": "3296:178:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										796
									],
									"body": {
										"id": 367,
										"nodeType": "Block",
										"src": "3621:51:4",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 361,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 255,
															"src": "3638:11:4",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 363,
														"indexExpression": {
															"id": 362,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 354,
															"src": "3650:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "3638:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 365,
													"indexExpression": {
														"id": 364,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 356,
														"src": "3657:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3638:27:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 360,
												"id": 366,
												"nodeType": "Return",
												"src": "3631:34:4"
											}
										]
									},
									"documentation": {
										"id": 352,
										"nodeType": "StructuredDocumentation",
										"src": "3480:47:4",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 368,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "3541:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 357,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 354,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3559:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 368,
												"src": "3551:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 353,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3551:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 356,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3574:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 368,
												"src": "3566:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 355,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3566:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3550:32:4"
									},
									"returnParameters": {
										"id": 360,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 359,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 368,
												"src": "3612:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 358,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3612:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3611:9:4"
									},
									"scope": 741,
									"src": "3532:140:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										806
									],
									"body": {
										"id": 391,
										"nodeType": "Block",
										"src": "4058:107:4",
										"statements": [
											{
												"assignments": [
													379
												],
												"declarations": [
													{
														"constant": false,
														"id": 379,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4076:5:4",
														"nodeType": "VariableDeclaration",
														"scope": 391,
														"src": "4068:13:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 378,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4068:7:4",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 382,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 380,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1321,
														"src": "4084:10:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 381,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4084:12:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4068:28:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 384,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 379,
															"src": "4115:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 385,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 371,
															"src": "4122:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 386,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 373,
															"src": "4131:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 383,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															632,
															692
														],
														"referencedDeclaration": 632,
														"src": "4106:8:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 387,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4106:31:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 388,
												"nodeType": "ExpressionStatement",
												"src": "4106:31:4"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 389,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4154:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 377,
												"id": 390,
												"nodeType": "Return",
												"src": "4147:11:4"
											}
										]
									},
									"documentation": {
										"id": 369,
										"nodeType": "StructuredDocumentation",
										"src": "3678:296:4",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 392,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "3988:7:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 374,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 371,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4004:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 392,
												"src": "3996:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 370,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3996:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 373,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4021:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 392,
												"src": "4013:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 372,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4013:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3995:32:4"
									},
									"returnParameters": {
										"id": 377,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 376,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 392,
												"src": "4052:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 375,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4052:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4051:6:4"
									},
									"scope": 741,
									"src": "3979:186:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										818
									],
									"body": {
										"id": 423,
										"nodeType": "Block",
										"src": "4850:151:4",
										"statements": [
											{
												"assignments": [
													405
												],
												"declarations": [
													{
														"constant": false,
														"id": 405,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "4868:7:4",
														"nodeType": "VariableDeclaration",
														"scope": 423,
														"src": "4860:15:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 404,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4860:7:4",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 408,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 406,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1321,
														"src": "4878:10:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 407,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4878:12:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4860:30:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 410,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 395,
															"src": "4916:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 411,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 405,
															"src": "4922:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 412,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 399,
															"src": "4931:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 409,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 740,
														"src": "4900:15:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 413,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4900:37:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 414,
												"nodeType": "ExpressionStatement",
												"src": "4900:37:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 416,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 395,
															"src": "4957:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 417,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 397,
															"src": "4963:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 418,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 399,
															"src": "4967:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 415,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 471,
														"src": "4947:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 419,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4947:26:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 420,
												"nodeType": "ExpressionStatement",
												"src": "4947:26:4"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 421,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4990:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 403,
												"id": 422,
												"nodeType": "Return",
												"src": "4983:11:4"
											}
										]
									},
									"documentation": {
										"id": 393,
										"nodeType": "StructuredDocumentation",
										"src": "4171:581:4",
										"text": " @dev See {IERC20-transferFrom}.\n Skips emitting an {Approval} event indicating an allowance update. This is not\n required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `value`.\n - the caller must have allowance for ``from``'s tokens of at least\n `value`."
									},
									"functionSelector": "23b872dd",
									"id": 424,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "4766:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 400,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 395,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "4787:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 424,
												"src": "4779:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 394,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4779:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 397,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4801:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 424,
												"src": "4793:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 396,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4793:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 399,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4813:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 424,
												"src": "4805:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 398,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4805:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4778:41:4"
									},
									"returnParameters": {
										"id": 403,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 402,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 424,
												"src": "4844:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 401,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4844:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4843:6:4"
									},
									"scope": 741,
									"src": "4757:244:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 470,
										"nodeType": "Block",
										"src": "5443:231:4",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 439,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 434,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 427,
														"src": "5457:4:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 437,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5473:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 436,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5465:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 435,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5465:7:4",
																"typeDescriptions": {}
															}
														},
														"id": 438,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5465:10:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5457:18:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 448,
												"nodeType": "IfStatement",
												"src": "5453:86:4",
												"trueBody": {
													"id": 447,
													"nodeType": "Block",
													"src": "5477:62:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 443,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5525:1:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 442,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5517:7:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 441,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5517:7:4",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 444,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5517:10:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 440,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 106,
																	"src": "5498:18:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 445,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5498:30:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 446,
															"nodeType": "RevertStatement",
															"src": "5491:37:4"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 454,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 449,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 429,
														"src": "5552:2:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 452,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5566:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 451,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5558:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 450,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5558:7:4",
																"typeDescriptions": {}
															}
														},
														"id": 453,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5558:10:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5552:16:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 463,
												"nodeType": "IfStatement",
												"src": "5548:86:4",
												"trueBody": {
													"id": 462,
													"nodeType": "Block",
													"src": "5570:64:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 458,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5620:1:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 457,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5612:7:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 456,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5612:7:4",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 459,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5612:10:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 455,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 111,
																	"src": "5591:20:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 460,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5591:32:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 461,
															"nodeType": "RevertStatement",
															"src": "5584:39:4"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 465,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 427,
															"src": "5651:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 466,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 429,
															"src": "5657:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 467,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 431,
															"src": "5661:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 464,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 548,
														"src": "5643:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 468,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5643:24:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 469,
												"nodeType": "ExpressionStatement",
												"src": "5643:24:4"
											}
										]
									},
									"documentation": {
										"id": 425,
										"nodeType": "StructuredDocumentation",
										"src": "5007:362:4",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 471,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "5383:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 432,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 427,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5401:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 471,
												"src": "5393:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 426,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5393:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 429,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5415:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 471,
												"src": "5407:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 428,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5407:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 431,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5427:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 471,
												"src": "5419:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 430,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5419:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5392:41:4"
									},
									"returnParameters": {
										"id": 433,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5443:0:4"
									},
									"scope": 741,
									"src": "5374:300:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 547,
										"nodeType": "Block",
										"src": "6064:1032:4",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 486,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 481,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 474,
														"src": "6078:4:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 484,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6094:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 483,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6086:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 482,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6086:7:4",
																"typeDescriptions": {}
															}
														},
														"id": 485,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6086:10:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6078:18:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 518,
													"nodeType": "Block",
													"src": "6252:362:4",
													"statements": [
														{
															"assignments": [
																493
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 493,
																	"mutability": "mutable",
																	"name": "fromBalance",
																	"nameLocation": "6274:11:4",
																	"nodeType": "VariableDeclaration",
																	"scope": 518,
																	"src": "6266:19:4",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 492,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "6266:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 497,
															"initialValue": {
																"baseExpression": {
																	"id": 494,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 249,
																	"src": "6288:9:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 496,
																"indexExpression": {
																	"id": 495,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 474,
																	"src": "6298:4:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "6288:15:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6266:37:4"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 500,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 498,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 493,
																	"src": "6321:11:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 499,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 478,
																	"src": "6335:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6321:19:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 508,
															"nodeType": "IfStatement",
															"src": "6317:115:4",
															"trueBody": {
																"id": 507,
																"nodeType": "Block",
																"src": "6342:90:4",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 502,
																					"name": "from",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 474,
																					"src": "6392:4:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 503,
																					"name": "fromBalance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 493,
																					"src": "6398:11:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 504,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 478,
																					"src": "6411:5:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 501,
																				"name": "ERC20InsufficientBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 101,
																				"src": "6367:24:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
																					"typeString": "function (address,uint256,uint256) pure returns (error)"
																				}
																			},
																			"id": 505,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6367:50:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 506,
																		"nodeType": "RevertStatement",
																		"src": "6360:57:4"
																	}
																]
															}
														},
														{
															"id": 517,
															"nodeType": "UncheckedBlock",
															"src": "6445:159:4",
															"statements": [
																{
																	"expression": {
																		"id": 515,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 509,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 249,
																				"src": "6552:9:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 511,
																			"indexExpression": {
																				"id": 510,
																				"name": "from",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 474,
																				"src": "6562:4:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "6552:15:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 514,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 512,
																				"name": "fromBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 493,
																				"src": "6570:11:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 513,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 478,
																				"src": "6584:5:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "6570:19:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6552:37:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 516,
																	"nodeType": "ExpressionStatement",
																	"src": "6552:37:4"
																}
															]
														}
													]
												},
												"id": 519,
												"nodeType": "IfStatement",
												"src": "6074:540:4",
												"trueBody": {
													"id": 491,
													"nodeType": "Block",
													"src": "6098:148:4",
													"statements": [
														{
															"expression": {
																"id": 489,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 487,
																	"name": "_totalSupply",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 257,
																	"src": "6214:12:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"id": 488,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 478,
																	"src": "6230:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6214:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 490,
															"nodeType": "ExpressionStatement",
															"src": "6214:21:4"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 525,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 520,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 476,
														"src": "6628:2:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 523,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6642:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 522,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6634:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 521,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6634:7:4",
																"typeDescriptions": {}
															}
														},
														"id": 524,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6634:10:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6628:16:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 539,
													"nodeType": "Block",
													"src": "6843:206:4",
													"statements": [
														{
															"id": 538,
															"nodeType": "UncheckedBlock",
															"src": "6857:182:4",
															"statements": [
																{
																	"expression": {
																		"id": 536,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 532,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 249,
																				"src": "7002:9:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 534,
																			"indexExpression": {
																				"id": 533,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 476,
																				"src": "7012:2:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "7002:13:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"id": 535,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 478,
																			"src": "7019:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "7002:22:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 537,
																	"nodeType": "ExpressionStatement",
																	"src": "7002:22:4"
																}
															]
														}
													]
												},
												"id": 540,
												"nodeType": "IfStatement",
												"src": "6624:425:4",
												"trueBody": {
													"id": 531,
													"nodeType": "Block",
													"src": "6646:191:4",
													"statements": [
														{
															"id": 530,
															"nodeType": "UncheckedBlock",
															"src": "6660:167:4",
															"statements": [
																{
																	"expression": {
																		"id": 528,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 526,
																			"name": "_totalSupply",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 257,
																			"src": "6791:12:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "-=",
																		"rightHandSide": {
																			"id": 527,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 478,
																			"src": "6807:5:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6791:21:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 529,
																	"nodeType": "ExpressionStatement",
																	"src": "6791:21:4"
																}
															]
														}
													]
												}
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 542,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 474,
															"src": "7073:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 543,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 476,
															"src": "7079:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 544,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 478,
															"src": "7083:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 541,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 753,
														"src": "7064:8:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 545,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7064:25:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 546,
												"nodeType": "EmitStatement",
												"src": "7059:30:4"
											}
										]
									},
									"documentation": {
										"id": 472,
										"nodeType": "StructuredDocumentation",
										"src": "5680:304:4",
										"text": " @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n this function.\n Emits a {Transfer} event."
									},
									"id": 548,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_update",
									"nameLocation": "5998:7:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 479,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 474,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6014:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 548,
												"src": "6006:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 473,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6006:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 476,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6028:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 548,
												"src": "6020:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 475,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6020:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 478,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6040:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 548,
												"src": "6032:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 477,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6032:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6005:41:4"
									},
									"returnParameters": {
										"id": 480,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6064:0:4"
									},
									"scope": 741,
									"src": "5989:1107:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 580,
										"nodeType": "Block",
										"src": "7495:152:4",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 561,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 556,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 551,
														"src": "7509:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 559,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7528:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 558,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7520:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 557,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "7520:7:4",
																"typeDescriptions": {}
															}
														},
														"id": 560,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7520:10:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7509:21:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 570,
												"nodeType": "IfStatement",
												"src": "7505:91:4",
												"trueBody": {
													"id": 569,
													"nodeType": "Block",
													"src": "7532:64:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 565,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "7582:1:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 564,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "7574:7:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 563,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "7574:7:4",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 566,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7574:10:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 562,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 111,
																	"src": "7553:20:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 567,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7553:32:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 568,
															"nodeType": "RevertStatement",
															"src": "7546:39:4"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 574,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7621:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 573,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "7613:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 572,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "7613:7:4",
																	"typeDescriptions": {}
																}
															},
															"id": 575,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7613:10:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 576,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 551,
															"src": "7625:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 577,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 553,
															"src": "7634:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 571,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 548,
														"src": "7605:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 578,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7605:35:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 579,
												"nodeType": "ExpressionStatement",
												"src": "7605:35:4"
											}
										]
									},
									"documentation": {
										"id": 549,
										"nodeType": "StructuredDocumentation",
										"src": "7102:332:4",
										"text": " @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n Relies on the `_update` mechanism\n Emits a {Transfer} event with `from` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 581,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "7448:5:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 554,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 551,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7462:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 581,
												"src": "7454:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 550,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7454:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 553,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "7479:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 581,
												"src": "7471:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 552,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7471:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7453:32:4"
									},
									"returnParameters": {
										"id": 555,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7495:0:4"
									},
									"scope": 741,
									"src": "7439:208:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 613,
										"nodeType": "Block",
										"src": "8021:150:4",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 594,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 589,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 584,
														"src": "8035:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 592,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8054:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 591,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "8046:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 590,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "8046:7:4",
																"typeDescriptions": {}
															}
														},
														"id": 593,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8046:10:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "8035:21:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 603,
												"nodeType": "IfStatement",
												"src": "8031:89:4",
												"trueBody": {
													"id": 602,
													"nodeType": "Block",
													"src": "8058:62:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 598,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "8106:1:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 597,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "8098:7:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 596,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "8098:7:4",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 599,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8098:10:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 595,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 106,
																	"src": "8079:18:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 600,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8079:30:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 601,
															"nodeType": "RevertStatement",
															"src": "8072:37:4"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 605,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 584,
															"src": "8137:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 608,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8154:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 607,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8146:7:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 606,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8146:7:4",
																	"typeDescriptions": {}
																}
															},
															"id": 609,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8146:10:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 610,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 586,
															"src": "8158:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 604,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 548,
														"src": "8129:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 611,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8129:35:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 612,
												"nodeType": "ExpressionStatement",
												"src": "8129:35:4"
											}
										]
									},
									"documentation": {
										"id": 582,
										"nodeType": "StructuredDocumentation",
										"src": "7653:307:4",
										"text": " @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n Relies on the `_update` mechanism.\n Emits a {Transfer} event with `to` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead"
									},
									"id": 614,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "7974:5:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 587,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 584,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7988:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 614,
												"src": "7980:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 583,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7980:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 586,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8005:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 614,
												"src": "7997:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 585,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7997:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7979:32:4"
									},
									"returnParameters": {
										"id": 588,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8021:0:4"
									},
									"scope": 741,
									"src": "7965:206:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 631,
										"nodeType": "Block",
										"src": "8781:54:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 625,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 617,
															"src": "8800:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 626,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 619,
															"src": "8807:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 627,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 621,
															"src": "8816:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "74727565",
															"id": 628,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8823:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 624,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															632,
															692
														],
														"referencedDeclaration": 692,
														"src": "8791:8:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
															"typeString": "function (address,address,uint256,bool)"
														}
													},
													"id": 629,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8791:37:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 630,
												"nodeType": "ExpressionStatement",
												"src": "8791:37:4"
											}
										]
									},
									"documentation": {
										"id": 615,
										"nodeType": "StructuredDocumentation",
										"src": "8177:525:4",
										"text": " @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."
									},
									"id": 632,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "8716:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 622,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 617,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "8733:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 632,
												"src": "8725:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 616,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8725:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 619,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "8748:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 632,
												"src": "8740:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 618,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8740:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 621,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8765:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 632,
												"src": "8757:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 620,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8757:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8724:47:4"
									},
									"returnParameters": {
										"id": 623,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8781:0:4"
									},
									"scope": 741,
									"src": "8707:128:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 691,
										"nodeType": "Block",
										"src": "9780:334:4",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 649,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 644,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 635,
														"src": "9794:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 647,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9811:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 646,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "9803:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 645,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "9803:7:4",
																"typeDescriptions": {}
															}
														},
														"id": 648,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9803:10:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "9794:19:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 658,
												"nodeType": "IfStatement",
												"src": "9790:89:4",
												"trueBody": {
													"id": 657,
													"nodeType": "Block",
													"src": "9815:64:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 653,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "9865:1:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 652,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "9857:7:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 651,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "9857:7:4",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 654,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "9857:10:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 650,
																	"name": "ERC20InvalidApprover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 125,
																	"src": "9836:20:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 655,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9836:32:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 656,
															"nodeType": "RevertStatement",
															"src": "9829:39:4"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 664,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 659,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 637,
														"src": "9892:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 662,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9911:1:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 661,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "9903:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 660,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "9903:7:4",
																"typeDescriptions": {}
															}
														},
														"id": 663,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9903:10:4",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "9892:21:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 673,
												"nodeType": "IfStatement",
												"src": "9888:90:4",
												"trueBody": {
													"id": 672,
													"nodeType": "Block",
													"src": "9915:63:4",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 668,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "9964:1:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 667,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "9956:7:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 666,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "9956:7:4",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 669,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "9956:10:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 665,
																	"name": "ERC20InvalidSpender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 130,
																	"src": "9936:19:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 670,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9936:31:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 671,
															"nodeType": "RevertStatement",
															"src": "9929:38:4"
														}
													]
												}
											},
											{
												"expression": {
													"id": 680,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 674,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 255,
																"src": "9987:11:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 677,
															"indexExpression": {
																"id": 675,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 635,
																"src": "9999:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "9987:18:4",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 678,
														"indexExpression": {
															"id": 676,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 637,
															"src": "10006:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "9987:27:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 679,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 639,
														"src": "10017:5:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9987:35:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 681,
												"nodeType": "ExpressionStatement",
												"src": "9987:35:4"
											},
											{
												"condition": {
													"id": 682,
													"name": "emitEvent",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 641,
													"src": "10036:9:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 690,
												"nodeType": "IfStatement",
												"src": "10032:76:4",
												"trueBody": {
													"id": 689,
													"nodeType": "Block",
													"src": "10047:61:4",
													"statements": [
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 684,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 635,
																		"src": "10075:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 685,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 637,
																		"src": "10082:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 686,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 639,
																		"src": "10091:5:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 683,
																	"name": "Approval",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 762,
																	"src": "10066:8:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256)"
																	}
																},
																"id": 687,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10066:31:4",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 688,
															"nodeType": "EmitStatement",
															"src": "10061:36:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 633,
										"nodeType": "StructuredDocumentation",
										"src": "8841:836:4",
										"text": " @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n `Approval` event during `transferFrom` operations.\n Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n true using the following override:\n ```solidity\n function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     super._approve(owner, spender, value, true);\n }\n ```\n Requirements are the same as {_approve}."
									},
									"id": 692,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "9691:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 642,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 635,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9708:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 692,
												"src": "9700:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 634,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9700:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 637,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "9723:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 692,
												"src": "9715:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 636,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9715:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 639,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9740:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 692,
												"src": "9732:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 638,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9732:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 641,
												"mutability": "mutable",
												"name": "emitEvent",
												"nameLocation": "9752:9:4",
												"nodeType": "VariableDeclaration",
												"scope": 692,
												"src": "9747:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 640,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "9747:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9699:63:4"
									},
									"returnParameters": {
										"id": 643,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9780:0:4"
									},
									"scope": 741,
									"src": "9682:432:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 739,
										"nodeType": "Block",
										"src": "10485:387:4",
										"statements": [
											{
												"assignments": [
													703
												],
												"declarations": [
													{
														"constant": false,
														"id": 703,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "10503:16:4",
														"nodeType": "VariableDeclaration",
														"scope": 739,
														"src": "10495:24:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 702,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10495:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 708,
												"initialValue": {
													"arguments": [
														{
															"id": 705,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 695,
															"src": "10532:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 706,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 697,
															"src": "10539:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 704,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 368,
														"src": "10522:9:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 707,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10522:25:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10495:52:4"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 715,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 709,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 703,
														"src": "10561:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 712,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10585:7:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 711,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "10585:7:4",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 710,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "10580:4:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 713,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10580:13:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 714,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "10594:3:4",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "10580:17:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10561:36:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 738,
												"nodeType": "IfStatement",
												"src": "10557:309:4",
												"trueBody": {
													"id": 737,
													"nodeType": "Block",
													"src": "10599:267:4",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 718,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 716,
																	"name": "currentAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 703,
																	"src": "10617:16:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 717,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 699,
																	"src": "10636:5:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10617:24:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 726,
															"nodeType": "IfStatement",
															"src": "10613:130:4",
															"trueBody": {
																"id": 725,
																"nodeType": "Block",
																"src": "10643:100:4",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 720,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 697,
																					"src": "10695:7:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 721,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 703,
																					"src": "10704:16:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 722,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 699,
																					"src": "10722:5:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 719,
																				"name": "ERC20InsufficientAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 120,
																				"src": "10668:26:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
																					"typeString": "function (address,uint256,uint256) pure returns (error)"
																				}
																			},
																			"id": 723,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "10668:60:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 724,
																		"nodeType": "RevertStatement",
																		"src": "10661:67:4"
																	}
																]
															}
														},
														{
															"id": 736,
															"nodeType": "UncheckedBlock",
															"src": "10756:100:4",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 728,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 695,
																				"src": "10793:5:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 729,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 697,
																				"src": "10800:7:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 732,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 730,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 703,
																					"src": "10809:16:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 731,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 699,
																					"src": "10828:5:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10809:24:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"hexValue": "66616c7365",
																				"id": 733,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "bool",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10835:5:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				},
																				"value": "false"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			],
																			"id": 727,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [
																				632,
																				692
																			],
																			"referencedDeclaration": 692,
																			"src": "10784:8:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
																				"typeString": "function (address,address,uint256,bool)"
																			}
																		},
																		"id": 734,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10784:57:4",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 735,
																	"nodeType": "ExpressionStatement",
																	"src": "10784:57:4"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 693,
										"nodeType": "StructuredDocumentation",
										"src": "10120:271:4",
										"text": " @dev Updates `owner`'s allowance for `spender` based on spent `value`.\n Does not update the allowance value in case of infinite allowance.\n Revert if not enough allowance is available.\n Does not emit an {Approval} event."
									},
									"id": 740,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "10405:15:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 700,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 695,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10429:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 740,
												"src": "10421:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 694,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10421:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 697,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10444:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 740,
												"src": "10436:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 696,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10436:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 699,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10461:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 740,
												"src": "10453:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 698,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10453:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10420:47:4"
									},
									"returnParameters": {
										"id": 701,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10485:0:4"
									},
									"scope": 741,
									"src": "10396:476:4",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 742,
							"src": "1106:9768:4",
							"usedErrors": [
								101,
								106,
								111,
								120,
								125,
								130
							],
							"usedEvents": [
								753,
								762
							]
						}
					],
					"src": "105:10770:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							819
						]
					},
					"id": 820,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 743,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "106:24:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 744,
								"nodeType": "StructuredDocumentation",
								"src": "132:71:5",
								"text": " @dev Interface of the ERC-20 standard as defined in the ERC."
							},
							"fullyImplemented": false,
							"id": 819,
							"linearizedBaseContracts": [
								819
							],
							"name": "IERC20",
							"nameLocation": "214:6:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 745,
										"nodeType": "StructuredDocumentation",
										"src": "227:158:5",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 753,
									"name": "Transfer",
									"nameLocation": "396:8:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 752,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 747,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "421:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 753,
												"src": "405:20:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 746,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "405:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 749,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "443:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 753,
												"src": "427:18:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 748,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "427:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 751,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "455:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 753,
												"src": "447:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 750,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "447:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "404:57:5"
									},
									"src": "390:72:5"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 754,
										"nodeType": "StructuredDocumentation",
										"src": "468:148:5",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 762,
									"name": "Approval",
									"nameLocation": "627:8:5",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 761,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 756,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "652:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 762,
												"src": "636:21:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 755,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "636:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 758,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "675:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 762,
												"src": "659:23:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 757,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "659:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 760,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "692:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 762,
												"src": "684:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 759,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "684:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "635:63:5"
									},
									"src": "621:78:5"
								},
								{
									"documentation": {
										"id": 763,
										"nodeType": "StructuredDocumentation",
										"src": "705:65:5",
										"text": " @dev Returns the value of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 768,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "784:11:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 764,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "795:2:5"
									},
									"returnParameters": {
										"id": 767,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 766,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 768,
												"src": "821:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 765,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "821:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "820:9:5"
									},
									"scope": 819,
									"src": "775:55:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 769,
										"nodeType": "StructuredDocumentation",
										"src": "836:71:5",
										"text": " @dev Returns the value of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 776,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "921:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 772,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 771,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "939:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 776,
												"src": "931:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 770,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "931:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "930:17:5"
									},
									"returnParameters": {
										"id": 775,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 774,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 776,
												"src": "971:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 773,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "971:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "970:9:5"
									},
									"scope": 819,
									"src": "912:68:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 777,
										"nodeType": "StructuredDocumentation",
										"src": "986:213:5",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 786,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1213:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 782,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 779,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1230:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 786,
												"src": "1222:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 778,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1222:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 781,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1242:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 786,
												"src": "1234:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 780,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1234:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1221:27:5"
									},
									"returnParameters": {
										"id": 785,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 784,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 786,
												"src": "1267:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 783,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1267:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1266:6:5"
									},
									"scope": 819,
									"src": "1204:69:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 787,
										"nodeType": "StructuredDocumentation",
										"src": "1279:264:5",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 796,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1557:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 792,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 789,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1575:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 796,
												"src": "1567:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 788,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1567:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 791,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1590:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 796,
												"src": "1582:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 790,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1582:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1566:32:5"
									},
									"returnParameters": {
										"id": 795,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 794,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 796,
												"src": "1622:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 793,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1622:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1621:9:5"
									},
									"scope": 819,
									"src": "1548:83:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 797,
										"nodeType": "StructuredDocumentation",
										"src": "1637:667:5",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 806,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2318:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 802,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 799,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2334:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 806,
												"src": "2326:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 798,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2326:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 801,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2351:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 806,
												"src": "2343:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 800,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2343:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2325:32:5"
									},
									"returnParameters": {
										"id": 805,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 804,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 806,
												"src": "2376:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 803,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2376:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2375:6:5"
									},
									"scope": 819,
									"src": "2309:73:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 807,
										"nodeType": "StructuredDocumentation",
										"src": "2388:297:5",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 818,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2699:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 814,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 809,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2720:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 818,
												"src": "2712:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 808,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2712:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 811,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2734:2:5",
												"nodeType": "VariableDeclaration",
												"scope": 818,
												"src": "2726:10:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 810,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2726:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 813,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2746:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 818,
												"src": "2738:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 812,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2738:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2711:41:5"
									},
									"returnParameters": {
										"id": 817,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 816,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 818,
												"src": "2771:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 815,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2771:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2770:6:5"
									},
									"scope": 819,
									"src": "2690:87:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 820,
							"src": "204:2575:5",
							"usedErrors": [],
							"usedEvents": [
								753,
								762
							]
						}
					],
					"src": "106:2674:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol",
					"exportedSymbols": {
						"IERC20": [
							819
						],
						"IERC20Metadata": [
							845
						]
					},
					"id": 846,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 821,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "125:24:6"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 823,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 846,
							"sourceUnit": 820,
							"src": "151:37:6",
							"symbolAliases": [
								{
									"foreign": {
										"id": 822,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 819,
										"src": "159:6:6",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 825,
										"name": "IERC20",
										"nameLocations": [
											"306:6:6"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 819,
										"src": "306:6:6"
									},
									"id": 826,
									"nodeType": "InheritanceSpecifier",
									"src": "306:6:6"
								}
							],
							"canonicalName": "IERC20Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 824,
								"nodeType": "StructuredDocumentation",
								"src": "190:87:6",
								"text": " @dev Interface for the optional metadata functions from the ERC-20 standard."
							},
							"fullyImplemented": false,
							"id": 845,
							"linearizedBaseContracts": [
								845,
								819
							],
							"name": "IERC20Metadata",
							"nameLocation": "288:14:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 827,
										"nodeType": "StructuredDocumentation",
										"src": "319:54:6",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 832,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "387:4:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 828,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "391:2:6"
									},
									"returnParameters": {
										"id": 831,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 830,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 832,
												"src": "417:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 829,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "417:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "416:15:6"
									},
									"scope": 845,
									"src": "378:54:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 833,
										"nodeType": "StructuredDocumentation",
										"src": "438:56:6",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 838,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "508:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 834,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "514:2:6"
									},
									"returnParameters": {
										"id": 837,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 836,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 838,
												"src": "540:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 835,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "540:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "539:15:6"
									},
									"scope": 845,
									"src": "499:56:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 839,
										"nodeType": "StructuredDocumentation",
										"src": "561:65:6",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 844,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "640:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 840,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "648:2:6"
									},
									"returnParameters": {
										"id": 843,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 842,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 844,
												"src": "674:5:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 841,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "674:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "673:7:6"
									},
									"scope": 845,
									"src": "631:50:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 846,
							"src": "278:405:6",
							"usedErrors": [],
							"usedEvents": [
								753,
								762
							]
						}
					],
					"src": "125:559:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
					"exportedSymbols": {
						"IERC1363": [
							81
						],
						"IERC20": [
							819
						],
						"SafeERC20": [
							1309
						]
					},
					"id": 1310,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 847,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "115:24:7"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 849,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1310,
							"sourceUnit": 820,
							"src": "141:37:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 848,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 819,
										"src": "149:6:7",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/interfaces/IERC1363.sol",
							"file": "../../../interfaces/IERC1363.sol",
							"id": 851,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1310,
							"sourceUnit": 82,
							"src": "179:58:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 850,
										"name": "IERC1363",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 81,
										"src": "187:8:7",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeERC20",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 852,
								"nodeType": "StructuredDocumentation",
								"src": "239:458:7",
								"text": " @title SafeERC20\n @dev Wrappers around ERC-20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 1309,
							"linearizedBaseContracts": [
								1309
							],
							"name": "SafeERC20",
							"nameLocation": "706:9:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 853,
										"nodeType": "StructuredDocumentation",
										"src": "722:65:7",
										"text": " @dev An operation with an ERC-20 token failed."
									},
									"errorSelector": "5274afe7",
									"id": 857,
									"name": "SafeERC20FailedOperation",
									"nameLocation": "798:24:7",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 856,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 855,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "831:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 857,
												"src": "823:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 854,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "823:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "822:15:7"
									},
									"src": "792:46:7"
								},
								{
									"documentation": {
										"id": 858,
										"nodeType": "StructuredDocumentation",
										"src": "844:71:7",
										"text": " @dev Indicates a failed `decreaseAllowance` request."
									},
									"errorSelector": "e570110f",
									"id": 866,
									"name": "SafeERC20FailedDecreaseAllowance",
									"nameLocation": "926:32:7",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 865,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 860,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "967:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 866,
												"src": "959:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 859,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "959:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 862,
												"mutability": "mutable",
												"name": "currentAllowance",
												"nameLocation": "984:16:7",
												"nodeType": "VariableDeclaration",
												"scope": 866,
												"src": "976:24:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 861,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "976:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 864,
												"mutability": "mutable",
												"name": "requestedDecrease",
												"nameLocation": "1010:17:7",
												"nodeType": "VariableDeclaration",
												"scope": 866,
												"src": "1002:25:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 863,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1002:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "958:70:7"
									},
									"src": "920:109:7"
								},
								{
									"body": {
										"id": 889,
										"nodeType": "Block",
										"src": "1291:88:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 878,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 870,
															"src": "1321:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$819",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"id": 881,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 870,
																		"src": "1343:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$819",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 882,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1349:8:7",
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 786,
																	"src": "1343:14:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	}
																},
																{
																	"components": [
																		{
																			"id": 883,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 872,
																			"src": "1360:2:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 884,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 874,
																			"src": "1364:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 885,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1359:11:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,uint256)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	},
																	{
																		"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,uint256)"
																	}
																],
																"expression": {
																	"id": 879,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1328:3:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 880,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1332:10:7",
																"memberName": "encodeCall",
																"nodeType": "MemberAccess",
																"src": "1328:14:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 886,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1328:43:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$819",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 877,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1267,
														"src": "1301:19:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$819_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 887,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1301:71:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 888,
												"nodeType": "ExpressionStatement",
												"src": "1301:71:7"
											}
										]
									},
									"documentation": {
										"id": 867,
										"nodeType": "StructuredDocumentation",
										"src": "1035:179:7",
										"text": " @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."
									},
									"id": 890,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "1228:12:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 875,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 870,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1248:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 890,
												"src": "1241:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$819",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 869,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 868,
														"name": "IERC20",
														"nameLocations": [
															"1241:6:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 819,
														"src": "1241:6:7"
													},
													"referencedDeclaration": 819,
													"src": "1241:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$819",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 872,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1263:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 890,
												"src": "1255:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 871,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1255:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 874,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1275:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 890,
												"src": "1267:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 873,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1267:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1240:41:7"
									},
									"returnParameters": {
										"id": 876,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1291:0:7"
									},
									"scope": 1309,
									"src": "1219:160:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 916,
										"nodeType": "Block",
										"src": "1708:98:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 904,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 894,
															"src": "1738:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$819",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"id": 907,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 894,
																		"src": "1760:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$819",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 908,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1766:12:7",
																	"memberName": "transferFrom",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 818,
																	"src": "1760:18:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,address,uint256) external returns (bool)"
																	}
																},
																{
																	"components": [
																		{
																			"id": 909,
																			"name": "from",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 896,
																			"src": "1781:4:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 910,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 898,
																			"src": "1787:2:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 911,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 900,
																			"src": "1791:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 912,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "1780:17:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,address,uint256)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,address,uint256) external returns (bool)"
																	},
																	{
																		"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,address,uint256)"
																	}
																],
																"expression": {
																	"id": 905,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1745:3:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 906,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1749:10:7",
																"memberName": "encodeCall",
																"nodeType": "MemberAccess",
																"src": "1745:14:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 913,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1745:53:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$819",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 903,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1267,
														"src": "1718:19:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$819_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 914,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1718:81:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 915,
												"nodeType": "ExpressionStatement",
												"src": "1718:81:7"
											}
										]
									},
									"documentation": {
										"id": 891,
										"nodeType": "StructuredDocumentation",
										"src": "1385:228:7",
										"text": " @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."
									},
									"id": 917,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1627:16:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 901,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 894,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1651:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 917,
												"src": "1644:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$819",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 893,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 892,
														"name": "IERC20",
														"nameLocations": [
															"1644:6:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 819,
														"src": "1644:6:7"
													},
													"referencedDeclaration": 819,
													"src": "1644:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$819",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 896,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1666:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 917,
												"src": "1658:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 895,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1658:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 898,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1680:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 917,
												"src": "1672:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 897,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1672:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 900,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1692:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 917,
												"src": "1684:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 899,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1684:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1643:55:7"
									},
									"returnParameters": {
										"id": 902,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1708:0:7"
									},
									"scope": 1309,
									"src": "1618:188:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 942,
										"nodeType": "Block",
										"src": "2033:99:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 931,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 921,
															"src": "2074:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$819",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"id": 934,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 921,
																		"src": "2096:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$819",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 935,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2102:8:7",
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 786,
																	"src": "2096:14:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	}
																},
																{
																	"components": [
																		{
																			"id": 936,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 923,
																			"src": "2113:2:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 937,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 925,
																			"src": "2117:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 938,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "2112:11:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,uint256)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	},
																	{
																		"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,uint256)"
																	}
																],
																"expression": {
																	"id": 932,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2081:3:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 933,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2085:10:7",
																"memberName": "encodeCall",
																"nodeType": "MemberAccess",
																"src": "2081:14:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 939,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2081:43:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$819",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 930,
														"name": "_callOptionalReturnBool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1308,
														"src": "2050:23:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$819_$_t_bytes_memory_ptr_$returns$_t_bool_$",
															"typeString": "function (contract IERC20,bytes memory) returns (bool)"
														}
													},
													"id": 940,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2050:75:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 929,
												"id": 941,
												"nodeType": "Return",
												"src": "2043:82:7"
											}
										]
									},
									"documentation": {
										"id": 918,
										"nodeType": "StructuredDocumentation",
										"src": "1812:126:7",
										"text": " @dev Variant of {safeTransfer} that returns a bool instead of reverting if the operation is not successful."
									},
									"id": 943,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySafeTransfer",
									"nameLocation": "1952:15:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 926,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 921,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "1975:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 943,
												"src": "1968:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$819",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 920,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 919,
														"name": "IERC20",
														"nameLocations": [
															"1968:6:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 819,
														"src": "1968:6:7"
													},
													"referencedDeclaration": 819,
													"src": "1968:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$819",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 923,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1990:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 943,
												"src": "1982:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 922,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1982:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 925,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2002:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 943,
												"src": "1994:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 924,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1994:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1967:41:7"
									},
									"returnParameters": {
										"id": 929,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 928,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 943,
												"src": "2027:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 927,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2027:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2026:6:7"
									},
									"scope": 1309,
									"src": "1943:189:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 971,
										"nodeType": "Block",
										"src": "2381:109:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 959,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 947,
															"src": "2422:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$819",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"id": 962,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 947,
																		"src": "2444:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$819",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 963,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "2450:12:7",
																	"memberName": "transferFrom",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 818,
																	"src": "2444:18:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,address,uint256) external returns (bool)"
																	}
																},
																{
																	"components": [
																		{
																			"id": 964,
																			"name": "from",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 949,
																			"src": "2465:4:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 965,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 951,
																			"src": "2471:2:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 966,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 953,
																			"src": "2475:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 967,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "2464:17:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,address,uint256)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,address,uint256) external returns (bool)"
																	},
																	{
																		"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,address,uint256)"
																	}
																],
																"expression": {
																	"id": 960,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2429:3:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 961,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2433:10:7",
																"memberName": "encodeCall",
																"nodeType": "MemberAccess",
																"src": "2429:14:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 968,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2429:53:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$819",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 958,
														"name": "_callOptionalReturnBool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1308,
														"src": "2398:23:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$819_$_t_bytes_memory_ptr_$returns$_t_bool_$",
															"typeString": "function (contract IERC20,bytes memory) returns (bool)"
														}
													},
													"id": 969,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2398:85:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 957,
												"id": 970,
												"nodeType": "Return",
												"src": "2391:92:7"
											}
										]
									},
									"documentation": {
										"id": 944,
										"nodeType": "StructuredDocumentation",
										"src": "2138:130:7",
										"text": " @dev Variant of {safeTransferFrom} that returns a bool instead of reverting if the operation is not successful."
									},
									"id": 972,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySafeTransferFrom",
									"nameLocation": "2282:19:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 954,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 947,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "2309:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 972,
												"src": "2302:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$819",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 946,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 945,
														"name": "IERC20",
														"nameLocations": [
															"2302:6:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 819,
														"src": "2302:6:7"
													},
													"referencedDeclaration": 819,
													"src": "2302:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$819",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 949,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2324:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 972,
												"src": "2316:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 948,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2316:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 951,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2338:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 972,
												"src": "2330:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 950,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2330:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 953,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2350:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 972,
												"src": "2342:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 952,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2342:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2301:55:7"
									},
									"returnParameters": {
										"id": 957,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 956,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 972,
												"src": "2375:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 955,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2375:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2374:6:7"
									},
									"scope": 1309,
									"src": "2273:217:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1002,
										"nodeType": "Block",
										"src": "3232:139:7",
										"statements": [
											{
												"assignments": [
													984
												],
												"declarations": [
													{
														"constant": false,
														"id": 984,
														"mutability": "mutable",
														"name": "oldAllowance",
														"nameLocation": "3250:12:7",
														"nodeType": "VariableDeclaration",
														"scope": 1002,
														"src": "3242:20:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 983,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "3242:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 993,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 989,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3289:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SafeERC20_$1309",
																		"typeString": "library SafeERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SafeERC20_$1309",
																		"typeString": "library SafeERC20"
																	}
																],
																"id": 988,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3281:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 987,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3281:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 990,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3281:13:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 991,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 978,
															"src": "3296:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 985,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 976,
															"src": "3265:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$819",
																"typeString": "contract IERC20"
															}
														},
														"id": 986,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3271:9:7",
														"memberName": "allowance",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 796,
														"src": "3265:15:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view external returns (uint256)"
														}
													},
													"id": 992,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3265:39:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3242:62:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 995,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 976,
															"src": "3327:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$819",
																"typeString": "contract IERC20"
															}
														},
														{
															"id": 996,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 978,
															"src": "3334:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 999,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 997,
																"name": "oldAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 984,
																"src": "3343:12:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 998,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 980,
																"src": "3358:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3343:20:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$819",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 994,
														"name": "forceApprove",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1093,
														"src": "3314:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$819_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 1000,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3314:50:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1001,
												"nodeType": "ExpressionStatement",
												"src": "3314:50:7"
											}
										]
									},
									"documentation": {
										"id": 973,
										"nodeType": "StructuredDocumentation",
										"src": "2496:645:7",
										"text": " @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful.\n IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior."
									},
									"id": 1003,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nameLocation": "3155:21:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 981,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 976,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "3184:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1003,
												"src": "3177:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$819",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 975,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 974,
														"name": "IERC20",
														"nameLocations": [
															"3177:6:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 819,
														"src": "3177:6:7"
													},
													"referencedDeclaration": 819,
													"src": "3177:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$819",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 978,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3199:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1003,
												"src": "3191:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 977,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3191:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 980,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3216:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1003,
												"src": "3208:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 979,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3208:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3176:46:7"
									},
									"returnParameters": {
										"id": 982,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3232:0:7"
									},
									"scope": 1309,
									"src": "3146:225:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1045,
										"nodeType": "Block",
										"src": "4137:370:7",
										"statements": [
											{
												"id": 1044,
												"nodeType": "UncheckedBlock",
												"src": "4147:354:7",
												"statements": [
													{
														"assignments": [
															1015
														],
														"declarations": [
															{
																"constant": false,
																"id": 1015,
																"mutability": "mutable",
																"name": "currentAllowance",
																"nameLocation": "4179:16:7",
																"nodeType": "VariableDeclaration",
																"scope": 1044,
																"src": "4171:24:7",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1014,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4171:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1024,
														"initialValue": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1020,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "4222:4:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$1309",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$1309",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 1019,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4214:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1018,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "4214:7:7",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1021,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4214:13:7",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1022,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1009,
																	"src": "4229:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 1016,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1007,
																	"src": "4198:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$819",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 1017,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4204:9:7",
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 796,
																"src": "4198:15:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 1023,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4198:39:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4171:66:7"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1027,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1025,
																"name": "currentAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1015,
																"src": "4255:16:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 1026,
																"name": "requestedDecrease",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1011,
																"src": "4274:17:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4255:36:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1035,
														"nodeType": "IfStatement",
														"src": "4251:160:7",
														"trueBody": {
															"id": 1034,
															"nodeType": "Block",
															"src": "4293:118:7",
															"statements": [
																{
																	"errorCall": {
																		"arguments": [
																			{
																				"id": 1029,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1009,
																				"src": "4351:7:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 1030,
																				"name": "currentAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1015,
																				"src": "4360:16:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"id": 1031,
																				"name": "requestedDecrease",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1011,
																				"src": "4378:17:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 1028,
																			"name": "SafeERC20FailedDecreaseAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 866,
																			"src": "4318:32:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
																				"typeString": "function (address,uint256,uint256) pure returns (error)"
																			}
																		},
																		"id": 1032,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4318:78:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_error",
																			"typeString": "error"
																		}
																	},
																	"id": 1033,
																	"nodeType": "RevertStatement",
																	"src": "4311:85:7"
																}
															]
														}
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 1037,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1007,
																	"src": "4437:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$819",
																		"typeString": "contract IERC20"
																	}
																},
																{
																	"id": 1038,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1009,
																	"src": "4444:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1041,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1039,
																		"name": "currentAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1015,
																		"src": "4453:16:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 1040,
																		"name": "requestedDecrease",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1011,
																		"src": "4472:17:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "4453:36:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$819",
																		"typeString": "contract IERC20"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1036,
																"name": "forceApprove",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1093,
																"src": "4424:12:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$819_$_t_address_$_t_uint256_$returns$__$",
																	"typeString": "function (contract IERC20,address,uint256)"
																}
															},
															"id": 1042,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4424:66:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1043,
														"nodeType": "ExpressionStatement",
														"src": "4424:66:7"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1004,
										"nodeType": "StructuredDocumentation",
										"src": "3377:657:7",
										"text": " @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n value, non-reverting calls are assumed to be successful.\n IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior."
									},
									"id": 1046,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nameLocation": "4048:21:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1012,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1007,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "4077:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1046,
												"src": "4070:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$819",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1006,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1005,
														"name": "IERC20",
														"nameLocations": [
															"4070:6:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 819,
														"src": "4070:6:7"
													},
													"referencedDeclaration": 819,
													"src": "4070:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$819",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1009,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4092:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1046,
												"src": "4084:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1008,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4084:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1011,
												"mutability": "mutable",
												"name": "requestedDecrease",
												"nameLocation": "4109:17:7",
												"nodeType": "VariableDeclaration",
												"scope": 1046,
												"src": "4101:25:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1010,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4101:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4069:58:7"
									},
									"returnParameters": {
										"id": 1013,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4137:0:7"
									},
									"scope": 1309,
									"src": "4039:468:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1092,
										"nodeType": "Block",
										"src": "5161:303:7",
										"statements": [
											{
												"assignments": [
													1058
												],
												"declarations": [
													{
														"constant": false,
														"id": 1058,
														"mutability": "mutable",
														"name": "approvalCall",
														"nameLocation": "5184:12:7",
														"nodeType": "VariableDeclaration",
														"scope": 1092,
														"src": "5171:25:7",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1057,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5171:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1067,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 1061,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1050,
																"src": "5214:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$819",
																	"typeString": "contract IERC20"
																}
															},
															"id": 1062,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5220:7:7",
															"memberName": "approve",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 806,
															"src": "5214:13:7",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																"typeString": "function (address,uint256) external returns (bool)"
															}
														},
														{
															"components": [
																{
																	"id": 1063,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1052,
																	"src": "5230:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1064,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1054,
																	"src": "5239:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1065,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "5229:16:7",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																"typeString": "tuple(address,uint256)"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																"typeString": "function (address,uint256) external returns (bool)"
															},
															{
																"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																"typeString": "tuple(address,uint256)"
															}
														],
														"expression": {
															"id": 1059,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "5199:3:7",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 1060,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "5203:10:7",
														"memberName": "encodeCall",
														"nodeType": "MemberAccess",
														"src": "5199:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
															"typeString": "function () pure returns (bytes memory)"
														}
													},
													"id": 1066,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5199:47:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5171:75:7"
											},
											{
												"condition": {
													"id": 1072,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "5261:45:7",
													"subExpression": {
														"arguments": [
															{
																"id": 1069,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1050,
																"src": "5286:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$819",
																	"typeString": "contract IERC20"
																}
															},
															{
																"id": 1070,
																"name": "approvalCall",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1058,
																"src": "5293:12:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_IERC20_$819",
																	"typeString": "contract IERC20"
																},
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 1068,
															"name": "_callOptionalReturnBool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1308,
															"src": "5262:23:7",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$819_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																"typeString": "function (contract IERC20,bytes memory) returns (bool)"
															}
														},
														"id": 1071,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5262:44:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1091,
												"nodeType": "IfStatement",
												"src": "5257:201:7",
												"trueBody": {
													"id": 1090,
													"nodeType": "Block",
													"src": "5308:150:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1074,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1050,
																		"src": "5342:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$819",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 1077,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1050,
																					"src": "5364:5:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$819",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 1078,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "5370:7:7",
																				"memberName": "approve",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 806,
																				"src": "5364:13:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 1079,
																						"name": "spender",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1052,
																						"src": "5380:7:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					{
																						"hexValue": "30",
																						"id": 1080,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "5389:1:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_0_by_1",
																							"typeString": "int_const 0"
																						},
																						"value": "0"
																					}
																				],
																				"id": 1081,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "5379:12:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_tuple$_t_address_$_t_rational_0_by_1_$",
																					"typeString": "tuple(address,int_const 0)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				},
																				{
																					"typeIdentifier": "t_tuple$_t_address_$_t_rational_0_by_1_$",
																					"typeString": "tuple(address,int_const 0)"
																				}
																			],
																			"expression": {
																				"id": 1075,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "5349:3:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 1076,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberLocation": "5353:10:7",
																			"memberName": "encodeCall",
																			"nodeType": "MemberAccess",
																			"src": "5349:14:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																				"typeString": "function () pure returns (bytes memory)"
																			}
																		},
																		"id": 1082,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5349:43:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$819",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 1073,
																	"name": "_callOptionalReturn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1267,
																	"src": "5322:19:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$819_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (contract IERC20,bytes memory)"
																	}
																},
																"id": 1083,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5322:71:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1084,
															"nodeType": "ExpressionStatement",
															"src": "5322:71:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1086,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1050,
																		"src": "5427:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$819",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"id": 1087,
																		"name": "approvalCall",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1058,
																		"src": "5434:12:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$819",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 1085,
																	"name": "_callOptionalReturn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1267,
																	"src": "5407:19:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$819_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (contract IERC20,bytes memory)"
																	}
																},
																"id": 1088,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5407:40:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1089,
															"nodeType": "ExpressionStatement",
															"src": "5407:40:7"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1047,
										"nodeType": "StructuredDocumentation",
										"src": "4513:566:7",
										"text": " @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n to be set to zero before setting it to a non-zero value, such as USDT.\n NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n set here."
									},
									"id": 1093,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "forceApprove",
									"nameLocation": "5093:12:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1055,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1050,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "5113:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1093,
												"src": "5106:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$819",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1049,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1048,
														"name": "IERC20",
														"nameLocations": [
															"5106:6:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 819,
														"src": "5106:6:7"
													},
													"referencedDeclaration": 819,
													"src": "5106:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$819",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1052,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "5128:7:7",
												"nodeType": "VariableDeclaration",
												"scope": 1093,
												"src": "5120:15:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1051,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5120:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1054,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5145:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1093,
												"src": "5137:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1053,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5137:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5105:46:7"
									},
									"returnParameters": {
										"id": 1056,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5161:0:7"
									},
									"scope": 1309,
									"src": "5084:380:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1135,
										"nodeType": "Block",
										"src": "5911:219:7",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1110,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 1106,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1099,
																"src": "5925:2:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1107,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5928:4:7",
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "5925:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1108,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5933:6:7",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "5925:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1109,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5943:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "5925:19:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"id": 1124,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "6011:39:7",
														"subExpression": {
															"arguments": [
																{
																	"id": 1120,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1099,
																	"src": "6034:2:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1121,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1101,
																	"src": "6038:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 1122,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1103,
																	"src": "6045:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 1118,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1097,
																	"src": "6012:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC1363_$81",
																		"typeString": "contract IERC1363"
																	}
																},
																"id": 1119,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "6018:15:7",
																"memberName": "transferAndCall",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 32,
																"src": "6012:21:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																	"typeString": "function (address,uint256,bytes memory) external returns (bool)"
																}
															},
															"id": 1123,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6012:38:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 1133,
													"nodeType": "IfStatement",
													"src": "6007:117:7",
													"trueBody": {
														"id": 1132,
														"nodeType": "Block",
														"src": "6052:72:7",
														"statements": [
															{
																"errorCall": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 1128,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1097,
																					"src": "6106:5:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC1363_$81",
																						"typeString": "contract IERC1363"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_contract$_IERC1363_$81",
																						"typeString": "contract IERC1363"
																					}
																				],
																				"id": 1127,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "6098:7:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 1126,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "6098:7:7",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1129,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6098:14:7",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 1125,
																		"name": "SafeERC20FailedOperation",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 857,
																		"src": "6073:24:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																			"typeString": "function (address) pure returns (error)"
																		}
																	},
																	"id": 1130,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6073:40:7",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_error",
																		"typeString": "error"
																	}
																},
																"id": 1131,
																"nodeType": "RevertStatement",
																"src": "6066:47:7"
															}
														]
													}
												},
												"id": 1134,
												"nodeType": "IfStatement",
												"src": "5921:203:7",
												"trueBody": {
													"id": 1117,
													"nodeType": "Block",
													"src": "5946:55:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1112,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1097,
																		"src": "5973:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC1363_$81",
																			"typeString": "contract IERC1363"
																		}
																	},
																	{
																		"id": 1113,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1099,
																		"src": "5980:2:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1114,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1101,
																		"src": "5984:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC1363_$81",
																			"typeString": "contract IERC1363"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1111,
																	"name": "safeTransfer",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 890,
																	"src": "5960:12:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$819_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 1115,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5960:30:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1116,
															"nodeType": "ExpressionStatement",
															"src": "5960:30:7"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1094,
										"nodeType": "StructuredDocumentation",
										"src": "5470:333:7",
										"text": " @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n targeting contracts.\n Reverts if the returned value is other than `true`."
									},
									"id": 1136,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferAndCallRelaxed",
									"nameLocation": "5817:22:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1104,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1097,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "5849:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1136,
												"src": "5840:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC1363_$81",
													"typeString": "contract IERC1363"
												},
												"typeName": {
													"id": 1096,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1095,
														"name": "IERC1363",
														"nameLocations": [
															"5840:8:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 81,
														"src": "5840:8:7"
													},
													"referencedDeclaration": 81,
													"src": "5840:8:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC1363_$81",
														"typeString": "contract IERC1363"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1099,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5864:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 1136,
												"src": "5856:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1098,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5856:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1101,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5876:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1136,
												"src": "5868:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1100,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5868:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1103,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5896:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1136,
												"src": "5883:17:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1102,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5883:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5839:62:7"
									},
									"returnParameters": {
										"id": 1105,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5911:0:7"
									},
									"scope": 1309,
									"src": "5808:322:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1182,
										"nodeType": "Block",
										"src": "6649:239:7",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1155,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 1151,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1144,
																"src": "6663:2:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1152,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "6666:4:7",
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "6663:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1153,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6671:6:7",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "6663:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1154,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6681:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "6663:19:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"id": 1171,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "6759:49:7",
														"subExpression": {
															"arguments": [
																{
																	"id": 1166,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1142,
																	"src": "6786:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1167,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1144,
																	"src": "6792:2:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1168,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1146,
																	"src": "6796:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 1169,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1148,
																	"src": "6803:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 1164,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1140,
																	"src": "6760:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC1363_$81",
																		"typeString": "contract IERC1363"
																	}
																},
																"id": 1165,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "6766:19:7",
																"memberName": "transferFromAndCall",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 58,
																"src": "6760:25:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																	"typeString": "function (address,address,uint256,bytes memory) external returns (bool)"
																}
															},
															"id": 1170,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6760:48:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 1180,
													"nodeType": "IfStatement",
													"src": "6755:127:7",
													"trueBody": {
														"id": 1179,
														"nodeType": "Block",
														"src": "6810:72:7",
														"statements": [
															{
																"errorCall": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 1175,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1140,
																					"src": "6864:5:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC1363_$81",
																						"typeString": "contract IERC1363"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_contract$_IERC1363_$81",
																						"typeString": "contract IERC1363"
																					}
																				],
																				"id": 1174,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "6856:7:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 1173,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "6856:7:7",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1176,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6856:14:7",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 1172,
																		"name": "SafeERC20FailedOperation",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 857,
																		"src": "6831:24:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																			"typeString": "function (address) pure returns (error)"
																		}
																	},
																	"id": 1177,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6831:40:7",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_error",
																		"typeString": "error"
																	}
																},
																"id": 1178,
																"nodeType": "RevertStatement",
																"src": "6824:47:7"
															}
														]
													}
												},
												"id": 1181,
												"nodeType": "IfStatement",
												"src": "6659:223:7",
												"trueBody": {
													"id": 1163,
													"nodeType": "Block",
													"src": "6684:65:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1157,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1140,
																		"src": "6715:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC1363_$81",
																			"typeString": "contract IERC1363"
																		}
																	},
																	{
																		"id": 1158,
																		"name": "from",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1142,
																		"src": "6722:4:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1159,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1144,
																		"src": "6728:2:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1160,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1146,
																		"src": "6732:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC1363_$81",
																			"typeString": "contract IERC1363"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1156,
																	"name": "safeTransferFrom",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 917,
																	"src": "6698:16:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$819_$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (contract IERC20,address,address,uint256)"
																	}
																},
																"id": 1161,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6698:40:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1162,
															"nodeType": "ExpressionStatement",
															"src": "6698:40:7"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1137,
										"nodeType": "StructuredDocumentation",
										"src": "6136:341:7",
										"text": " @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n targeting contracts.\n Reverts if the returned value is other than `true`."
									},
									"id": 1183,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFromAndCallRelaxed",
									"nameLocation": "6491:26:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1149,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1140,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "6536:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1183,
												"src": "6527:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC1363_$81",
													"typeString": "contract IERC1363"
												},
												"typeName": {
													"id": 1139,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1138,
														"name": "IERC1363",
														"nameLocations": [
															"6527:8:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 81,
														"src": "6527:8:7"
													},
													"referencedDeclaration": 81,
													"src": "6527:8:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC1363_$81",
														"typeString": "contract IERC1363"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1142,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6559:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1183,
												"src": "6551:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1141,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6551:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1144,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6581:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 1183,
												"src": "6573:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1143,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6573:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1146,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6601:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1183,
												"src": "6593:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1145,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6593:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1148,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6629:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1183,
												"src": "6616:17:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1147,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6616:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6517:122:7"
									},
									"returnParameters": {
										"id": 1150,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6649:0:7"
									},
									"scope": 1309,
									"src": "6482:406:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1225,
										"nodeType": "Block",
										"src": "7655:218:7",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1200,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 1196,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1189,
																"src": "7669:2:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1197,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "7672:4:7",
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "7669:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1198,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7677:6:7",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "7669:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 1199,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7687:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "7669:19:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"id": 1214,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "7755:38:7",
														"subExpression": {
															"arguments": [
																{
																	"id": 1210,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1189,
																	"src": "7777:2:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1211,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1191,
																	"src": "7781:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 1212,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1193,
																	"src": "7788:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 1208,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1187,
																	"src": "7756:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC1363_$81",
																		"typeString": "contract IERC1363"
																	}
																},
																"id": 1209,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "7762:14:7",
																"memberName": "approveAndCall",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 80,
																"src": "7756:20:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																	"typeString": "function (address,uint256,bytes memory) external returns (bool)"
																}
															},
															"id": 1213,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7756:37:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 1223,
													"nodeType": "IfStatement",
													"src": "7751:116:7",
													"trueBody": {
														"id": 1222,
														"nodeType": "Block",
														"src": "7795:72:7",
														"statements": [
															{
																"errorCall": {
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"id": 1218,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1187,
																					"src": "7849:5:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC1363_$81",
																						"typeString": "contract IERC1363"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_contract$_IERC1363_$81",
																						"typeString": "contract IERC1363"
																					}
																				],
																				"id": 1217,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "7841:7:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 1216,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "7841:7:7",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1219,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7841:14:7",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 1215,
																		"name": "SafeERC20FailedOperation",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 857,
																		"src": "7816:24:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																			"typeString": "function (address) pure returns (error)"
																		}
																	},
																	"id": 1220,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7816:40:7",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_error",
																		"typeString": "error"
																	}
																},
																"id": 1221,
																"nodeType": "RevertStatement",
																"src": "7809:47:7"
															}
														]
													}
												},
												"id": 1224,
												"nodeType": "IfStatement",
												"src": "7665:202:7",
												"trueBody": {
													"id": 1207,
													"nodeType": "Block",
													"src": "7690:55:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1202,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1187,
																		"src": "7717:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC1363_$81",
																			"typeString": "contract IERC1363"
																		}
																	},
																	{
																		"id": 1203,
																		"name": "to",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1189,
																		"src": "7724:2:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1204,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1191,
																		"src": "7728:5:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC1363_$81",
																			"typeString": "contract IERC1363"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1201,
																	"name": "forceApprove",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1093,
																	"src": "7704:12:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$819_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (contract IERC20,address,uint256)"
																	}
																},
																"id": 1205,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7704:30:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1206,
															"nodeType": "ExpressionStatement",
															"src": "7704:30:7"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1184,
										"nodeType": "StructuredDocumentation",
										"src": "6894:654:7",
										"text": " @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n targeting contracts.\n NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n once without retrying, and relies on the returned value to be true.\n Reverts if the returned value is other than `true`."
									},
									"id": 1226,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approveAndCallRelaxed",
									"nameLocation": "7562:21:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1194,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1187,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "7593:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1226,
												"src": "7584:14:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC1363_$81",
													"typeString": "contract IERC1363"
												},
												"typeName": {
													"id": 1186,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1185,
														"name": "IERC1363",
														"nameLocations": [
															"7584:8:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 81,
														"src": "7584:8:7"
													},
													"referencedDeclaration": 81,
													"src": "7584:8:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC1363_$81",
														"typeString": "contract IERC1363"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1189,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "7608:2:7",
												"nodeType": "VariableDeclaration",
												"scope": 1226,
												"src": "7600:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1188,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7600:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1191,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "7620:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1226,
												"src": "7612:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1190,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7612:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1193,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "7640:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1226,
												"src": "7627:17:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1192,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7627:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7583:62:7"
									},
									"returnParameters": {
										"id": 1195,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7655:0:7"
									},
									"scope": 1309,
									"src": "7553:320:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1266,
										"nodeType": "Block",
										"src": "8440:650:7",
										"statements": [
											{
												"assignments": [
													1236
												],
												"declarations": [
													{
														"constant": false,
														"id": 1236,
														"mutability": "mutable",
														"name": "returnSize",
														"nameLocation": "8458:10:7",
														"nodeType": "VariableDeclaration",
														"scope": 1266,
														"src": "8450:18:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1235,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8450:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1237,
												"nodeType": "VariableDeclarationStatement",
												"src": "8450:18:7"
											},
											{
												"assignments": [
													1239
												],
												"declarations": [
													{
														"constant": false,
														"id": 1239,
														"mutability": "mutable",
														"name": "returnValue",
														"nameLocation": "8486:11:7",
														"nodeType": "VariableDeclaration",
														"scope": 1266,
														"src": "8478:19:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1238,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8478:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1240,
												"nodeType": "VariableDeclarationStatement",
												"src": "8478:19:7"
											},
											{
												"AST": {
													"nativeSrc": "8532:396:7",
													"nodeType": "YulBlock",
													"src": "8532:396:7",
													"statements": [
														{
															"nativeSrc": "8546:75:7",
															"nodeType": "YulVariableDeclaration",
															"src": "8546:75:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [],
																		"functionName": {
																			"name": "gas",
																			"nativeSrc": "8566:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "8566:3:7"
																		},
																		"nativeSrc": "8566:5:7",
																		"nodeType": "YulFunctionCall",
																		"src": "8566:5:7"
																	},
																	{
																		"name": "token",
																		"nativeSrc": "8573:5:7",
																		"nodeType": "YulIdentifier",
																		"src": "8573:5:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8580:1:7",
																		"nodeType": "YulLiteral",
																		"src": "8580:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nativeSrc": "8587:4:7",
																				"nodeType": "YulIdentifier",
																				"src": "8587:4:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8593:4:7",
																				"nodeType": "YulLiteral",
																				"src": "8593:4:7",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "8583:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "8583:3:7"
																		},
																		"nativeSrc": "8583:15:7",
																		"nodeType": "YulFunctionCall",
																		"src": "8583:15:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nativeSrc": "8606:4:7",
																				"nodeType": "YulIdentifier",
																				"src": "8606:4:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nativeSrc": "8600:5:7",
																			"nodeType": "YulIdentifier",
																			"src": "8600:5:7"
																		},
																		"nativeSrc": "8600:11:7",
																		"nodeType": "YulFunctionCall",
																		"src": "8600:11:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8613:1:7",
																		"nodeType": "YulLiteral",
																		"src": "8613:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8616:4:7",
																		"nodeType": "YulLiteral",
																		"src": "8616:4:7",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "call",
																	"nativeSrc": "8561:4:7",
																	"nodeType": "YulIdentifier",
																	"src": "8561:4:7"
																},
																"nativeSrc": "8561:60:7",
																"nodeType": "YulFunctionCall",
																"src": "8561:60:7"
															},
															"variables": [
																{
																	"name": "success",
																	"nativeSrc": "8550:7:7",
																	"nodeType": "YulTypedName",
																	"src": "8550:7:7",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "8682:157:7",
																"nodeType": "YulBlock",
																"src": "8682:157:7",
																"statements": [
																	{
																		"nativeSrc": "8700:22:7",
																		"nodeType": "YulVariableDeclaration",
																		"src": "8700:22:7",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "8717:4:7",
																					"nodeType": "YulLiteral",
																					"src": "8717:4:7",
																					"type": "",
																					"value": "0x40"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "8711:5:7",
																				"nodeType": "YulIdentifier",
																				"src": "8711:5:7"
																			},
																			"nativeSrc": "8711:11:7",
																			"nodeType": "YulFunctionCall",
																			"src": "8711:11:7"
																		},
																		"variables": [
																			{
																				"name": "ptr",
																				"nativeSrc": "8704:3:7",
																				"nodeType": "YulTypedName",
																				"src": "8704:3:7",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "ptr",
																					"nativeSrc": "8754:3:7",
																					"nodeType": "YulIdentifier",
																					"src": "8754:3:7"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "8759:1:7",
																					"nodeType": "YulLiteral",
																					"src": "8759:1:7",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [],
																					"functionName": {
																						"name": "returndatasize",
																						"nativeSrc": "8762:14:7",
																						"nodeType": "YulIdentifier",
																						"src": "8762:14:7"
																					},
																					"nativeSrc": "8762:16:7",
																					"nodeType": "YulFunctionCall",
																					"src": "8762:16:7"
																				}
																			],
																			"functionName": {
																				"name": "returndatacopy",
																				"nativeSrc": "8739:14:7",
																				"nodeType": "YulIdentifier",
																				"src": "8739:14:7"
																			},
																			"nativeSrc": "8739:40:7",
																			"nodeType": "YulFunctionCall",
																			"src": "8739:40:7"
																		},
																		"nativeSrc": "8739:40:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "8739:40:7"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "ptr",
																					"nativeSrc": "8803:3:7",
																					"nodeType": "YulIdentifier",
																					"src": "8803:3:7"
																				},
																				{
																					"arguments": [],
																					"functionName": {
																						"name": "returndatasize",
																						"nativeSrc": "8808:14:7",
																						"nodeType": "YulIdentifier",
																						"src": "8808:14:7"
																					},
																					"nativeSrc": "8808:16:7",
																					"nodeType": "YulFunctionCall",
																					"src": "8808:16:7"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "8796:6:7",
																				"nodeType": "YulIdentifier",
																				"src": "8796:6:7"
																			},
																			"nativeSrc": "8796:29:7",
																			"nodeType": "YulFunctionCall",
																			"src": "8796:29:7"
																		},
																		"nativeSrc": "8796:29:7",
																		"nodeType": "YulExpressionStatement",
																		"src": "8796:29:7"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "success",
																		"nativeSrc": "8673:7:7",
																		"nodeType": "YulIdentifier",
																		"src": "8673:7:7"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "8666:6:7",
																	"nodeType": "YulIdentifier",
																	"src": "8666:6:7"
																},
																"nativeSrc": "8666:15:7",
																"nodeType": "YulFunctionCall",
																"src": "8666:15:7"
															},
															"nativeSrc": "8663:176:7",
															"nodeType": "YulIf",
															"src": "8663:176:7"
														},
														{
															"nativeSrc": "8852:30:7",
															"nodeType": "YulAssignment",
															"src": "8852:30:7",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "returndatasize",
																	"nativeSrc": "8866:14:7",
																	"nodeType": "YulIdentifier",
																	"src": "8866:14:7"
																},
																"nativeSrc": "8866:16:7",
																"nodeType": "YulFunctionCall",
																"src": "8866:16:7"
															},
															"variableNames": [
																{
																	"name": "returnSize",
																	"nativeSrc": "8852:10:7",
																	"nodeType": "YulIdentifier",
																	"src": "8852:10:7"
																}
															]
														},
														{
															"nativeSrc": "8895:23:7",
															"nodeType": "YulAssignment",
															"src": "8895:23:7",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "8916:1:7",
																		"nodeType": "YulLiteral",
																		"src": "8916:1:7",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "8910:5:7",
																	"nodeType": "YulIdentifier",
																	"src": "8910:5:7"
																},
																"nativeSrc": "8910:8:7",
																"nodeType": "YulFunctionCall",
																"src": "8910:8:7"
															},
															"variableNames": [
																{
																	"name": "returnValue",
																	"nativeSrc": "8895:11:7",
																	"nodeType": "YulIdentifier",
																	"src": "8895:11:7"
																}
															]
														}
													]
												},
												"evmVersion": "prague",
												"externalReferences": [
													{
														"declaration": 1232,
														"isOffset": false,
														"isSlot": false,
														"src": "8587:4:7",
														"valueSize": 1
													},
													{
														"declaration": 1232,
														"isOffset": false,
														"isSlot": false,
														"src": "8606:4:7",
														"valueSize": 1
													},
													{
														"declaration": 1236,
														"isOffset": false,
														"isSlot": false,
														"src": "8852:10:7",
														"valueSize": 1
													},
													{
														"declaration": 1239,
														"isOffset": false,
														"isSlot": false,
														"src": "8895:11:7",
														"valueSize": 1
													},
													{
														"declaration": 1230,
														"isOffset": false,
														"isSlot": false,
														"src": "8573:5:7",
														"valueSize": 1
													}
												],
												"flags": [
													"memory-safe"
												],
												"id": 1241,
												"nodeType": "InlineAssembly",
												"src": "8507:421:7"
											},
											{
												"condition": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1244,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1242,
															"name": "returnSize",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1236,
															"src": "8942:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 1243,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8956:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "8942:15:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1255,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1253,
															"name": "returnValue",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1239,
															"src": "8994:11:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"hexValue": "31",
															"id": 1254,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9009:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "8994:16:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 1256,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "8942:68:7",
													"trueExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1252,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1247,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1230,
																			"src": "8968:5:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$819",
																				"typeString": "contract IERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_IERC20_$819",
																				"typeString": "contract IERC20"
																			}
																		],
																		"id": 1246,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "8960:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1245,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "8960:7:7",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1248,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "8960:14:7",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 1249,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "8975:4:7",
																"memberName": "code",
																"nodeType": "MemberAccess",
																"src": "8960:19:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 1250,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "8980:6:7",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "8960:26:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 1251,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8990:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "8960:31:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1265,
												"nodeType": "IfStatement",
												"src": "8938:146:7",
												"trueBody": {
													"id": 1264,
													"nodeType": "Block",
													"src": "9012:72:7",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 1260,
																				"name": "token",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1230,
																				"src": "9066:5:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_IERC20_$819",
																					"typeString": "contract IERC20"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_IERC20_$819",
																					"typeString": "contract IERC20"
																				}
																			],
																			"id": 1259,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "9058:7:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1258,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "9058:7:7",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1261,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "9058:14:7",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1257,
																	"name": "SafeERC20FailedOperation",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 857,
																	"src": "9033:24:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 1262,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9033:40:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1263,
															"nodeType": "RevertStatement",
															"src": "9026:47:7"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1227,
										"nodeType": "StructuredDocumentation",
										"src": "7879:486:7",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements."
									},
									"id": 1267,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nameLocation": "8379:19:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1233,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1230,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "8406:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1267,
												"src": "8399:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$819",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1229,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1228,
														"name": "IERC20",
														"nameLocations": [
															"8399:6:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 819,
														"src": "8399:6:7"
													},
													"referencedDeclaration": 819,
													"src": "8399:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$819",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1232,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "8426:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1267,
												"src": "8413:17:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1231,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "8413:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8398:33:7"
									},
									"returnParameters": {
										"id": 1234,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8440:0:7"
									},
									"scope": 1309,
									"src": "8370:720:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1307,
										"nodeType": "Block",
										"src": "9681:391:7",
										"statements": [
											{
												"assignments": [
													1279
												],
												"declarations": [
													{
														"constant": false,
														"id": 1279,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "9696:7:7",
														"nodeType": "VariableDeclaration",
														"scope": 1307,
														"src": "9691:12:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1278,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "9691:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1280,
												"nodeType": "VariableDeclarationStatement",
												"src": "9691:12:7"
											},
											{
												"assignments": [
													1282
												],
												"declarations": [
													{
														"constant": false,
														"id": 1282,
														"mutability": "mutable",
														"name": "returnSize",
														"nameLocation": "9721:10:7",
														"nodeType": "VariableDeclaration",
														"scope": 1307,
														"src": "9713:18:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1281,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9713:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1283,
												"nodeType": "VariableDeclarationStatement",
												"src": "9713:18:7"
											},
											{
												"assignments": [
													1285
												],
												"declarations": [
													{
														"constant": false,
														"id": 1285,
														"mutability": "mutable",
														"name": "returnValue",
														"nameLocation": "9749:11:7",
														"nodeType": "VariableDeclaration",
														"scope": 1307,
														"src": "9741:19:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1284,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9741:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1286,
												"nodeType": "VariableDeclarationStatement",
												"src": "9741:19:7"
											},
											{
												"AST": {
													"nativeSrc": "9795:174:7",
													"nodeType": "YulBlock",
													"src": "9795:174:7",
													"statements": [
														{
															"nativeSrc": "9809:71:7",
															"nodeType": "YulAssignment",
															"src": "9809:71:7",
															"value": {
																"arguments": [
																	{
																		"arguments": [],
																		"functionName": {
																			"name": "gas",
																			"nativeSrc": "9825:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "9825:3:7"
																		},
																		"nativeSrc": "9825:5:7",
																		"nodeType": "YulFunctionCall",
																		"src": "9825:5:7"
																	},
																	{
																		"name": "token",
																		"nativeSrc": "9832:5:7",
																		"nodeType": "YulIdentifier",
																		"src": "9832:5:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9839:1:7",
																		"nodeType": "YulLiteral",
																		"src": "9839:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nativeSrc": "9846:4:7",
																				"nodeType": "YulIdentifier",
																				"src": "9846:4:7"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "9852:4:7",
																				"nodeType": "YulLiteral",
																				"src": "9852:4:7",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "9842:3:7",
																			"nodeType": "YulIdentifier",
																			"src": "9842:3:7"
																		},
																		"nativeSrc": "9842:15:7",
																		"nodeType": "YulFunctionCall",
																		"src": "9842:15:7"
																	},
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nativeSrc": "9865:4:7",
																				"nodeType": "YulIdentifier",
																				"src": "9865:4:7"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nativeSrc": "9859:5:7",
																			"nodeType": "YulIdentifier",
																			"src": "9859:5:7"
																		},
																		"nativeSrc": "9859:11:7",
																		"nodeType": "YulFunctionCall",
																		"src": "9859:11:7"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9872:1:7",
																		"nodeType": "YulLiteral",
																		"src": "9872:1:7",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "9875:4:7",
																		"nodeType": "YulLiteral",
																		"src": "9875:4:7",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "call",
																	"nativeSrc": "9820:4:7",
																	"nodeType": "YulIdentifier",
																	"src": "9820:4:7"
																},
																"nativeSrc": "9820:60:7",
																"nodeType": "YulFunctionCall",
																"src": "9820:60:7"
															},
															"variableNames": [
																{
																	"name": "success",
																	"nativeSrc": "9809:7:7",
																	"nodeType": "YulIdentifier",
																	"src": "9809:7:7"
																}
															]
														},
														{
															"nativeSrc": "9893:30:7",
															"nodeType": "YulAssignment",
															"src": "9893:30:7",
															"value": {
																"arguments": [],
																"functionName": {
																	"name": "returndatasize",
																	"nativeSrc": "9907:14:7",
																	"nodeType": "YulIdentifier",
																	"src": "9907:14:7"
																},
																"nativeSrc": "9907:16:7",
																"nodeType": "YulFunctionCall",
																"src": "9907:16:7"
															},
															"variableNames": [
																{
																	"name": "returnSize",
																	"nativeSrc": "9893:10:7",
																	"nodeType": "YulIdentifier",
																	"src": "9893:10:7"
																}
															]
														},
														{
															"nativeSrc": "9936:23:7",
															"nodeType": "YulAssignment",
															"src": "9936:23:7",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "9957:1:7",
																		"nodeType": "YulLiteral",
																		"src": "9957:1:7",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "9951:5:7",
																	"nodeType": "YulIdentifier",
																	"src": "9951:5:7"
																},
																"nativeSrc": "9951:8:7",
																"nodeType": "YulFunctionCall",
																"src": "9951:8:7"
															},
															"variableNames": [
																{
																	"name": "returnValue",
																	"nativeSrc": "9936:11:7",
																	"nodeType": "YulIdentifier",
																	"src": "9936:11:7"
																}
															]
														}
													]
												},
												"evmVersion": "prague",
												"externalReferences": [
													{
														"declaration": 1273,
														"isOffset": false,
														"isSlot": false,
														"src": "9846:4:7",
														"valueSize": 1
													},
													{
														"declaration": 1273,
														"isOffset": false,
														"isSlot": false,
														"src": "9865:4:7",
														"valueSize": 1
													},
													{
														"declaration": 1282,
														"isOffset": false,
														"isSlot": false,
														"src": "9893:10:7",
														"valueSize": 1
													},
													{
														"declaration": 1285,
														"isOffset": false,
														"isSlot": false,
														"src": "9936:11:7",
														"valueSize": 1
													},
													{
														"declaration": 1279,
														"isOffset": false,
														"isSlot": false,
														"src": "9809:7:7",
														"valueSize": 1
													},
													{
														"declaration": 1271,
														"isOffset": false,
														"isSlot": false,
														"src": "9832:5:7",
														"valueSize": 1
													}
												],
												"flags": [
													"memory-safe"
												],
												"id": 1287,
												"nodeType": "InlineAssembly",
												"src": "9770:199:7"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1305,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1288,
														"name": "success",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1279,
														"src": "9985:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"components": [
															{
																"condition": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1291,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1289,
																		"name": "returnSize",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1282,
																		"src": "9997:10:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 1290,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10011:1:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "9997:15:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"falseExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1302,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1300,
																		"name": "returnValue",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1285,
																		"src": "10048:11:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"hexValue": "31",
																		"id": 1301,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10063:1:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "10048:16:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"id": 1303,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "Conditional",
																"src": "9997:67:7",
																"trueExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1299,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"expression": {
																				"arguments": [
																					{
																						"id": 1294,
																						"name": "token",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1271,
																						"src": "10023:5:7",
																						"typeDescriptions": {
																							"typeIdentifier": "t_contract$_IERC20_$819",
																							"typeString": "contract IERC20"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_contract$_IERC20_$819",
																							"typeString": "contract IERC20"
																						}
																					],
																					"id": 1293,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "10015:7:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_address_$",
																						"typeString": "type(address)"
																					},
																					"typeName": {
																						"id": 1292,
																						"name": "address",
																						"nodeType": "ElementaryTypeName",
																						"src": "10015:7:7",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 1295,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "10015:14:7",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"id": 1296,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "10030:4:7",
																			"memberName": "code",
																			"nodeType": "MemberAccess",
																			"src": "10015:19:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 1297,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "10035:6:7",
																		"memberName": "length",
																		"nodeType": "MemberAccess",
																		"src": "10015:26:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 1298,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10044:1:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "10015:30:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															}
														],
														"id": 1304,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "9996:69:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "9985:80:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1277,
												"id": 1306,
												"nodeType": "Return",
												"src": "9978:87:7"
											}
										]
									},
									"documentation": {
										"id": 1268,
										"nodeType": "StructuredDocumentation",
										"src": "9096:491:7",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead."
									},
									"id": 1308,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturnBool",
									"nameLocation": "9601:23:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1274,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1271,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "9632:5:7",
												"nodeType": "VariableDeclaration",
												"scope": 1308,
												"src": "9625:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$819",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 1270,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1269,
														"name": "IERC20",
														"nameLocations": [
															"9625:6:7"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 819,
														"src": "9625:6:7"
													},
													"referencedDeclaration": 819,
													"src": "9625:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$819",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1273,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "9652:4:7",
												"nodeType": "VariableDeclaration",
												"scope": 1308,
												"src": "9639:17:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1272,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "9639:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9624:33:7"
									},
									"returnParameters": {
										"id": 1277,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1276,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1308,
												"src": "9675:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1275,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "9675:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9674:6:7"
									},
									"scope": 1309,
									"src": "9592:480:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 1310,
							"src": "698:9376:7",
							"usedErrors": [
								857,
								866
							],
							"usedEvents": []
						}
					],
					"src": "115:9960:7"
				},
				"id": 7
			},
			"@openzeppelin/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							1339
						]
					},
					"id": 1340,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1311,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:8"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1312,
								"nodeType": "StructuredDocumentation",
								"src": "127:496:8",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 1339,
							"linearizedBaseContracts": [
								1339
							],
							"name": "Context",
							"nameLocation": "642:7:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1320,
										"nodeType": "Block",
										"src": "718:34:8",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1317,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "735:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1318,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "739:6:8",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "735:10:8",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1316,
												"id": 1319,
												"nodeType": "Return",
												"src": "728:17:8"
											}
										]
									},
									"id": 1321,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "665:10:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1313,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "675:2:8"
									},
									"returnParameters": {
										"id": 1316,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1315,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1321,
												"src": "709:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1314,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "709:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "708:9:8"
									},
									"scope": 1339,
									"src": "656:96:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1329,
										"nodeType": "Block",
										"src": "825:32:8",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1326,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "842:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1327,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "846:4:8",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "842:8:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1325,
												"id": 1328,
												"nodeType": "Return",
												"src": "835:15:8"
											}
										]
									},
									"id": 1330,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "767:8:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1322,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "775:2:8"
									},
									"returnParameters": {
										"id": 1325,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1324,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1330,
												"src": "809:14:8",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1323,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "809:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "808:16:8"
									},
									"scope": 1339,
									"src": "758:99:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1337,
										"nodeType": "Block",
										"src": "935:25:8",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 1335,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "952:1:8",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 1334,
												"id": 1336,
												"nodeType": "Return",
												"src": "945:8:8"
											}
										]
									},
									"id": 1338,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contextSuffixLength",
									"nameLocation": "872:20:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1331,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "892:2:8"
									},
									"returnParameters": {
										"id": 1334,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1333,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1338,
												"src": "926:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1332,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "926:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "925:9:8"
									},
									"scope": 1339,
									"src": "863:97:8",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1340,
							"src": "624:338:8",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "101:862:8"
				},
				"id": 8
			},
			"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							1351
						]
					},
					"id": 1352,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1341,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "115:24:9"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC165",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1342,
								"nodeType": "StructuredDocumentation",
								"src": "141:280:9",
								"text": " @dev Interface of the ERC-165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[ERC].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 1351,
							"linearizedBaseContracts": [
								1351
							],
							"name": "IERC165",
							"nameLocation": "432:7:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1343,
										"nodeType": "StructuredDocumentation",
										"src": "446:340:9",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 1350,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "800:17:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1346,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1345,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "825:11:9",
												"nodeType": "VariableDeclaration",
												"scope": 1350,
												"src": "818:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 1344,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "818:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "817:20:9"
									},
									"returnParameters": {
										"id": 1349,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1348,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1350,
												"src": "861:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1347,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "861:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "860:6:9"
									},
									"scope": 1351,
									"src": "791:76:9",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1352,
							"src": "422:447:9",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "115:755:9"
				},
				"id": 9
			},
			"contracts/SimpleSwap.sol": {
				"ast": {
					"absolutePath": "contracts/SimpleSwap.sol",
					"exportedSymbols": {
						"Context": [
							1339
						],
						"ERC20": [
							741
						],
						"IERC1363": [
							81
						],
						"IERC20": [
							819
						],
						"IERC20Errors": [
							131
						],
						"IERC20Metadata": [
							845
						],
						"ISimpleSwap": [
							2430
						],
						"SafeERC20": [
							1309
						],
						"SimpleSwap": [
							2338
						]
					},
					"id": 2339,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1353,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:10"
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
							"id": 1354,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2339,
							"sourceUnit": 742,
							"src": "57:55:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"file": "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol",
							"id": 1355,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2339,
							"sourceUnit": 1310,
							"src": "113:65:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts/interfaces/ISimpleSwap.sol",
							"file": "./interfaces/ISimpleSwap.sol",
							"id": 1356,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2339,
							"sourceUnit": 2431,
							"src": "179:38:10",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1358,
										"name": "ERC20",
										"nameLocations": [
											"482:5:10"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 741,
										"src": "482:5:10"
									},
									"id": 1359,
									"nodeType": "InheritanceSpecifier",
									"src": "482:5:10"
								},
								{
									"baseName": {
										"id": 1360,
										"name": "ISimpleSwap",
										"nameLocations": [
											"489:11:10"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2430,
										"src": "489:11:10"
									},
									"id": 1361,
									"nodeType": "InheritanceSpecifier",
									"src": "489:11:10"
								}
							],
							"canonicalName": "SimpleSwap",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1357,
								"nodeType": "StructuredDocumentation",
								"src": "219:239:10",
								"text": " @title SimpleSwap\n @dev Implements a basic Uniswap V2-style decentralized exchange with:\n - Liquidity pool creation\n - Token swapping functionality\n - LP (Liquidity Provider) token issuance\n @author Francisco LÃ³pez G."
							},
							"fullyImplemented": true,
							"id": 2338,
							"linearizedBaseContracts": [
								2338,
								2430,
								741,
								131,
								845,
								819,
								1339
							],
							"name": "SimpleSwap",
							"nameLocation": "468:10:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 1365,
									"libraryName": {
										"id": 1362,
										"name": "SafeERC20",
										"nameLocations": [
											"513:9:10"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1309,
										"src": "513:9:10"
									},
									"nodeType": "UsingForDirective",
									"src": "507:27:10",
									"typeName": {
										"id": 1364,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1363,
											"name": "IERC20",
											"nameLocations": [
												"527:6:10"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 819,
											"src": "527:6:10"
										},
										"referencedDeclaration": 819,
										"src": "527:6:10",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$819",
											"typeString": "contract IERC20"
										}
									}
								},
								{
									"canonicalName": "SimpleSwap.Pool",
									"documentation": {
										"id": 1366,
										"nodeType": "StructuredDocumentation",
										"src": "682:169:10",
										"text": " @dev Structure to store token pair reserves\n @param reserveA Reserve amount of first token\n @param reserveB Reserve amount of second token"
									},
									"id": 1371,
									"members": [
										{
											"constant": false,
											"id": 1368,
											"mutability": "mutable",
											"name": "reserveA",
											"nameLocation": "886:8:10",
											"nodeType": "VariableDeclaration",
											"scope": 1371,
											"src": "878:16:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1367,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "878:7:10",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 1370,
											"mutability": "mutable",
											"name": "reserveB",
											"nameLocation": "912:8:10",
											"nodeType": "VariableDeclaration",
											"scope": 1371,
											"src": "904:16:10",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1369,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "904:7:10",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Pool",
									"nameLocation": "863:4:10",
									"nodeType": "StructDefinition",
									"scope": 2338,
									"src": "856:71:10",
									"visibility": "public"
								},
								{
									"constant": false,
									"documentation": {
										"id": 1372,
										"nodeType": "StructuredDocumentation",
										"src": "1080:147:10",
										"text": " @notice Mapping of token pairs to their reserve balances\n @dev pools[token0][token1] stores reserves for sorted token pair"
									},
									"functionSelector": "901754d7",
									"id": 1379,
									"mutability": "mutable",
									"name": "pools",
									"nameLocation": "1284:5:10",
									"nodeType": "VariableDeclaration",
									"scope": 2338,
									"src": "1232:57:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_struct$_Pool_$1371_storage_$_$",
										"typeString": "mapping(address => mapping(address => struct SimpleSwap.Pool))"
									},
									"typeName": {
										"id": 1378,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 1373,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1240:7:10",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1232:44:10",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_struct$_Pool_$1371_storage_$_$",
											"typeString": "mapping(address => mapping(address => struct SimpleSwap.Pool))"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 1377,
											"keyName": "",
											"keyNameLocation": "-1:-1:-1",
											"keyType": {
												"id": 1374,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1259:7:10",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1251:24:10",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Pool_$1371_storage_$",
												"typeString": "mapping(address => struct SimpleSwap.Pool)"
											},
											"valueName": "",
											"valueNameLocation": "-1:-1:-1",
											"valueType": {
												"id": 1376,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 1375,
													"name": "Pool",
													"nameLocations": [
														"1270:4:10"
													],
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 1371,
													"src": "1270:4:10"
												},
												"referencedDeclaration": 1371,
												"src": "1270:4:10",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Pool_$1371_storage_ptr",
													"typeString": "struct SimpleSwap.Pool"
												}
											}
										}
									},
									"visibility": "public"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1380,
										"nodeType": "StructuredDocumentation",
										"src": "1437:358:10",
										"text": " @notice Emitted when liquidity is added to a pool\n @param provider Address providing the liquidity\n @param tokenA First token in pair\n @param tokenB Second token in pair\n @param amountA Amount of first token added\n @param amountB Amount of second token added\n @param liquidity Amount of LP tokens minted"
									},
									"eventSelector": "43c967b388d3a4ccad3f7ab80167852e322e5a3fde9893f530252281b2ae8b70",
									"id": 1394,
									"name": "LiquidityAdded",
									"nameLocation": "1806:14:10",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1393,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1382,
												"indexed": true,
												"mutability": "mutable",
												"name": "provider",
												"nameLocation": "1846:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1394,
												"src": "1830:24:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1381,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1830:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1384,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenA",
												"nameLocation": "1880:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1394,
												"src": "1864:22:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1383,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1864:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1386,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenB",
												"nameLocation": "1912:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1394,
												"src": "1896:22:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1385,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1896:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1388,
												"indexed": false,
												"mutability": "mutable",
												"name": "amountA",
												"nameLocation": "1936:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1394,
												"src": "1928:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1387,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1928:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1390,
												"indexed": false,
												"mutability": "mutable",
												"name": "amountB",
												"nameLocation": "1961:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1394,
												"src": "1953:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1389,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1953:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1392,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidity",
												"nameLocation": "1986:9:10",
												"nodeType": "VariableDeclaration",
												"scope": 1394,
												"src": "1978:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1391,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1978:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1820:181:10"
									},
									"src": "1800:202:10"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1395,
										"nodeType": "StructuredDocumentation",
										"src": "2008:369:10",
										"text": " @notice Emitted when liquidity is removed from a pool\n @param provider Address removing the liquidity\n @param tokenA First token in pair\n @param tokenB Second token in pair\n @param amountA Amount of first token withdrawn\n @param amountB Amount of second token withdrawn\n @param liquidity Amount of LP tokens burned"
									},
									"eventSelector": "d765e08eef31c0983ecca03ecd166297ac485ecd5dd69e291c848f0a020333c1",
									"id": 1409,
									"name": "LiquidityRemoved",
									"nameLocation": "2388:16:10",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1408,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1397,
												"indexed": true,
												"mutability": "mutable",
												"name": "provider",
												"nameLocation": "2430:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1409,
												"src": "2414:24:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1396,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2414:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1399,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenA",
												"nameLocation": "2464:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1409,
												"src": "2448:22:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1398,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2448:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1401,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenB",
												"nameLocation": "2496:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1409,
												"src": "2480:22:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1400,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2480:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1403,
												"indexed": false,
												"mutability": "mutable",
												"name": "amountA",
												"nameLocation": "2520:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1409,
												"src": "2512:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1402,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2512:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1405,
												"indexed": false,
												"mutability": "mutable",
												"name": "amountB",
												"nameLocation": "2545:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1409,
												"src": "2537:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1404,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2537:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1407,
												"indexed": false,
												"mutability": "mutable",
												"name": "liquidity",
												"nameLocation": "2570:9:10",
												"nodeType": "VariableDeclaration",
												"scope": 1409,
												"src": "2562:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1406,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2562:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2404:181:10"
									},
									"src": "2382:204:10"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1410,
										"nodeType": "StructuredDocumentation",
										"src": "2592:288:10",
										"text": " @notice Emitted when a token swap occurs\n @param sender Address initiating the swap\n @param tokenIn Input token address\n @param tokenOut Output token address\n @param amountIn Amount of input tokens\n @param amountOut Amount of output tokens"
									},
									"eventSelector": "cd3829a3813dc3cdd188fd3d01dcf3268c16be2fdd2dd21d0665418816e46062",
									"id": 1422,
									"name": "Swap",
									"nameLocation": "2891:4:10",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1421,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1412,
												"indexed": true,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "2921:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1422,
												"src": "2905:22:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1411,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2905:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1414,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenIn",
												"nameLocation": "2953:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1422,
												"src": "2937:23:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1413,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2937:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1416,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenOut",
												"nameLocation": "2986:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1422,
												"src": "2970:24:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1415,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2970:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1418,
												"indexed": false,
												"mutability": "mutable",
												"name": "amountIn",
												"nameLocation": "3012:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1422,
												"src": "3004:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1417,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3004:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1420,
												"indexed": false,
												"mutability": "mutable",
												"name": "amountOut",
												"nameLocation": "3038:9:10",
												"nodeType": "VariableDeclaration",
												"scope": 1422,
												"src": "3030:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1419,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3030:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2895:158:10"
									},
									"src": "2885:169:10"
								},
								{
									"body": {
										"id": 1436,
										"nodeType": "Block",
										"src": "3389:83:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1431,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1428,
																"name": "deadline",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1425,
																"src": "3407:8:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"expression": {
																	"id": 1429,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967292,
																	"src": "3419:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 1430,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "3425:9:10",
																"memberName": "timestamp",
																"nodeType": "MemberAccess",
																"src": "3419:15:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3407:27:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "446561646c696e6520706173736564",
															"id": 1432,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3436:17:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c195e135a65761ec6a2507e19968654c5f0b65ae83f886b1ce55ea9533041f5f",
																"typeString": "literal_string \"Deadline passed\""
															},
															"value": "Deadline passed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c195e135a65761ec6a2507e19968654c5f0b65ae83f886b1ce55ea9533041f5f",
																"typeString": "literal_string \"Deadline passed\""
															}
														],
														"id": 1427,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3399:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1433,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3399:55:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1434,
												"nodeType": "ExpressionStatement",
												"src": "3399:55:10"
											},
											{
												"id": 1435,
												"nodeType": "PlaceholderStatement",
												"src": "3464:1:10"
											}
										]
									},
									"documentation": {
										"id": 1423,
										"nodeType": "StructuredDocumentation",
										"src": "3202:140:10",
										"text": " @dev Ensures transaction is executed before deadline\n @param deadline Timestamp after which transaction should fail"
									},
									"id": 1437,
									"name": "ensureDeadline",
									"nameLocation": "3356:14:10",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1426,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1425,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "3379:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1437,
												"src": "3371:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1424,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3371:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3370:18:10"
									},
									"src": "3347:125:10",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1452,
										"nodeType": "Block",
										"src": "3678:73:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1447,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1445,
																"name": "tokenA",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1440,
																"src": "3696:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 1446,
																"name": "tokenB",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1442,
																"src": "3706:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "3696:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4964656e746963616c20746f6b656e73",
															"id": 1448,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3714:18:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_564dd1e3f9258ab6d5564b29cfecfb76f0e4789ee260e34c1e371b0939703e7d",
																"typeString": "literal_string \"Identical tokens\""
															},
															"value": "Identical tokens"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_564dd1e3f9258ab6d5564b29cfecfb76f0e4789ee260e34c1e371b0939703e7d",
																"typeString": "literal_string \"Identical tokens\""
															}
														],
														"id": 1444,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3688:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1449,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3688:45:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1450,
												"nodeType": "ExpressionStatement",
												"src": "3688:45:10"
											},
											{
												"id": 1451,
												"nodeType": "PlaceholderStatement",
												"src": "3743:1:10"
											}
										]
									},
									"documentation": {
										"id": 1438,
										"nodeType": "StructuredDocumentation",
										"src": "3478:144:10",
										"text": " @dev Ensures token addresses are different\n @param tokenA First token address\n @param tokenB Second token address"
									},
									"id": 1453,
									"name": "validPair",
									"nameLocation": "3636:9:10",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1443,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1440,
												"mutability": "mutable",
												"name": "tokenA",
												"nameLocation": "3654:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1453,
												"src": "3646:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1439,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3646:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1442,
												"mutability": "mutable",
												"name": "tokenB",
												"nameLocation": "3670:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1453,
												"src": "3662:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1441,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3662:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3645:32:10"
									},
									"src": "3627:124:10",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1461,
										"nodeType": "Block",
										"src": "4023:2:10",
										"statements": []
									},
									"documentation": {
										"id": 1454,
										"nodeType": "StructuredDocumentation",
										"src": "3898:74:10",
										"text": " @dev Initializes contract with LP token name and symbol"
									},
									"id": 1462,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"hexValue": "53696d706c6553776170204c50",
													"id": 1457,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3997:15:10",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_68e3cdbee7943f9253931a5774e4c7393b373db0b68c76288d4f06034a0afa87",
														"typeString": "literal_string \"SimpleSwap LP\""
													},
													"value": "SimpleSwap LP"
												},
												{
													"hexValue": "53532d4c50",
													"id": 1458,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4014:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_5ca5c167b0d0f703f012ccd718d3ce7ca1848aff02408d16ce07b0fcedcb8a9e",
														"typeString": "literal_string \"SS-LP\""
													},
													"value": "SS-LP"
												}
											],
											"id": 1459,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 1456,
												"name": "ERC20",
												"nameLocations": [
													"3991:5:10"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 741,
												"src": "3991:5:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "3991:31:10"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1455,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3988:2:10"
									},
									"returnParameters": {
										"id": 1460,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4023:0:10"
									},
									"scope": 2338,
									"src": "3977:48:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										2367
									],
									"body": {
										"id": 1627,
										"nodeType": "Block",
										"src": "5480:1588:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1503,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1499,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1497,
																	"name": "amountADesired",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1469,
																	"src": "5555:14:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1498,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5572:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "5555:18:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1502,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1500,
																	"name": "amountBDesired",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1471,
																	"src": "5577:14:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1501,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5594:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "5577:18:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "5555:40:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c696420616d6f756e7473",
															"id": 1504,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5597:17:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_398975f84453d02f72be2f04ea41567c835ff1dbdf476a80db1c02f27c9d4bb2",
																"typeString": "literal_string \"Invalid amounts\""
															},
															"value": "Invalid amounts"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_398975f84453d02f72be2f04ea41567c835ff1dbdf476a80db1c02f27c9d4bb2",
																"typeString": "literal_string \"Invalid amounts\""
															}
														],
														"id": 1496,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5547:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1505,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5547:68:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1506,
												"nodeType": "ExpressionStatement",
												"src": "5547:68:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1514,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1510,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1508,
																	"name": "amountADesired",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1469,
																	"src": "5633:14:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">=",
																"rightExpression": {
																	"id": 1509,
																	"name": "amountAMin",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1473,
																	"src": "5651:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5633:28:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1513,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1511,
																	"name": "amountBDesired",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1471,
																	"src": "5665:14:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">=",
																"rightExpression": {
																	"id": 1512,
																	"name": "amountBMin",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1475,
																	"src": "5683:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "5665:28:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "5633:60:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4d696e206e6f74206d6574",
															"id": 1515,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5695:13:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_e5fd1568041807e5fc7b138f7517e56ebbffb1ac01fca80c91a9630c5a09c0ee",
																"typeString": "literal_string \"Min not met\""
															},
															"value": "Min not met"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_e5fd1568041807e5fc7b138f7517e56ebbffb1ac01fca80c91a9630c5a09c0ee",
																"typeString": "literal_string \"Min not met\""
															}
														],
														"id": 1507,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5625:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1516,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5625:84:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1517,
												"nodeType": "ExpressionStatement",
												"src": "5625:84:10"
											},
											{
												"assignments": [
													1519,
													1521
												],
												"declarations": [
													{
														"constant": false,
														"id": 1519,
														"mutability": "mutable",
														"name": "token0",
														"nameLocation": "5782:6:10",
														"nodeType": "VariableDeclaration",
														"scope": 1627,
														"src": "5774:14:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1518,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5774:7:10",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1521,
														"mutability": "mutable",
														"name": "token1",
														"nameLocation": "5798:6:10",
														"nodeType": "VariableDeclaration",
														"scope": 1627,
														"src": "5790:14:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1520,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5790:7:10",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1526,
												"initialValue": {
													"arguments": [
														{
															"id": 1523,
															"name": "tokenA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1465,
															"src": "5820:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1524,
															"name": "tokenB",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1467,
															"src": "5828:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1522,
														"name": "_sortTokens",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2038,
														"src": "5808:11:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_address_$_t_address_$returns$_t_address_$_t_address_$",
															"typeString": "function (address,address) pure returns (address,address)"
														}
													},
													"id": 1525,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5808:27:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_address_$",
														"typeString": "tuple(address,address)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5773:62:10"
											},
											{
												"assignments": [
													1529
												],
												"declarations": [
													{
														"constant": false,
														"id": 1529,
														"mutability": "mutable",
														"name": "pool",
														"nameLocation": "5858:4:10",
														"nodeType": "VariableDeclaration",
														"scope": 1627,
														"src": "5845:17:10",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Pool_$1371_storage_ptr",
															"typeString": "struct SimpleSwap.Pool"
														},
														"typeName": {
															"id": 1528,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1527,
																"name": "Pool",
																"nameLocations": [
																	"5845:4:10"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1371,
																"src": "5845:4:10"
															},
															"referencedDeclaration": 1371,
															"src": "5845:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Pool_$1371_storage_ptr",
																"typeString": "struct SimpleSwap.Pool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1535,
												"initialValue": {
													"baseExpression": {
														"baseExpression": {
															"id": 1530,
															"name": "pools",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1379,
															"src": "5865:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_struct$_Pool_$1371_storage_$_$",
																"typeString": "mapping(address => mapping(address => struct SimpleSwap.Pool storage ref))"
															}
														},
														"id": 1532,
														"indexExpression": {
															"id": 1531,
															"name": "token0",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1519,
															"src": "5871:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "5865:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Pool_$1371_storage_$",
															"typeString": "mapping(address => struct SimpleSwap.Pool storage ref)"
														}
													},
													"id": 1534,
													"indexExpression": {
														"id": 1533,
														"name": "token1",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1521,
														"src": "5879:6:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "5865:21:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Pool_$1371_storage",
														"typeString": "struct SimpleSwap.Pool storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5845:41:10"
											},
											{
												"assignments": [
													1537
												],
												"declarations": [
													{
														"constant": false,
														"id": 1537,
														"mutability": "mutable",
														"name": "reserveA",
														"nameLocation": "5971:8:10",
														"nodeType": "VariableDeclaration",
														"scope": 1627,
														"src": "5963:16:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1536,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "5963:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1540,
												"initialValue": {
													"expression": {
														"id": 1538,
														"name": "pool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1529,
														"src": "5982:4:10",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Pool_$1371_storage_ptr",
															"typeString": "struct SimpleSwap.Pool storage pointer"
														}
													},
													"id": 1539,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "5987:8:10",
													"memberName": "reserveA",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1368,
													"src": "5982:13:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5963:32:10"
											},
											{
												"assignments": [
													1542
												],
												"declarations": [
													{
														"constant": false,
														"id": 1542,
														"mutability": "mutable",
														"name": "reserveB",
														"nameLocation": "6013:8:10",
														"nodeType": "VariableDeclaration",
														"scope": 1627,
														"src": "6005:16:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1541,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "6005:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1545,
												"initialValue": {
													"expression": {
														"id": 1543,
														"name": "pool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1529,
														"src": "6024:4:10",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Pool_$1371_storage_ptr",
															"typeString": "struct SimpleSwap.Pool storage pointer"
														}
													},
													"id": 1544,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "6029:8:10",
													"memberName": "reserveB",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1370,
													"src": "6024:13:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6005:32:10"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1552,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1548,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1546,
															"name": "reserveA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1537,
															"src": "6052:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 1547,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6064:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "6052:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1551,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1549,
															"name": "reserveB",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1542,
															"src": "6069:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 1550,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6081:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "6069:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "6052:30:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1592,
													"nodeType": "Block",
													"src": "6301:398:10",
													"statements": [
														{
															"expression": {
																"id": 1581,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"components": [
																		{
																			"id": 1570,
																			"name": "amountA",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1490,
																			"src": "6379:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"id": 1571,
																			"name": "amountB",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1492,
																			"src": "6388:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1572,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "TupleExpression",
																	"src": "6378:18:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
																		"typeString": "tuple(uint256,uint256)"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 1574,
																			"name": "amountADesired",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1469,
																			"src": "6441:14:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"id": 1575,
																			"name": "amountBDesired",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1471,
																			"src": "6473:14:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"id": 1576,
																			"name": "amountAMin",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1473,
																			"src": "6505:10:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"id": 1577,
																			"name": "amountBMin",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1475,
																			"src": "6533:10:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"id": 1578,
																			"name": "reserveA",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1537,
																			"src": "6561:8:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"id": 1579,
																			"name": "reserveB",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1542,
																			"src": "6587:8:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 1573,
																		"name": "_calculateOptimalDeposit",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2111,
																		"src": "6399:24:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$",
																			"typeString": "function (uint256,uint256,uint256,uint256,uint256,uint256) pure returns (uint256,uint256)"
																		}
																	},
																	"id": 1580,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6399:210:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
																		"typeString": "tuple(uint256,uint256)"
																	}
																},
																"src": "6378:231:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1582,
															"nodeType": "ExpressionStatement",
															"src": "6378:231:10"
														},
														{
															"expression": {
																"id": 1590,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1583,
																	"name": "liquidity",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1494,
																	"src": "6623:9:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"id": 1585,
																			"name": "amountA",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1490,
																			"src": "6655:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"id": 1586,
																			"name": "reserveA",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1537,
																			"src": "6664:8:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"id": 1587,
																				"name": "totalSupply",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 314,
																				"src": "6674:11:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
																					"typeString": "function () view returns (uint256)"
																				}
																			},
																			"id": 1588,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6674:13:10",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 1584,
																		"name": "_calculateLiquidity",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2140,
																		"src": "6635:19:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																		}
																	},
																	"id": 1589,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6635:53:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6623:65:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1591,
															"nodeType": "ExpressionStatement",
															"src": "6623:65:10"
														}
													]
												},
												"id": 1593,
												"nodeType": "IfStatement",
												"src": "6048:651:10",
												"trueBody": {
													"id": 1569,
													"nodeType": "Block",
													"src": "6084:211:10",
													"statements": [
														{
															"expression": {
																"id": 1559,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"components": [
																		{
																			"id": 1553,
																			"name": "amountA",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1490,
																			"src": "6142:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"id": 1554,
																			"name": "amountB",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1492,
																			"src": "6151:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1555,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "TupleExpression",
																	"src": "6141:18:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
																		"typeString": "tuple(uint256,uint256)"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"components": [
																		{
																			"id": 1556,
																			"name": "amountADesired",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1469,
																			"src": "6163:14:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"id": 1557,
																			"name": "amountBDesired",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1471,
																			"src": "6179:14:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 1558,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "6162:32:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
																		"typeString": "tuple(uint256,uint256)"
																	}
																},
																"src": "6141:53:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1560,
															"nodeType": "ExpressionStatement",
															"src": "6141:53:10"
														},
														{
															"expression": {
																"id": 1567,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1561,
																	"name": "liquidity",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1494,
																	"src": "6208:9:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"arguments": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 1565,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 1563,
																				"name": "amountA",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1490,
																				"src": "6226:7:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "*",
																			"rightExpression": {
																				"id": 1564,
																				"name": "amountB",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1492,
																				"src": "6236:7:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "6226:17:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 1562,
																		"name": "_sqrt",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2315,
																		"src": "6220:5:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) pure returns (uint256)"
																		}
																	},
																	"id": 1566,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "6220:24:10",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6208:36:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1568,
															"nodeType": "ExpressionStatement",
															"src": "6208:36:10"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1595,
															"name": "tokenA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1465,
															"src": "6781:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1596,
															"name": "tokenB",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1467,
															"src": "6789:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1597,
															"name": "amountA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1490,
															"src": "6797:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1598,
															"name": "amountB",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1492,
															"src": "6806:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1594,
														"name": "_transferTokens",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2241,
														"src": "6765:15:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 1599,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6765:49:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1600,
												"nodeType": "ExpressionStatement",
												"src": "6765:49:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1602,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1477,
															"src": "6830:2:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1603,
															"name": "liquidity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1494,
															"src": "6834:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1601,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 581,
														"src": "6824:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1604,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6824:20:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1605,
												"nodeType": "ExpressionStatement",
												"src": "6824:20:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1607,
															"name": "token0",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1519,
															"src": "6919:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1608,
															"name": "token1",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1521,
															"src": "6927:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1611,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1609,
																"name": "reserveA",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1537,
																"src": "6935:8:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 1610,
																"name": "amountA",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1490,
																"src": "6946:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6935:18:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1614,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1612,
																"name": "reserveB",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1542,
																"src": "6955:8:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 1613,
																"name": "amountB",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1492,
																"src": "6966:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6955:18:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1606,
														"name": "_updateReserves",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2202,
														"src": "6903:15:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 1615,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6903:71:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1616,
												"nodeType": "ExpressionStatement",
												"src": "6903:71:10"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 1618,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "7005:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1619,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "7009:6:10",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "7005:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1620,
															"name": "tokenA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1465,
															"src": "7017:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1621,
															"name": "tokenB",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1467,
															"src": "7025:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1622,
															"name": "amountA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1490,
															"src": "7033:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1623,
															"name": "amountB",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1492,
															"src": "7042:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1624,
															"name": "liquidity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1494,
															"src": "7051:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1617,
														"name": "LiquidityAdded",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1394,
														"src": "6990:14:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,address,uint256,uint256,uint256)"
														}
													},
													"id": 1625,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6990:71:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1626,
												"nodeType": "EmitStatement",
												"src": "6985:76:10"
											}
										]
									},
									"documentation": {
										"id": 1463,
										"nodeType": "StructuredDocumentation",
										"src": "4179:833:10",
										"text": " @notice Adds liquidity to a token pair\n @dev For initial deposit, uses square root of token amount product\n @dev For subsequent deposits, maintains existing reserve ratio\n @param tokenA First token address\n @param tokenB Second token address\n @param amountADesired Desired amount of first token to deposit\n @param amountBDesired Desired amount of second token to deposit\n @param amountAMin Minimum acceptable amount of first token\n @param amountBMin Minimum acceptable amount of second token\n @param to Address to receive LP tokens\n @param deadline Transaction expiry timestamp\n @return amountA Actual amount of first token deposited\n @return amountB Actual amount of second token deposited\n @return liquidity Amount of LP tokens minted"
									},
									"functionSelector": "e8e33700",
									"id": 1628,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 1483,
													"name": "deadline",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1479,
													"src": "5316:8:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												}
											],
											"id": 1484,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1482,
												"name": "ensureDeadline",
												"nameLocations": [
													"5301:14:10"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1437,
												"src": "5301:14:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "5301:24:10"
										},
										{
											"arguments": [
												{
													"id": 1486,
													"name": "tokenA",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1465,
													"src": "5344:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												{
													"id": 1487,
													"name": "tokenB",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1467,
													"src": "5352:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 1488,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1485,
												"name": "validPair",
												"nameLocations": [
													"5334:9:10"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1453,
												"src": "5334:9:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "5334:25:10"
										}
									],
									"name": "addLiquidity",
									"nameLocation": "5026:12:10",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1481,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5284:8:10"
									},
									"parameters": {
										"id": 1480,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1465,
												"mutability": "mutable",
												"name": "tokenA",
												"nameLocation": "5056:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1628,
												"src": "5048:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1464,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5048:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1467,
												"mutability": "mutable",
												"name": "tokenB",
												"nameLocation": "5080:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1628,
												"src": "5072:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1466,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5072:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1469,
												"mutability": "mutable",
												"name": "amountADesired",
												"nameLocation": "5104:14:10",
												"nodeType": "VariableDeclaration",
												"scope": 1628,
												"src": "5096:22:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1468,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5096:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1471,
												"mutability": "mutable",
												"name": "amountBDesired",
												"nameLocation": "5136:14:10",
												"nodeType": "VariableDeclaration",
												"scope": 1628,
												"src": "5128:22:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1470,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5128:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1473,
												"mutability": "mutable",
												"name": "amountAMin",
												"nameLocation": "5168:10:10",
												"nodeType": "VariableDeclaration",
												"scope": 1628,
												"src": "5160:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1472,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5160:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1475,
												"mutability": "mutable",
												"name": "amountBMin",
												"nameLocation": "5196:10:10",
												"nodeType": "VariableDeclaration",
												"scope": 1628,
												"src": "5188:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1474,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5188:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1477,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5224:2:10",
												"nodeType": "VariableDeclaration",
												"scope": 1628,
												"src": "5216:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1476,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5216:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1479,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "5244:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1628,
												"src": "5236:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1478,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5236:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5038:220:10"
									},
									"returnParameters": {
										"id": 1495,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1490,
												"mutability": "mutable",
												"name": "amountA",
												"nameLocation": "5398:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1628,
												"src": "5390:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1489,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5390:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1492,
												"mutability": "mutable",
												"name": "amountB",
												"nameLocation": "5427:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1628,
												"src": "5419:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1491,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5419:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1494,
												"mutability": "mutable",
												"name": "liquidity",
												"nameLocation": "5456:9:10",
												"nodeType": "VariableDeclaration",
												"scope": 1628,
												"src": "5448:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1493,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5448:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5376:99:10"
									},
									"scope": 2338,
									"src": "5017:2051:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										2389
									],
									"body": {
										"id": 1753,
										"nodeType": "Block",
										"src": "8011:1025:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1661,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1659,
																"name": "liquidity",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1635,
																"src": "8029:9:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1660,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8041:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8029:13:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c6964206c6971756964697479",
															"id": 1662,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8044:19:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fe2760d20a5ed3aa23e4ce3b50e06d47b2e38eb9d47372da153970d71dcfeed5",
																"typeString": "literal_string \"Invalid liquidity\""
															},
															"value": "Invalid liquidity"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fe2760d20a5ed3aa23e4ce3b50e06d47b2e38eb9d47372da153970d71dcfeed5",
																"typeString": "literal_string \"Invalid liquidity\""
															}
														],
														"id": 1658,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8021:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1663,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8021:43:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1664,
												"nodeType": "ExpressionStatement",
												"src": "8021:43:10"
											},
											{
												"assignments": [
													1666,
													1668
												],
												"declarations": [
													{
														"constant": false,
														"id": 1666,
														"mutability": "mutable",
														"name": "token0",
														"nameLocation": "8129:6:10",
														"nodeType": "VariableDeclaration",
														"scope": 1753,
														"src": "8121:14:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1665,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "8121:7:10",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1668,
														"mutability": "mutable",
														"name": "token1",
														"nameLocation": "8145:6:10",
														"nodeType": "VariableDeclaration",
														"scope": 1753,
														"src": "8137:14:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1667,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "8137:7:10",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1673,
												"initialValue": {
													"arguments": [
														{
															"id": 1670,
															"name": "tokenA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1631,
															"src": "8167:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1671,
															"name": "tokenB",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1633,
															"src": "8175:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1669,
														"name": "_sortTokens",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2038,
														"src": "8155:11:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_address_$_t_address_$returns$_t_address_$_t_address_$",
															"typeString": "function (address,address) pure returns (address,address)"
														}
													},
													"id": 1672,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8155:27:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_address_$",
														"typeString": "tuple(address,address)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8120:62:10"
											},
											{
												"assignments": [
													1676
												],
												"declarations": [
													{
														"constant": false,
														"id": 1676,
														"mutability": "mutable",
														"name": "pool",
														"nameLocation": "8205:4:10",
														"nodeType": "VariableDeclaration",
														"scope": 1753,
														"src": "8192:17:10",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Pool_$1371_storage_ptr",
															"typeString": "struct SimpleSwap.Pool"
														},
														"typeName": {
															"id": 1675,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1674,
																"name": "Pool",
																"nameLocations": [
																	"8192:4:10"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1371,
																"src": "8192:4:10"
															},
															"referencedDeclaration": 1371,
															"src": "8192:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Pool_$1371_storage_ptr",
																"typeString": "struct SimpleSwap.Pool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1682,
												"initialValue": {
													"baseExpression": {
														"baseExpression": {
															"id": 1677,
															"name": "pools",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1379,
															"src": "8212:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_struct$_Pool_$1371_storage_$_$",
																"typeString": "mapping(address => mapping(address => struct SimpleSwap.Pool storage ref))"
															}
														},
														"id": 1679,
														"indexExpression": {
															"id": 1678,
															"name": "token0",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1666,
															"src": "8218:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "8212:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Pool_$1371_storage_$",
															"typeString": "mapping(address => struct SimpleSwap.Pool storage ref)"
														}
													},
													"id": 1681,
													"indexExpression": {
														"id": 1680,
														"name": "token1",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1668,
														"src": "8226:6:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "8212:21:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Pool_$1371_storage",
														"typeString": "struct SimpleSwap.Pool storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8192:41:10"
											},
											{
												"assignments": [
													1684
												],
												"declarations": [
													{
														"constant": false,
														"id": 1684,
														"mutability": "mutable",
														"name": "reserveA",
														"nameLocation": "8292:8:10",
														"nodeType": "VariableDeclaration",
														"scope": 1753,
														"src": "8284:16:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1683,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8284:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1687,
												"initialValue": {
													"expression": {
														"id": 1685,
														"name": "pool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1676,
														"src": "8303:4:10",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Pool_$1371_storage_ptr",
															"typeString": "struct SimpleSwap.Pool storage pointer"
														}
													},
													"id": 1686,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "8308:8:10",
													"memberName": "reserveA",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1368,
													"src": "8303:13:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8284:32:10"
											},
											{
												"assignments": [
													1689
												],
												"declarations": [
													{
														"constant": false,
														"id": 1689,
														"mutability": "mutable",
														"name": "reserveB",
														"nameLocation": "8334:8:10",
														"nodeType": "VariableDeclaration",
														"scope": 1753,
														"src": "8326:16:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1688,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8326:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1692,
												"initialValue": {
													"expression": {
														"id": 1690,
														"name": "pool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1676,
														"src": "8345:4:10",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Pool_$1371_storage_ptr",
															"typeString": "struct SimpleSwap.Pool storage pointer"
														}
													},
													"id": 1691,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "8350:8:10",
													"memberName": "reserveB",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1370,
													"src": "8345:13:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8326:32:10"
											},
											{
												"expression": {
													"id": 1701,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"components": [
															{
																"id": 1693,
																"name": "amountA",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1654,
																"src": "8422:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1694,
																"name": "amountB",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1656,
																"src": "8431:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 1695,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "TupleExpression",
														"src": "8421:18:10",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
															"typeString": "tuple(uint256,uint256)"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1697,
																"name": "liquidity",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1635,
																"src": "8483:9:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1698,
																"name": "reserveA",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1684,
																"src": "8506:8:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1699,
																"name": "reserveB",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1689,
																"src": "8528:8:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1696,
															"name": "_calculateWithdrawalAmounts",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2178,
															"src": "8442:27:10",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$_t_uint256_$",
																"typeString": "function (uint256,uint256,uint256) view returns (uint256,uint256)"
															}
														},
														"id": 1700,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8442:104:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
															"typeString": "tuple(uint256,uint256)"
														}
													},
													"src": "8421:125:10",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1702,
												"nodeType": "ExpressionStatement",
												"src": "8421:125:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1710,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1706,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1704,
																	"name": "amountA",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1654,
																	"src": "8564:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">=",
																"rightExpression": {
																	"id": 1705,
																	"name": "amountAMin",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1637,
																	"src": "8575:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "8564:21:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1709,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1707,
																	"name": "amountB",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1656,
																	"src": "8589:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">=",
																"rightExpression": {
																	"id": 1708,
																	"name": "amountBMin",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1639,
																	"src": "8600:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "8589:21:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "8564:46:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4d696e206e6f74206d6574",
															"id": 1711,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8612:13:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_e5fd1568041807e5fc7b138f7517e56ebbffb1ac01fca80c91a9630c5a09c0ee",
																"typeString": "literal_string \"Min not met\""
															},
															"value": "Min not met"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_e5fd1568041807e5fc7b138f7517e56ebbffb1ac01fca80c91a9630c5a09c0ee",
																"typeString": "literal_string \"Min not met\""
															}
														],
														"id": 1703,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8556:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1712,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8556:70:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1713,
												"nodeType": "ExpressionStatement",
												"src": "8556:70:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1715,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "8700:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1716,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "8704:6:10",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "8700:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1717,
															"name": "liquidity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1635,
															"src": "8712:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1714,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 614,
														"src": "8694:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1718,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8694:28:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1719,
												"nodeType": "ExpressionStatement",
												"src": "8694:28:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1721,
															"name": "token0",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1666,
															"src": "8746:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1722,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1641,
															"src": "8754:2:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1723,
															"name": "amountA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1654,
															"src": "8758:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1720,
														"name": "_safeTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2260,
														"src": "8732:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1724,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8732:34:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1725,
												"nodeType": "ExpressionStatement",
												"src": "8732:34:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1727,
															"name": "token1",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1668,
															"src": "8790:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1728,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1641,
															"src": "8798:2:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1729,
															"name": "amountB",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1656,
															"src": "8802:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1726,
														"name": "_safeTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2260,
														"src": "8776:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1730,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8776:34:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1731,
												"nodeType": "ExpressionStatement",
												"src": "8776:34:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1733,
															"name": "token0",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1666,
															"src": "8885:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1734,
															"name": "token1",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1668,
															"src": "8893:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1737,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1735,
																"name": "reserveA",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1684,
																"src": "8901:8:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 1736,
																"name": "amountA",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1654,
																"src": "8912:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8901:18:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1740,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1738,
																"name": "reserveB",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1689,
																"src": "8921:8:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 1739,
																"name": "amountB",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1656,
																"src": "8932:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8921:18:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1732,
														"name": "_updateReserves",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2202,
														"src": "8869:15:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 1741,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8869:71:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1742,
												"nodeType": "ExpressionStatement",
												"src": "8869:71:10"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 1744,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "8973:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1745,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "8977:6:10",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "8973:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1746,
															"name": "tokenA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1631,
															"src": "8985:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1747,
															"name": "tokenB",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1633,
															"src": "8993:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1748,
															"name": "amountA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1654,
															"src": "9001:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1749,
															"name": "amountB",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1656,
															"src": "9010:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1750,
															"name": "liquidity",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1635,
															"src": "9019:9:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1743,
														"name": "LiquidityRemoved",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1409,
														"src": "8956:16:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,address,uint256,uint256,uint256)"
														}
													},
													"id": 1751,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8956:73:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1752,
												"nodeType": "EmitStatement",
												"src": "8951:78:10"
											}
										]
									},
									"documentation": {
										"id": 1629,
										"nodeType": "StructuredDocumentation",
										"src": "7074:568:10",
										"text": " @notice Removes liquidity from a token pair\n @param tokenA First token address\n @param tokenB Second token address\n @param liquidity Amount of LP tokens to burn\n @param amountAMin Minimum acceptable amount of first token to receive\n @param amountBMin Minimum acceptable amount of second token to receive\n @param to Address to receive withdrawn tokens\n @param deadline Transaction expiry timestamp\n @return amountA Amount of first token withdrawn\n @return amountB Amount of second token withdrawn"
									},
									"functionSelector": "baa2abde",
									"id": 1754,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 1647,
													"name": "deadline",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1643,
													"src": "7912:8:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												}
											],
											"id": 1648,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1646,
												"name": "ensureDeadline",
												"nameLocations": [
													"7897:14:10"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1437,
												"src": "7897:14:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "7897:24:10"
										},
										{
											"arguments": [
												{
													"id": 1650,
													"name": "tokenA",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1631,
													"src": "7940:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												{
													"id": 1651,
													"name": "tokenB",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1633,
													"src": "7948:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 1652,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1649,
												"name": "validPair",
												"nameLocations": [
													"7930:9:10"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1453,
												"src": "7930:9:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "7930:25:10"
										}
									],
									"name": "removeLiquidity",
									"nameLocation": "7656:15:10",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1645,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "7880:8:10"
									},
									"parameters": {
										"id": 1644,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1631,
												"mutability": "mutable",
												"name": "tokenA",
												"nameLocation": "7689:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1754,
												"src": "7681:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1630,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7681:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1633,
												"mutability": "mutable",
												"name": "tokenB",
												"nameLocation": "7713:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1754,
												"src": "7705:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1632,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7705:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1635,
												"mutability": "mutable",
												"name": "liquidity",
												"nameLocation": "7737:9:10",
												"nodeType": "VariableDeclaration",
												"scope": 1754,
												"src": "7729:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1634,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7729:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1637,
												"mutability": "mutable",
												"name": "amountAMin",
												"nameLocation": "7764:10:10",
												"nodeType": "VariableDeclaration",
												"scope": 1754,
												"src": "7756:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1636,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7756:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1639,
												"mutability": "mutable",
												"name": "amountBMin",
												"nameLocation": "7792:10:10",
												"nodeType": "VariableDeclaration",
												"scope": 1754,
												"src": "7784:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1638,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7784:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1641,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "7820:2:10",
												"nodeType": "VariableDeclaration",
												"scope": 1754,
												"src": "7812:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1640,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7812:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1643,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "7840:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1754,
												"src": "7832:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1642,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7832:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7671:183:10"
									},
									"returnParameters": {
										"id": 1657,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1654,
												"mutability": "mutable",
												"name": "amountA",
												"nameLocation": "7981:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1754,
												"src": "7973:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1653,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7973:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1656,
												"mutability": "mutable",
												"name": "amountB",
												"nameLocation": "7998:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1754,
												"src": "7990:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1655,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7990:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7972:34:10"
									},
									"scope": 2338,
									"src": "7647:1389:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										2407
									],
									"body": {
										"id": 1913,
										"nodeType": "Block",
										"src": "9782:1112:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1780,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1777,
																	"name": "path",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1762,
																	"src": "9800:4:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
																		"typeString": "address[] calldata"
																	}
																},
																"id": 1778,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "9805:6:10",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "9800:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "32",
																"id": 1779,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9815:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "9800:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c69642070617468",
															"id": 1781,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9818:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_6eaf91a30795816d7b5ab342a2ebdd69fbc6fb670d48889a575f3f685dfb42c8",
																"typeString": "literal_string \"Invalid path\""
															},
															"value": "Invalid path"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_6eaf91a30795816d7b5ab342a2ebdd69fbc6fb670d48889a575f3f685dfb42c8",
																"typeString": "literal_string \"Invalid path\""
															}
														],
														"id": 1776,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9792:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1782,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9792:41:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1783,
												"nodeType": "ExpressionStatement",
												"src": "9792:41:10"
											},
											{
												"expression": {
													"id": 1790,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1784,
														"name": "amounts",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1774,
														"src": "9852:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
															"typeString": "uint256[] memory"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"hexValue": "32",
																"id": 1788,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9876:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																}
															],
															"id": 1787,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "NewExpression",
															"src": "9862:13:10",
															"typeDescriptions": {
																"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
																"typeString": "function (uint256) pure returns (uint256[] memory)"
															},
															"typeName": {
																"baseType": {
																	"id": 1785,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "9866:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 1786,
																"nodeType": "ArrayTypeName",
																"src": "9866:9:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
																	"typeString": "uint256[]"
																}
															}
														},
														"id": 1789,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9862:16:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
															"typeString": "uint256[] memory"
														}
													},
													"src": "9852:26:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
														"typeString": "uint256[] memory"
													}
												},
												"id": 1791,
												"nodeType": "ExpressionStatement",
												"src": "9852:26:10"
											},
											{
												"expression": {
													"id": 1796,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1792,
															"name": "amounts",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1774,
															"src": "9888:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																"typeString": "uint256[] memory"
															}
														},
														"id": 1794,
														"indexExpression": {
															"hexValue": "30",
															"id": 1793,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9896:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "9888:10:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1795,
														"name": "amountIn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1757,
														"src": "9901:8:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9888:21:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1797,
												"nodeType": "ExpressionStatement",
												"src": "9888:21:10"
											},
											{
												"assignments": [
													1799,
													1801
												],
												"declarations": [
													{
														"constant": false,
														"id": 1799,
														"mutability": "mutable",
														"name": "tokenIn",
														"nameLocation": "9937:7:10",
														"nodeType": "VariableDeclaration",
														"scope": 1913,
														"src": "9929:15:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1798,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "9929:7:10",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1801,
														"mutability": "mutable",
														"name": "tokenOut",
														"nameLocation": "9954:8:10",
														"nodeType": "VariableDeclaration",
														"scope": 1913,
														"src": "9946:16:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1800,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "9946:7:10",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1809,
												"initialValue": {
													"components": [
														{
															"baseExpression": {
																"id": 1802,
																"name": "path",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1762,
																"src": "9967:4:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
																	"typeString": "address[] calldata"
																}
															},
															"id": 1804,
															"indexExpression": {
																"hexValue": "30",
																"id": 1803,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9972:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "9967:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"baseExpression": {
																"id": 1805,
																"name": "path",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1762,
																"src": "9976:4:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
																	"typeString": "address[] calldata"
																}
															},
															"id": 1807,
															"indexExpression": {
																"hexValue": "31",
																"id": 1806,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9981:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "9976:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"id": 1808,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "9966:18:10",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_address_$",
														"typeString": "tuple(address,address)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9928:56:10"
											},
											{
												"assignments": [
													1812
												],
												"declarations": [
													{
														"constant": false,
														"id": 1812,
														"mutability": "mutable",
														"name": "pool",
														"nameLocation": "10007:4:10",
														"nodeType": "VariableDeclaration",
														"scope": 1913,
														"src": "9994:17:10",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Pool_$1371_storage_ptr",
															"typeString": "struct SimpleSwap.Pool"
														},
														"typeName": {
															"id": 1811,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1810,
																"name": "Pool",
																"nameLocations": [
																	"9994:4:10"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1371,
																"src": "9994:4:10"
															},
															"referencedDeclaration": 1371,
															"src": "9994:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Pool_$1371_storage_ptr",
																"typeString": "struct SimpleSwap.Pool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1818,
												"initialValue": {
													"baseExpression": {
														"baseExpression": {
															"id": 1813,
															"name": "pools",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1379,
															"src": "10014:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_struct$_Pool_$1371_storage_$_$",
																"typeString": "mapping(address => mapping(address => struct SimpleSwap.Pool storage ref))"
															}
														},
														"id": 1815,
														"indexExpression": {
															"id": 1814,
															"name": "tokenIn",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1799,
															"src": "10020:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "10014:14:10",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Pool_$1371_storage_$",
															"typeString": "mapping(address => struct SimpleSwap.Pool storage ref)"
														}
													},
													"id": 1817,
													"indexExpression": {
														"id": 1816,
														"name": "tokenOut",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1801,
														"src": "10029:8:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "10014:24:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Pool_$1371_storage",
														"typeString": "struct SimpleSwap.Pool storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9994:44:10"
											},
											{
												"assignments": [
													1820
												],
												"declarations": [
													{
														"constant": false,
														"id": 1820,
														"mutability": "mutable",
														"name": "reserveIn",
														"nameLocation": "10097:9:10",
														"nodeType": "VariableDeclaration",
														"scope": 1913,
														"src": "10089:17:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1819,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10089:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1823,
												"initialValue": {
													"expression": {
														"id": 1821,
														"name": "pool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1812,
														"src": "10109:4:10",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Pool_$1371_storage_ptr",
															"typeString": "struct SimpleSwap.Pool storage pointer"
														}
													},
													"id": 1822,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "10114:8:10",
													"memberName": "reserveA",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1368,
													"src": "10109:13:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10089:33:10"
											},
											{
												"assignments": [
													1825
												],
												"declarations": [
													{
														"constant": false,
														"id": 1825,
														"mutability": "mutable",
														"name": "reserveOut",
														"nameLocation": "10140:10:10",
														"nodeType": "VariableDeclaration",
														"scope": 1913,
														"src": "10132:18:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1824,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10132:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1828,
												"initialValue": {
													"expression": {
														"id": 1826,
														"name": "pool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1812,
														"src": "10153:4:10",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Pool_$1371_storage_ptr",
															"typeString": "struct SimpleSwap.Pool storage pointer"
														}
													},
													"id": 1827,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "10158:8:10",
													"memberName": "reserveB",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 1370,
													"src": "10153:13:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10132:34:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1832,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1830,
																"name": "amountIn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1757,
																"src": "10193:8:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1831,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10204:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "10193:12:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c696420616d6f756e74",
															"id": 1833,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10207:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_2fd1dfd944df9898ee4c79794168926172c3d96d7664ff9919bb7080bb018af1",
																"typeString": "literal_string \"Invalid amount\""
															},
															"value": "Invalid amount"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_2fd1dfd944df9898ee4c79794168926172c3d96d7664ff9919bb7080bb018af1",
																"typeString": "literal_string \"Invalid amount\""
															}
														],
														"id": 1829,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10185:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1834,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10185:39:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1835,
												"nodeType": "ExpressionStatement",
												"src": "10185:39:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1843,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1839,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1837,
																	"name": "reserveIn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1820,
																	"src": "10242:9:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1838,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10254:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "10242:13:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1842,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1840,
																	"name": "reserveOut",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1825,
																	"src": "10259:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1841,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10272:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "10259:14:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "10242:31:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f206c6971756964697479",
															"id": 1844,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10275:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_379a432f00aa43993bfbf4e01492a8eab5138dcd2e395864ede728644390fc31",
																"typeString": "literal_string \"No liquidity\""
															},
															"value": "No liquidity"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_379a432f00aa43993bfbf4e01492a8eab5138dcd2e395864ede728644390fc31",
																"typeString": "literal_string \"No liquidity\""
															}
														],
														"id": 1836,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10234:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1845,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10234:56:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1846,
												"nodeType": "ExpressionStatement",
												"src": "10234:56:10"
											},
											{
												"expression": {
													"id": 1855,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1847,
															"name": "amounts",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1774,
															"src": "10378:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																"typeString": "uint256[] memory"
															}
														},
														"id": 1849,
														"indexExpression": {
															"hexValue": "31",
															"id": 1848,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10386:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10378:10:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1851,
																"name": "amountIn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1757,
																"src": "10404:8:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1852,
																"name": "reserveIn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1820,
																"src": "10414:9:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 1853,
																"name": "reserveOut",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1825,
																"src": "10425:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1850,
															"name": "getAmountOut",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2010,
															"src": "10391:12:10",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 1854,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10391:45:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10378:58:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1856,
												"nodeType": "ExpressionStatement",
												"src": "10378:58:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1862,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"id": 1858,
																	"name": "amounts",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1774,
																	"src": "10454:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																		"typeString": "uint256[] memory"
																	}
																},
																"id": 1860,
																"indexExpression": {
																	"hexValue": "31",
																	"id": 1859,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10462:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "10454:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1861,
																"name": "amountOutMin",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1759,
																"src": "10468:12:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10454:26:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e73756666696369656e74206f7574707574",
															"id": 1863,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10482:21:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ffebb6789a62ed60836fc38e566e8cbcff27ebb3acadee53ee5da9825f1b14e1",
																"typeString": "literal_string \"Insufficient output\""
															},
															"value": "Insufficient output"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ffebb6789a62ed60836fc38e566e8cbcff27ebb3acadee53ee5da9825f1b14e1",
																"typeString": "literal_string \"Insufficient output\""
															}
														],
														"id": 1857,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10446:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1864,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10446:58:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1865,
												"nodeType": "ExpressionStatement",
												"src": "10446:58:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1870,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "10583:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1871,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "10587:6:10",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "10583:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1874,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "10603:4:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SimpleSwap_$2338",
																		"typeString": "contract SimpleSwap"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SimpleSwap_$2338",
																		"typeString": "contract SimpleSwap"
																	}
																],
																"id": 1873,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10595:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1872,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "10595:7:10",
																	"typeDescriptions": {}
																}
															},
															"id": 1875,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10595:13:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1876,
															"name": "amountIn",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1757,
															"src": "10610:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1867,
																	"name": "tokenIn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1799,
																	"src": "10557:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1866,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 819,
																"src": "10550:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$819_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 1868,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10550:15:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$819",
																"typeString": "contract IERC20"
															}
														},
														"id": 1869,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "10566:16:10",
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 917,
														"src": "10550:32:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$819_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$819_$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 1877,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10550:69:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1878,
												"nodeType": "ExpressionStatement",
												"src": "10550:69:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1883,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1764,
															"src": "10659:2:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"baseExpression": {
																"id": 1884,
																"name": "amounts",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1774,
																"src": "10663:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																	"typeString": "uint256[] memory"
																}
															},
															"id": 1886,
															"indexExpression": {
																"hexValue": "31",
																"id": 1885,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10671:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10663:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1880,
																	"name": "tokenOut",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1801,
																	"src": "10636:8:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1879,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 819,
																"src": "10629:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$819_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 1881,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10629:16:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$819",
																"typeString": "contract IERC20"
															}
														},
														"id": 1882,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "10646:12:10",
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 890,
														"src": "10629:29:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$819_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$819_$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 1887,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10629:45:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1888,
												"nodeType": "ExpressionStatement",
												"src": "10629:45:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1890,
															"name": "tokenIn",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1799,
															"src": "10749:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1891,
															"name": "tokenOut",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1801,
															"src": "10758:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1894,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1892,
																"name": "reserveIn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1820,
																"src": "10768:9:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 1893,
																"name": "amountIn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1757,
																"src": "10780:8:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10768:20:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1899,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1895,
																"name": "reserveOut",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1825,
																"src": "10790:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"baseExpression": {
																	"id": 1896,
																	"name": "amounts",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1774,
																	"src": "10803:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																		"typeString": "uint256[] memory"
																	}
																},
																"id": 1898,
																"indexExpression": {
																	"hexValue": "31",
																	"id": 1897,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10811:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "10803:10:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10790:23:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1889,
														"name": "_updateReserves",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2202,
														"src": "10733:15:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256,uint256)"
														}
													},
													"id": 1900,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10733:81:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1901,
												"nodeType": "ExpressionStatement",
												"src": "10733:81:10"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"expression": {
																"id": 1903,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "10835:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1904,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "10839:6:10",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "10835:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1905,
															"name": "tokenIn",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1799,
															"src": "10847:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1906,
															"name": "tokenOut",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1801,
															"src": "10856:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1907,
															"name": "amountIn",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1757,
															"src": "10866:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"baseExpression": {
																"id": 1908,
																"name": "amounts",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1774,
																"src": "10876:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																	"typeString": "uint256[] memory"
																}
															},
															"id": 1910,
															"indexExpression": {
																"hexValue": "31",
																"id": 1909,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10884:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10876:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1902,
														"name": "Swap",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1422,
														"src": "10830:4:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,address,uint256,uint256)"
														}
													},
													"id": 1911,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10830:57:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1912,
												"nodeType": "EmitStatement",
												"src": "10825:62:10"
											}
										]
									},
									"documentation": {
										"id": 1755,
										"nodeType": "StructuredDocumentation",
										"src": "9042:446:10",
										"text": " @notice Swaps an exact amount of input tokens for output tokens\n @param amountIn Exact amount of input tokens\n @param amountOutMin Minimum acceptable amount of output tokens\n @param path Array containing [inputToken, outputToken] addresses\n @param to Address to receive output tokens\n @param deadline Transaction expiry timestamp\n @return amounts Array containing [inputAmount, outputAmount]"
									},
									"functionSelector": "38ed1739",
									"id": 1914,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 1770,
													"name": "deadline",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1766,
													"src": "9725:8:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												}
											],
											"id": 1771,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1769,
												"name": "ensureDeadline",
												"nameLocations": [
													"9710:14:10"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1437,
												"src": "9710:14:10"
											},
											"nodeType": "ModifierInvocation",
											"src": "9710:24:10"
										}
									],
									"name": "swapExactTokensForTokens",
									"nameLocation": "9502:24:10",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1768,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "9693:8:10"
									},
									"parameters": {
										"id": 1767,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1757,
												"mutability": "mutable",
												"name": "amountIn",
												"nameLocation": "9544:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1914,
												"src": "9536:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1756,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9536:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1759,
												"mutability": "mutable",
												"name": "amountOutMin",
												"nameLocation": "9570:12:10",
												"nodeType": "VariableDeclaration",
												"scope": 1914,
												"src": "9562:20:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1758,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9562:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1762,
												"mutability": "mutable",
												"name": "path",
												"nameLocation": "9611:4:10",
												"nodeType": "VariableDeclaration",
												"scope": 1914,
												"src": "9592:23:10",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1760,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "9592:7:10",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1761,
													"nodeType": "ArrayTypeName",
													"src": "9592:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1764,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "9633:2:10",
												"nodeType": "VariableDeclaration",
												"scope": 1914,
												"src": "9625:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1763,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9625:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1766,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "9653:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 1914,
												"src": "9645:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1765,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9645:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9526:141:10"
									},
									"returnParameters": {
										"id": 1775,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1774,
												"mutability": "mutable",
												"name": "amounts",
												"nameLocation": "9769:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1914,
												"src": "9752:24:10",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 1772,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "9752:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1773,
													"nodeType": "ArrayTypeName",
													"src": "9752:9:10",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9751:26:10"
									},
									"scope": 2338,
									"src": "9493:1401:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										2417
									],
									"body": {
										"id": 1965,
										"nodeType": "Block",
										"src": "11410:259:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1928,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1926,
																"name": "tokenA",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1917,
																"src": "11428:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 1927,
																"name": "tokenB",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1919,
																"src": "11438:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "11428:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4964656e746963616c20746f6b656e73",
															"id": 1929,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11446:18:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_564dd1e3f9258ab6d5564b29cfecfb76f0e4789ee260e34c1e371b0939703e7d",
																"typeString": "literal_string \"Identical tokens\""
															},
															"value": "Identical tokens"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_564dd1e3f9258ab6d5564b29cfecfb76f0e4789ee260e34c1e371b0939703e7d",
																"typeString": "literal_string \"Identical tokens\""
															}
														],
														"id": 1925,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "11420:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1930,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11420:45:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1931,
												"nodeType": "ExpressionStatement",
												"src": "11420:45:10"
											},
											{
												"assignments": [
													1934
												],
												"declarations": [
													{
														"constant": false,
														"id": 1934,
														"mutability": "mutable",
														"name": "pool",
														"nameLocation": "11496:4:10",
														"nodeType": "VariableDeclaration",
														"scope": 1965,
														"src": "11484:16:10",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Pool_$1371_memory_ptr",
															"typeString": "struct SimpleSwap.Pool"
														},
														"typeName": {
															"id": 1933,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1932,
																"name": "Pool",
																"nameLocations": [
																	"11484:4:10"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1371,
																"src": "11484:4:10"
															},
															"referencedDeclaration": 1371,
															"src": "11484:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Pool_$1371_storage_ptr",
																"typeString": "struct SimpleSwap.Pool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1940,
												"initialValue": {
													"baseExpression": {
														"baseExpression": {
															"id": 1935,
															"name": "pools",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1379,
															"src": "11503:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_struct$_Pool_$1371_storage_$_$",
																"typeString": "mapping(address => mapping(address => struct SimpleSwap.Pool storage ref))"
															}
														},
														"id": 1937,
														"indexExpression": {
															"id": 1936,
															"name": "tokenA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1917,
															"src": "11509:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "11503:13:10",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Pool_$1371_storage_$",
															"typeString": "mapping(address => struct SimpleSwap.Pool storage ref)"
														}
													},
													"id": 1939,
													"indexExpression": {
														"id": 1938,
														"name": "tokenB",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1919,
														"src": "11517:6:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "11503:21:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Pool_$1371_storage",
														"typeString": "struct SimpleSwap.Pool storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11484:40:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1950,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1945,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1942,
																		"name": "pool",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1934,
																		"src": "11542:4:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Pool_$1371_memory_ptr",
																			"typeString": "struct SimpleSwap.Pool memory"
																		}
																	},
																	"id": 1943,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "11547:8:10",
																	"memberName": "reserveA",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1368,
																	"src": "11542:13:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1944,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11558:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "11542:17:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1949,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1946,
																		"name": "pool",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1934,
																		"src": "11563:4:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Pool_$1371_memory_ptr",
																			"typeString": "struct SimpleSwap.Pool memory"
																		}
																	},
																	"id": 1947,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "11568:8:10",
																	"memberName": "reserveB",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1370,
																	"src": "11563:13:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1948,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11579:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "11563:17:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "11542:38:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f206c6971756964697479",
															"id": 1951,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11582:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_379a432f00aa43993bfbf4e01492a8eab5138dcd2e395864ede728644390fc31",
																"typeString": "literal_string \"No liquidity\""
															},
															"value": "No liquidity"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_379a432f00aa43993bfbf4e01492a8eab5138dcd2e395864ede728644390fc31",
																"typeString": "literal_string \"No liquidity\""
															}
														],
														"id": 1941,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "11534:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1952,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11534:63:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1953,
												"nodeType": "ExpressionStatement",
												"src": "11534:63:10"
											},
											{
												"expression": {
													"id": 1963,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1954,
														"name": "price",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1923,
														"src": "11616:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1962,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1958,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"id": 1955,
																			"name": "pool",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1934,
																			"src": "11625:4:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Pool_$1371_memory_ptr",
																				"typeString": "struct SimpleSwap.Pool memory"
																			}
																		},
																		"id": 1956,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "11630:8:10",
																		"memberName": "reserveB",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1370,
																		"src": "11625:13:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"hexValue": "31653138",
																		"id": 1957,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "11641:4:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1000000000000000000_by_1",
																			"typeString": "int_const 1000000000000000000"
																		},
																		"value": "1e18"
																	},
																	"src": "11625:20:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1959,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "11624:22:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"expression": {
																"id": 1960,
																"name": "pool",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1934,
																"src": "11649:4:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Pool_$1371_memory_ptr",
																	"typeString": "struct SimpleSwap.Pool memory"
																}
															},
															"id": 1961,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "11654:8:10",
															"memberName": "reserveA",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1368,
															"src": "11649:13:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "11624:38:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11616:46:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1964,
												"nodeType": "ExpressionStatement",
												"src": "11616:46:10"
											}
										]
									},
									"documentation": {
										"id": 1915,
										"nodeType": "StructuredDocumentation",
										"src": "11044:228:10",
										"text": " @notice Gets the price of tokenA in terms of tokenB\n @param tokenA First token address\n @param tokenB Second token address\n @return price Price of tokenA in terms of tokenB (with 18 decimals)"
									},
									"functionSelector": "ac41865a",
									"id": 1966,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getPrice",
									"nameLocation": "11286:8:10",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1921,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "11365:8:10"
									},
									"parameters": {
										"id": 1920,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1917,
												"mutability": "mutable",
												"name": "tokenA",
												"nameLocation": "11303:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1966,
												"src": "11295:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1916,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11295:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1919,
												"mutability": "mutable",
												"name": "tokenB",
												"nameLocation": "11319:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 1966,
												"src": "11311:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1918,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11311:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11294:32:10"
									},
									"returnParameters": {
										"id": 1924,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1923,
												"mutability": "mutable",
												"name": "price",
												"nameLocation": "11399:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1966,
												"src": "11391:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1922,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11391:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11390:15:10"
									},
									"scope": 2338,
									"src": "11277:392:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										2429
									],
									"body": {
										"id": 2009,
										"nodeType": "Block",
										"src": "12216:201:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1982,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1980,
																"name": "amountIn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1969,
																"src": "12234:8:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1981,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "12245:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "12234:12:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e76616c696420616d6f756e74",
															"id": 1983,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "12248:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_2fd1dfd944df9898ee4c79794168926172c3d96d7664ff9919bb7080bb018af1",
																"typeString": "literal_string \"Invalid amount\""
															},
															"value": "Invalid amount"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_2fd1dfd944df9898ee4c79794168926172c3d96d7664ff9919bb7080bb018af1",
																"typeString": "literal_string \"Invalid amount\""
															}
														],
														"id": 1979,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "12226:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1984,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12226:39:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1985,
												"nodeType": "ExpressionStatement",
												"src": "12226:39:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1993,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1989,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1987,
																	"name": "reserveIn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1971,
																	"src": "12283:9:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1988,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12295:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "12283:13:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1992,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1990,
																	"name": "reserveOut",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1973,
																	"src": "12300:10:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1991,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12313:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "12300:14:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "12283:31:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f206c6971756964697479",
															"id": 1994,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "12316:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_379a432f00aa43993bfbf4e01492a8eab5138dcd2e395864ede728644390fc31",
																"typeString": "literal_string \"No liquidity\""
															},
															"value": "No liquidity"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_379a432f00aa43993bfbf4e01492a8eab5138dcd2e395864ede728644390fc31",
																"typeString": "literal_string \"No liquidity\""
															}
														],
														"id": 1986,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "12275:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1995,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12275:56:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1996,
												"nodeType": "ExpressionStatement",
												"src": "12275:56:10"
											},
											{
												"expression": {
													"id": 2007,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1997,
														"name": "amountOut",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1977,
														"src": "12350:9:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2006,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2000,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1998,
																		"name": "amountIn",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1969,
																		"src": "12363:8:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 1999,
																		"name": "reserveOut",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1973,
																		"src": "12374:10:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "12363:21:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2001,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "12362:23:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2004,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2002,
																		"name": "reserveIn",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1971,
																		"src": "12389:9:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"id": 2003,
																		"name": "amountIn",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1969,
																		"src": "12401:8:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "12389:20:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2005,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "12388:22:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "12362:48:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "12350:60:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2008,
												"nodeType": "ExpressionStatement",
												"src": "12350:60:10"
											}
										]
									},
									"documentation": {
										"id": 1967,
										"nodeType": "StructuredDocumentation",
										"src": "11675:378:10",
										"text": " @notice Calculates output amount for a given input and reserves\n @dev Uses constant product formula: amountOut = (amountIn * reserveOut) / (reserveIn + amountIn)\n @param amountIn Input token amount\n @param reserveIn Reserve of input token\n @param reserveOut Reserve of output token\n @return amountOut Expected output token amount"
									},
									"functionSelector": "054d50d4",
									"id": 2010,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAmountOut",
									"nameLocation": "12067:12:10",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1975,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "12179:8:10"
									},
									"parameters": {
										"id": 1974,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1969,
												"mutability": "mutable",
												"name": "amountIn",
												"nameLocation": "12097:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 2010,
												"src": "12089:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1968,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12089:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1971,
												"mutability": "mutable",
												"name": "reserveIn",
												"nameLocation": "12123:9:10",
												"nodeType": "VariableDeclaration",
												"scope": 2010,
												"src": "12115:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1970,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12115:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1973,
												"mutability": "mutable",
												"name": "reserveOut",
												"nameLocation": "12150:10:10",
												"nodeType": "VariableDeclaration",
												"scope": 2010,
												"src": "12142:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1972,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12142:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12079:87:10"
									},
									"returnParameters": {
										"id": 1978,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1977,
												"mutability": "mutable",
												"name": "amountOut",
												"nameLocation": "12205:9:10",
												"nodeType": "VariableDeclaration",
												"scope": 2010,
												"src": "12197:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1976,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12197:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12196:19:10"
									},
									"scope": 2338,
									"src": "12058:359:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2037,
										"nodeType": "Block",
										"src": "12917:89:10",
										"statements": [
											{
												"expression": {
													"id": 2035,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"components": [
															{
																"id": 2022,
																"name": "token0",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2018,
																"src": "12928:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 2023,
																"name": "token1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2020,
																"src": "12936:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"id": 2024,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "TupleExpression",
														"src": "12927:16:10",
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_address_$_t_address_$",
															"typeString": "tuple(address,address)"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"condition": {
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 2027,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2025,
																"name": "tokenA",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2013,
																"src": "12946:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 2026,
																"name": "tokenB",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2015,
																"src": "12955:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "12946:15:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseExpression": {
															"components": [
																{
																	"id": 2031,
																	"name": "tokenB",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2015,
																	"src": "12984:6:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2032,
																	"name": "tokenA",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2013,
																	"src": "12992:6:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"id": 2033,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "12983:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_address_$",
																"typeString": "tuple(address,address)"
															}
														},
														"id": 2034,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "Conditional",
														"src": "12946:53:10",
														"trueExpression": {
															"components": [
																{
																	"id": 2028,
																	"name": "tokenA",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2013,
																	"src": "12965:6:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2029,
																	"name": "tokenB",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2015,
																	"src": "12973:6:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"id": 2030,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "12964:16:10",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_address_$",
																"typeString": "tuple(address,address)"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_tuple$_t_address_$_t_address_$",
															"typeString": "tuple(address,address)"
														}
													},
													"src": "12927:72:10",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2036,
												"nodeType": "ExpressionStatement",
												"src": "12927:72:10"
											}
										]
									},
									"documentation": {
										"id": 2011,
										"nodeType": "StructuredDocumentation",
										"src": "12571:205:10",
										"text": " @dev Sorts two token addresses\n @param tokenA First token address\n @param tokenB Second token address\n @return token0 Lower address\n @return token1 Higher address"
									},
									"id": 2038,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_sortTokens",
									"nameLocation": "12790:11:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2016,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2013,
												"mutability": "mutable",
												"name": "tokenA",
												"nameLocation": "12810:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 2038,
												"src": "12802:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2012,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12802:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2015,
												"mutability": "mutable",
												"name": "tokenB",
												"nameLocation": "12826:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 2038,
												"src": "12818:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2014,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12818:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12801:32:10"
									},
									"returnParameters": {
										"id": 2021,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2018,
												"mutability": "mutable",
												"name": "token0",
												"nameLocation": "12889:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 2038,
												"src": "12881:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2017,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12881:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2020,
												"mutability": "mutable",
												"name": "token1",
												"nameLocation": "12905:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 2038,
												"src": "12897:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2019,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12897:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12880:32:10"
									},
									"scope": 2338,
									"src": "12781:225:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2110,
										"nodeType": "Block",
										"src": "13813:521:10",
										"statements": [
											{
												"assignments": [
													2059
												],
												"declarations": [
													{
														"constant": false,
														"id": 2059,
														"mutability": "mutable",
														"name": "amountBOptimal",
														"nameLocation": "13831:14:10",
														"nodeType": "VariableDeclaration",
														"scope": 2110,
														"src": "13823:22:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2058,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "13823:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2065,
												"initialValue": {
													"arguments": [
														{
															"id": 2061,
															"name": "amountADesired",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2041,
															"src": "13855:14:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2062,
															"name": "reserveA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2049,
															"src": "13871:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2063,
															"name": "reserveB",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2051,
															"src": "13881:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2060,
														"name": "_quote",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2337,
														"src": "13848:6:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 2064,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13848:42:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "13823:67:10"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2068,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2066,
														"name": "amountBOptimal",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2059,
														"src": "13913:14:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<=",
													"rightExpression": {
														"id": 2067,
														"name": "amountBDesired",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2043,
														"src": "13931:14:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "13913:32:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2108,
													"nodeType": "Block",
													"src": "14100:228:10",
													"statements": [
														{
															"assignments": [
																2086
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2086,
																	"mutability": "mutable",
																	"name": "amountAOptimal",
																	"nameLocation": "14122:14:10",
																	"nodeType": "VariableDeclaration",
																	"scope": 2108,
																	"src": "14114:22:10",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 2085,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "14114:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2092,
															"initialValue": {
																"arguments": [
																	{
																		"id": 2088,
																		"name": "amountBDesired",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2043,
																		"src": "14146:14:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 2089,
																		"name": "reserveB",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2051,
																		"src": "14162:8:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 2090,
																		"name": "reserveA",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2049,
																		"src": "14172:8:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 2087,
																	"name": "_quote",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2337,
																	"src": "14139:6:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																	}
																},
																"id": 2091,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "14139:42:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "14114:67:10"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2096,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2094,
																			"name": "amountAOptimal",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2086,
																			"src": "14203:14:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"id": 2095,
																			"name": "amountAMin",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2045,
																			"src": "14221:10:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "14203:28:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "496e73756666696369656e742041",
																		"id": 2097,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "14233:16:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_00c0664002c3a7ab9481655483f753aa6ee21854999370a38d90a0549f0cf8f4",
																			"typeString": "literal_string \"Insufficient A\""
																		},
																		"value": "Insufficient A"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_00c0664002c3a7ab9481655483f753aa6ee21854999370a38d90a0549f0cf8f4",
																			"typeString": "literal_string \"Insufficient A\""
																		}
																	],
																	"id": 2093,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "14195:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 2098,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "14195:55:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2099,
															"nodeType": "ExpressionStatement",
															"src": "14195:55:10"
														},
														{
															"expression": {
																"id": 2106,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"components": [
																		{
																			"id": 2100,
																			"name": "amountA",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2054,
																			"src": "14265:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"id": 2101,
																			"name": "amountB",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2056,
																			"src": "14274:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2102,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "TupleExpression",
																	"src": "14264:18:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
																		"typeString": "tuple(uint256,uint256)"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"components": [
																		{
																			"id": 2103,
																			"name": "amountAOptimal",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2086,
																			"src": "14286:14:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"id": 2104,
																			"name": "amountBDesired",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2043,
																			"src": "14302:14:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2105,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "14285:32:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
																		"typeString": "tuple(uint256,uint256)"
																	}
																},
																"src": "14264:53:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2107,
															"nodeType": "ExpressionStatement",
															"src": "14264:53:10"
														}
													]
												},
												"id": 2109,
												"nodeType": "IfStatement",
												"src": "13909:419:10",
												"trueBody": {
													"id": 2084,
													"nodeType": "Block",
													"src": "13947:147:10",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2072,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2070,
																			"name": "amountBOptimal",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2059,
																			"src": "13969:14:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"id": 2071,
																			"name": "amountBMin",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2047,
																			"src": "13987:10:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "13969:28:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "496e73756666696369656e742042",
																		"id": 2073,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "13999:16:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_28ee48a047f51c165a70ae36f179330afc265bf4c05f56e1a1f02c2668dcead2",
																			"typeString": "literal_string \"Insufficient B\""
																		},
																		"value": "Insufficient B"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_28ee48a047f51c165a70ae36f179330afc265bf4c05f56e1a1f02c2668dcead2",
																			"typeString": "literal_string \"Insufficient B\""
																		}
																	],
																	"id": 2069,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "13961:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 2074,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "13961:55:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2075,
															"nodeType": "ExpressionStatement",
															"src": "13961:55:10"
														},
														{
															"expression": {
																"id": 2082,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"components": [
																		{
																			"id": 2076,
																			"name": "amountA",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2054,
																			"src": "14031:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"id": 2077,
																			"name": "amountB",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2056,
																			"src": "14040:7:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2078,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "TupleExpression",
																	"src": "14030:18:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
																		"typeString": "tuple(uint256,uint256)"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"components": [
																		{
																			"id": 2079,
																			"name": "amountADesired",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2041,
																			"src": "14052:14:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"id": 2080,
																			"name": "amountBOptimal",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2059,
																			"src": "14068:14:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2081,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "14051:32:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
																		"typeString": "tuple(uint256,uint256)"
																	}
																},
																"src": "14030:53:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 2083,
															"nodeType": "ExpressionStatement",
															"src": "14030:53:10"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2039,
										"nodeType": "StructuredDocumentation",
										"src": "13012:527:10",
										"text": " @dev Calculates optimal deposit amounts to maintain pool ratio\n @param amountADesired Desired amount of tokenA\n @param amountBDesired Desired amount of tokenB\n @param amountAMin Minimum acceptable amount of tokenA\n @param amountBMin Minimum acceptable amount of tokenB\n @param reserveA Current reserve of tokenA\n @param reserveB Current reserve of tokenB\n @return amountA Optimal amount of tokenA to deposit\n @return amountB Optimal amount of tokenB to deposit"
									},
									"id": 2111,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_calculateOptimalDeposit",
									"nameLocation": "13553:24:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2052,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2041,
												"mutability": "mutable",
												"name": "amountADesired",
												"nameLocation": "13595:14:10",
												"nodeType": "VariableDeclaration",
												"scope": 2111,
												"src": "13587:22:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2040,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13587:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2043,
												"mutability": "mutable",
												"name": "amountBDesired",
												"nameLocation": "13627:14:10",
												"nodeType": "VariableDeclaration",
												"scope": 2111,
												"src": "13619:22:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2042,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13619:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2045,
												"mutability": "mutable",
												"name": "amountAMin",
												"nameLocation": "13659:10:10",
												"nodeType": "VariableDeclaration",
												"scope": 2111,
												"src": "13651:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2044,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13651:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2047,
												"mutability": "mutable",
												"name": "amountBMin",
												"nameLocation": "13687:10:10",
												"nodeType": "VariableDeclaration",
												"scope": 2111,
												"src": "13679:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2046,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13679:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2049,
												"mutability": "mutable",
												"name": "reserveA",
												"nameLocation": "13715:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 2111,
												"src": "13707:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2048,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13707:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2051,
												"mutability": "mutable",
												"name": "reserveB",
												"nameLocation": "13741:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 2111,
												"src": "13733:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2050,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13733:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13577:178:10"
									},
									"returnParameters": {
										"id": 2057,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2054,
												"mutability": "mutable",
												"name": "amountA",
												"nameLocation": "13787:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 2111,
												"src": "13779:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2053,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13779:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2056,
												"mutability": "mutable",
												"name": "amountB",
												"nameLocation": "13804:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 2111,
												"src": "13796:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2055,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13796:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13778:34:10"
									},
									"scope": 2338,
									"src": "13544:790:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2139,
										"nodeType": "Block",
										"src": "14750:119:10",
										"statements": [
											{
												"expression": {
													"id": 2130,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2123,
														"name": "liquidity",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2121,
														"src": "14760:9:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2129,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2126,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2124,
																		"name": "amount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2114,
																		"src": "14773:6:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2125,
																		"name": "totalSupply",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2118,
																		"src": "14782:11:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "14773:20:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2127,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "14772:22:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"id": 2128,
															"name": "reserve",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2116,
															"src": "14797:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "14772:32:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "14760:44:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2131,
												"nodeType": "ExpressionStatement",
												"src": "14760:44:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2135,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2133,
																"name": "liquidity",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2121,
																"src": "14822:9:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2134,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14834:1:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14822:13:10",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e73756666696369656e74206c6971756964697479",
															"id": 2136,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "14837:24:10",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_36435f17e62e176b853e8c37716e51b74bf692c7f7df8628db24bf070e8367ad",
																"typeString": "literal_string \"Insufficient liquidity\""
															},
															"value": "Insufficient liquidity"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_36435f17e62e176b853e8c37716e51b74bf692c7f7df8628db24bf070e8367ad",
																"typeString": "literal_string \"Insufficient liquidity\""
															}
														],
														"id": 2132,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "14814:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 2137,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14814:48:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2138,
												"nodeType": "ExpressionStatement",
												"src": "14814:48:10"
											}
										]
									},
									"documentation": {
										"id": 2112,
										"nodeType": "StructuredDocumentation",
										"src": "14340:250:10",
										"text": " @dev Calculates LP tokens to mint based on deposit\n @param amount Deposit amount\n @param reserve Existing reserve amount\n @param totalSupply Current total LP token supply\n @return liquidity LP tokens to mint"
									},
									"id": 2140,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_calculateLiquidity",
									"nameLocation": "14604:19:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2119,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2114,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "14641:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 2140,
												"src": "14633:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2113,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14633:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2116,
												"mutability": "mutable",
												"name": "reserve",
												"nameLocation": "14665:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 2140,
												"src": "14657:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2115,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14657:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2118,
												"mutability": "mutable",
												"name": "totalSupply",
												"nameLocation": "14690:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 2140,
												"src": "14682:19:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2117,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14682:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14623:84:10"
									},
									"returnParameters": {
										"id": 2122,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2121,
												"mutability": "mutable",
												"name": "liquidity",
												"nameLocation": "14739:9:10",
												"nodeType": "VariableDeclaration",
												"scope": 2140,
												"src": "14731:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2120,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14731:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14730:19:10"
									},
									"scope": 2338,
									"src": "14595:274:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2177,
										"nodeType": "Block",
										"src": "15358:167:10",
										"statements": [
											{
												"assignments": [
													2155
												],
												"declarations": [
													{
														"constant": false,
														"id": 2155,
														"mutability": "mutable",
														"name": "_totalSupply",
														"nameLocation": "15376:12:10",
														"nodeType": "VariableDeclaration",
														"scope": 2177,
														"src": "15368:20:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2154,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "15368:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2158,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 2156,
														"name": "totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 314,
														"src": "15391:11:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
															"typeString": "function () view returns (uint256)"
														}
													},
													"id": 2157,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "15391:13:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "15368:36:10"
											},
											{
												"expression": {
													"id": 2166,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2159,
														"name": "amountA",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2150,
														"src": "15414:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2165,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2162,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2160,
																		"name": "liquidity",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2143,
																		"src": "15425:9:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2161,
																		"name": "reserveA",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2145,
																		"src": "15437:8:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "15425:20:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2163,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "15424:22:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"id": 2164,
															"name": "_totalSupply",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2155,
															"src": "15449:12:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "15424:37:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "15414:47:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2167,
												"nodeType": "ExpressionStatement",
												"src": "15414:47:10"
											},
											{
												"expression": {
													"id": 2175,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2168,
														"name": "amountB",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2152,
														"src": "15471:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2174,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2171,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2169,
																		"name": "liquidity",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2143,
																		"src": "15482:9:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2170,
																		"name": "reserveB",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2147,
																		"src": "15494:8:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "15482:20:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2172,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "15481:22:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"id": 2173,
															"name": "_totalSupply",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2155,
															"src": "15506:12:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "15481:37:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "15471:47:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2176,
												"nodeType": "ExpressionStatement",
												"src": "15471:47:10"
											}
										]
									},
									"documentation": {
										"id": 2141,
										"nodeType": "StructuredDocumentation",
										"src": "14875:299:10",
										"text": " @dev Calculates withdrawal amounts based on LP share\n @param liquidity LP tokens to burn\n @param reserveA Reserve of tokenA\n @param reserveB Reserve of tokenB\n @return amountA Amount of tokenA to withdraw\n @return amountB Amount of tokenB to withdraw"
									},
									"id": 2178,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_calculateWithdrawalAmounts",
									"nameLocation": "15188:27:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2148,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2143,
												"mutability": "mutable",
												"name": "liquidity",
												"nameLocation": "15233:9:10",
												"nodeType": "VariableDeclaration",
												"scope": 2178,
												"src": "15225:17:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2142,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15225:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2145,
												"mutability": "mutable",
												"name": "reserveA",
												"nameLocation": "15260:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 2178,
												"src": "15252:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2144,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15252:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2147,
												"mutability": "mutable",
												"name": "reserveB",
												"nameLocation": "15286:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 2178,
												"src": "15278:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2146,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15278:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15215:85:10"
									},
									"returnParameters": {
										"id": 2153,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2150,
												"mutability": "mutable",
												"name": "amountA",
												"nameLocation": "15332:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 2178,
												"src": "15324:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2149,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15324:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2152,
												"mutability": "mutable",
												"name": "amountB",
												"nameLocation": "15349:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 2178,
												"src": "15341:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2151,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15341:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15323:34:10"
									},
									"scope": 2338,
									"src": "15179:346:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2201,
										"nodeType": "Block",
										"src": "15908:71:10",
										"statements": [
											{
												"expression": {
													"id": 2199,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 2190,
																"name": "pools",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1379,
																"src": "15918:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_struct$_Pool_$1371_storage_$_$",
																	"typeString": "mapping(address => mapping(address => struct SimpleSwap.Pool storage ref))"
																}
															},
															"id": 2193,
															"indexExpression": {
																"id": 2191,
																"name": "tokenA",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2181,
																"src": "15924:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "15918:13:10",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_struct$_Pool_$1371_storage_$",
																"typeString": "mapping(address => struct SimpleSwap.Pool storage ref)"
															}
														},
														"id": 2194,
														"indexExpression": {
															"id": 2192,
															"name": "tokenB",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2183,
															"src": "15932:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "15918:21:10",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Pool_$1371_storage",
															"typeString": "struct SimpleSwap.Pool storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 2196,
																"name": "newReserveA",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2185,
																"src": "15947:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 2197,
																"name": "newReserveB",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2187,
																"src": "15960:11:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 2195,
															"name": "Pool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1371,
															"src": "15942:4:10",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_struct$_Pool_$1371_storage_ptr_$",
																"typeString": "type(struct SimpleSwap.Pool storage pointer)"
															}
														},
														"id": 2198,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "structConstructorCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "15942:30:10",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Pool_$1371_memory_ptr",
															"typeString": "struct SimpleSwap.Pool memory"
														}
													},
													"src": "15918:54:10",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Pool_$1371_storage",
														"typeString": "struct SimpleSwap.Pool storage ref"
													}
												},
												"id": 2200,
												"nodeType": "ExpressionStatement",
												"src": "15918:54:10"
											}
										]
									},
									"documentation": {
										"id": 2179,
										"nodeType": "StructuredDocumentation",
										"src": "15531:226:10",
										"text": " @dev Updates pool reserves\n @param tokenA First token address\n @param tokenB Second token address\n @param newReserveA New reserve for tokenA\n @param newReserveB New reserve for tokenB"
									},
									"id": 2202,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_updateReserves",
									"nameLocation": "15771:15:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2188,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2181,
												"mutability": "mutable",
												"name": "tokenA",
												"nameLocation": "15804:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 2202,
												"src": "15796:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2180,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15796:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2183,
												"mutability": "mutable",
												"name": "tokenB",
												"nameLocation": "15828:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 2202,
												"src": "15820:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2182,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15820:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2185,
												"mutability": "mutable",
												"name": "newReserveA",
												"nameLocation": "15852:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 2202,
												"src": "15844:19:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2184,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15844:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2187,
												"mutability": "mutable",
												"name": "newReserveB",
												"nameLocation": "15881:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 2202,
												"src": "15873:19:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2186,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15873:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15786:112:10"
									},
									"returnParameters": {
										"id": 2189,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "15908:0:10"
									},
									"scope": 2338,
									"src": "15762:217:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2240,
										"nodeType": "Block",
										"src": "16356:161:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 2218,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "16398:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 2219,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "16402:6:10",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "16398:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 2222,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "16418:4:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SimpleSwap_$2338",
																		"typeString": "contract SimpleSwap"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SimpleSwap_$2338",
																		"typeString": "contract SimpleSwap"
																	}
																],
																"id": 2221,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "16410:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2220,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "16410:7:10",
																	"typeDescriptions": {}
																}
															},
															"id": 2223,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "16410:13:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2224,
															"name": "amountA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2209,
															"src": "16425:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 2215,
																	"name": "tokenA",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2205,
																	"src": "16373:6:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 2214,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 819,
																"src": "16366:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$819_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 2216,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "16366:14:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$819",
																"typeString": "contract IERC20"
															}
														},
														"id": 2217,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "16381:16:10",
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 917,
														"src": "16366:31:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$819_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$819_$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 2225,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16366:67:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2226,
												"nodeType": "ExpressionStatement",
												"src": "16366:67:10"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 2231,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "16475:3:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 2232,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "16479:6:10",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "16475:10:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 2235,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "16495:4:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SimpleSwap_$2338",
																		"typeString": "contract SimpleSwap"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SimpleSwap_$2338",
																		"typeString": "contract SimpleSwap"
																	}
																],
																"id": 2234,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "16487:7:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2233,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "16487:7:10",
																	"typeDescriptions": {}
																}
															},
															"id": 2236,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "16487:13:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2237,
															"name": "amountB",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2211,
															"src": "16502:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 2228,
																	"name": "tokenB",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2207,
																	"src": "16450:6:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 2227,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 819,
																"src": "16443:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$819_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 2229,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "16443:14:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$819",
																"typeString": "contract IERC20"
															}
														},
														"id": 2230,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "16458:16:10",
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 917,
														"src": "16443:31:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$819_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$819_$",
															"typeString": "function (contract IERC20,address,address,uint256)"
														}
													},
													"id": 2238,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16443:67:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2239,
												"nodeType": "ExpressionStatement",
												"src": "16443:67:10"
											}
										]
									},
									"documentation": {
										"id": 2203,
										"nodeType": "StructuredDocumentation",
										"src": "15985:228:10",
										"text": " @dev Transfers both tokens from user to contract\n @param tokenA First token address\n @param tokenB Second token address\n @param amountA Amount of tokenA\n @param amountB Amount of tokenB"
									},
									"id": 2241,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferTokens",
									"nameLocation": "16227:15:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2212,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2205,
												"mutability": "mutable",
												"name": "tokenA",
												"nameLocation": "16260:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 2241,
												"src": "16252:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2204,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16252:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2207,
												"mutability": "mutable",
												"name": "tokenB",
												"nameLocation": "16284:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 2241,
												"src": "16276:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2206,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16276:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2209,
												"mutability": "mutable",
												"name": "amountA",
												"nameLocation": "16308:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 2241,
												"src": "16300:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2208,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16300:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2211,
												"mutability": "mutable",
												"name": "amountB",
												"nameLocation": "16333:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 2241,
												"src": "16325:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2210,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16325:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16242:104:10"
									},
									"returnParameters": {
										"id": 2213,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16356:0:10"
									},
									"scope": 2338,
									"src": "16218:299:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2259,
										"nodeType": "Block",
										"src": "16799:55:10",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2255,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2246,
															"src": "16836:2:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 2256,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2248,
															"src": "16840:6:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 2252,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2244,
																	"src": "16816:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 2251,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 819,
																"src": "16809:6:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$819_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 2253,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "16809:13:10",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$819",
																"typeString": "contract IERC20"
															}
														},
														"id": 2254,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "16823:12:10",
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 890,
														"src": "16809:26:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$819_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$819_$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 2257,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16809:38:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2258,
												"nodeType": "ExpressionStatement",
												"src": "16809:38:10"
											}
										]
									},
									"documentation": {
										"id": 2242,
										"nodeType": "StructuredDocumentation",
										"src": "16523:166:10",
										"text": " @dev Safely transfers tokens to recipient\n @param token Token address\n @param to Recipient address\n @param amount Transfer amount"
									},
									"id": 2260,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_safeTransfer",
									"nameLocation": "16703:13:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2249,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2244,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "16734:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 2260,
												"src": "16726:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2243,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16726:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2246,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "16757:2:10",
												"nodeType": "VariableDeclaration",
												"scope": 2260,
												"src": "16749:10:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2245,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16749:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2248,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "16777:6:10",
												"nodeType": "VariableDeclaration",
												"scope": 2260,
												"src": "16769:14:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2247,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16769:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16716:73:10"
									},
									"returnParameters": {
										"id": 2250,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16799:0:10"
									},
									"scope": 2338,
									"src": "16694:160:10",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2314,
										"nodeType": "Block",
										"src": "17236:242:10",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2270,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2268,
														"name": "y",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2263,
														"src": "17250:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "33",
														"id": 2269,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "17254:1:10",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_3_by_1",
															"typeString": "int_const 3"
														},
														"value": "3"
													},
													"src": "17250:5:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2306,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2304,
															"name": "y",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2263,
															"src": "17434:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"hexValue": "30",
															"id": 2305,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "17439:1:10",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "17434:6:10",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 2312,
													"nodeType": "IfStatement",
													"src": "17430:42:10",
													"trueBody": {
														"id": 2311,
														"nodeType": "Block",
														"src": "17442:30:10",
														"statements": [
															{
																"expression": {
																	"id": 2309,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftHandSide": {
																		"id": 2307,
																		"name": "z",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2266,
																		"src": "17456:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "Assignment",
																	"operator": "=",
																	"rightHandSide": {
																		"hexValue": "31",
																		"id": 2308,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "17460:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "17456:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 2310,
																"nodeType": "ExpressionStatement",
																"src": "17456:5:10"
															}
														]
													}
												},
												"id": 2313,
												"nodeType": "IfStatement",
												"src": "17246:226:10",
												"trueBody": {
													"id": 2303,
													"nodeType": "Block",
													"src": "17257:167:10",
													"statements": [
														{
															"expression": {
																"id": 2273,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2271,
																	"name": "z",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2266,
																	"src": "17271:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 2272,
																	"name": "y",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2263,
																	"src": "17275:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "17271:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2274,
															"nodeType": "ExpressionStatement",
															"src": "17271:5:10"
														},
														{
															"assignments": [
																2276
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 2276,
																	"mutability": "mutable",
																	"name": "x",
																	"nameLocation": "17298:1:10",
																	"nodeType": "VariableDeclaration",
																	"scope": 2303,
																	"src": "17290:9:10",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 2275,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "17290:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 2282,
															"initialValue": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2281,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2279,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2277,
																		"name": "y",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2263,
																		"src": "17302:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"hexValue": "32",
																		"id": 2278,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "17306:1:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_2_by_1",
																			"typeString": "int_const 2"
																		},
																		"value": "2"
																	},
																	"src": "17302:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "+",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2280,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "17310:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "17302:9:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "17290:21:10"
														},
														{
															"body": {
																"id": 2301,
																"nodeType": "Block",
																"src": "17339:75:10",
																"statements": [
																	{
																		"expression": {
																			"id": 2288,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 2286,
																				"name": "z",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2266,
																				"src": "17357:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"id": 2287,
																				"name": "x",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2276,
																				"src": "17361:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "17357:5:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 2289,
																		"nodeType": "ExpressionStatement",
																		"src": "17357:5:10"
																	},
																	{
																		"expression": {
																			"id": 2299,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"id": 2290,
																				"name": "x",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2276,
																				"src": "17380:1:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2298,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"components": [
																						{
																							"commonType": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							},
																							"id": 2295,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": false,
																							"lValueRequested": false,
																							"leftExpression": {
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 2293,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 2291,
																									"name": "y",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 2263,
																									"src": "17385:1:10",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "/",
																								"rightExpression": {
																									"id": 2292,
																									"name": "x",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 2276,
																									"src": "17389:1:10",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"src": "17385:5:10",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"nodeType": "BinaryOperation",
																							"operator": "+",
																							"rightExpression": {
																								"id": 2294,
																								"name": "x",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 2276,
																								"src": "17393:1:10",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							},
																							"src": "17385:9:10",
																							"typeDescriptions": {
																								"typeIdentifier": "t_uint256",
																								"typeString": "uint256"
																							}
																						}
																					],
																					"id": 2296,
																					"isConstant": false,
																					"isInlineArray": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"nodeType": "TupleExpression",
																					"src": "17384:11:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"hexValue": "32",
																					"id": 2297,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "17398:1:10",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_2_by_1",
																						"typeString": "int_const 2"
																					},
																					"value": "2"
																				},
																				"src": "17384:15:10",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "17380:19:10",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 2300,
																		"nodeType": "ExpressionStatement",
																		"src": "17380:19:10"
																	}
																]
															},
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2285,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2283,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2276,
																	"src": "17332:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 2284,
																	"name": "z",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2266,
																	"src": "17336:1:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "17332:5:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 2302,
															"nodeType": "WhileStatement",
															"src": "17325:89:10"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2261,
										"nodeType": "StructuredDocumentation",
										"src": "17004:167:10",
										"text": " @dev Calculates square root (for initial liquidity calculation)\n @param y Number to calculate square root of\n @return z Square root of y"
									},
									"id": 2315,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_sqrt",
									"nameLocation": "17185:5:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2264,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2263,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "17199:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 2315,
												"src": "17191:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2262,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17191:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17190:11:10"
									},
									"returnParameters": {
										"id": 2267,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2266,
												"mutability": "mutable",
												"name": "z",
												"nameLocation": "17233:1:10",
												"nodeType": "VariableDeclaration",
												"scope": 2315,
												"src": "17225:9:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2265,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17225:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17224:11:10"
									},
									"scope": 2338,
									"src": "17176:302:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2336,
										"nodeType": "Block",
										"src": "17876:58:10",
										"statements": [
											{
												"expression": {
													"id": 2334,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2327,
														"name": "amountB",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2325,
														"src": "17886:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2333,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2330,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2328,
																		"name": "amountA",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2318,
																		"src": "17897:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2329,
																		"name": "reserveB",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2322,
																		"src": "17907:8:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "17897:18:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2331,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "17896:20:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"id": 2332,
															"name": "reserveA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2320,
															"src": "17919:8:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "17896:31:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "17886:41:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2335,
												"nodeType": "ExpressionStatement",
												"src": "17886:41:10"
											}
										]
									},
									"documentation": {
										"id": 2316,
										"nodeType": "StructuredDocumentation",
										"src": "17484:248:10",
										"text": " @dev Calculates equivalent token amount to maintain ratio\n @param amountA Amount of tokenA\n @param reserveA Reserve of tokenA\n @param reserveB Reserve of tokenB\n @return amountB Equivalent amount of tokenB"
									},
									"id": 2337,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_quote",
									"nameLocation": "17746:6:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2323,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2318,
												"mutability": "mutable",
												"name": "amountA",
												"nameLocation": "17770:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 2337,
												"src": "17762:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2317,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17762:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2320,
												"mutability": "mutable",
												"name": "reserveA",
												"nameLocation": "17795:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 2337,
												"src": "17787:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2319,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17787:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2322,
												"mutability": "mutable",
												"name": "reserveB",
												"nameLocation": "17821:8:10",
												"nodeType": "VariableDeclaration",
												"scope": 2337,
												"src": "17813:16:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2321,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17813:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17752:83:10"
									},
									"returnParameters": {
										"id": 2326,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2325,
												"mutability": "mutable",
												"name": "amountB",
												"nameLocation": "17867:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 2337,
												"src": "17859:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2324,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17859:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17858:17:10"
									},
									"scope": 2338,
									"src": "17737:197:10",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2339,
							"src": "459:17477:10",
							"usedErrors": [
								101,
								106,
								111,
								120,
								125,
								130,
								857
							],
							"usedEvents": [
								753,
								762,
								1394,
								1409,
								1422
							]
						}
					],
					"src": "32:17904:10"
				},
				"id": 10
			},
			"contracts/interfaces/ISimpleSwap.sol": {
				"ast": {
					"absolutePath": "contracts/interfaces/ISimpleSwap.sol",
					"exportedSymbols": {
						"ISimpleSwap": [
							2430
						]
					},
					"id": 2431,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2340,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "32:23:11"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ISimpleSwap",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2341,
								"nodeType": "StructuredDocumentation",
								"src": "57:282:11",
								"text": " @title ISimpleSwap\n @dev Interface for the SimpleSwap decentralized exchange contract\n @notice Defines the core functionality for:\n - Adding/removing liquidity from token pairs\n - Swapping tokens with price calculations\n - Querying token prices and swap amounts"
							},
							"fullyImplemented": false,
							"id": 2430,
							"linearizedBaseContracts": [
								2430
							],
							"name": "ISimpleSwap",
							"nameLocation": "350:11:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2342,
										"nodeType": "StructuredDocumentation",
										"src": "517:702:11",
										"text": " @notice Adds liquidity to a token pair\n @dev Mints LP tokens representing pool share\n @param tokenA First token in pair\n @param tokenB Second token in pair\n @param amountADesired Desired amount of tokenA to deposit\n @param amountBDesired Desired amount of tokenB to deposit\n @param amountAMin Minimum acceptable amount of tokenA\n @param amountBMin Minimum acceptable amount of tokenB\n @param to Recipient of LP tokens\n @param deadline Transaction expiry timestamp\n @return amountA Actual amount of tokenA deposited\n @return amountB Actual amount of tokenB deposited\n @return liquidity Amount of LP tokens minted"
									},
									"functionSelector": "e8e33700",
									"id": 2367,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "addLiquidity",
									"nameLocation": "1233:12:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2359,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2344,
												"mutability": "mutable",
												"name": "tokenA",
												"nameLocation": "1263:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 2367,
												"src": "1255:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2343,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1255:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2346,
												"mutability": "mutable",
												"name": "tokenB",
												"nameLocation": "1287:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 2367,
												"src": "1279:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2345,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1279:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2348,
												"mutability": "mutable",
												"name": "amountADesired",
												"nameLocation": "1311:14:11",
												"nodeType": "VariableDeclaration",
												"scope": 2367,
												"src": "1303:22:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2347,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1303:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2350,
												"mutability": "mutable",
												"name": "amountBDesired",
												"nameLocation": "1343:14:11",
												"nodeType": "VariableDeclaration",
												"scope": 2367,
												"src": "1335:22:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2349,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1335:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2352,
												"mutability": "mutable",
												"name": "amountAMin",
												"nameLocation": "1375:10:11",
												"nodeType": "VariableDeclaration",
												"scope": 2367,
												"src": "1367:18:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2351,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1367:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2354,
												"mutability": "mutable",
												"name": "amountBMin",
												"nameLocation": "1403:10:11",
												"nodeType": "VariableDeclaration",
												"scope": 2367,
												"src": "1395:18:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2353,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1395:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2356,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1431:2:11",
												"nodeType": "VariableDeclaration",
												"scope": 2367,
												"src": "1423:10:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2355,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1423:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2358,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "1451:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 2367,
												"src": "1443:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2357,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1443:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1245:220:11"
									},
									"returnParameters": {
										"id": 2366,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2361,
												"mutability": "mutable",
												"name": "amountA",
												"nameLocation": "1521:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 2367,
												"src": "1513:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2360,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1513:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2363,
												"mutability": "mutable",
												"name": "amountB",
												"nameLocation": "1550:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 2367,
												"src": "1542:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2362,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1542:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2365,
												"mutability": "mutable",
												"name": "liquidity",
												"nameLocation": "1579:9:11",
												"nodeType": "VariableDeclaration",
												"scope": 2367,
												"src": "1571:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2364,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1571:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1499:99:11"
									},
									"scope": 2430,
									"src": "1224:375:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2368,
										"nodeType": "StructuredDocumentation",
										"src": "1605:576:11",
										"text": " @notice Removes liquidity from a token pair\n @dev Burns LP tokens and returns underlying assets\n @param tokenA First token in pair\n @param tokenB Second token in pair\n @param liquidity Amount of LP tokens to burn\n @param amountAMin Minimum acceptable amount of tokenA\n @param amountBMin Minimum acceptable amount of tokenB\n @param to Recipient of withdrawn tokens\n @param deadline Transaction expiry timestamp\n @return amountA Amount of tokenA withdrawn\n @return amountB Amount of tokenB withdrawn"
									},
									"functionSelector": "baa2abde",
									"id": 2389,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "removeLiquidity",
									"nameLocation": "2195:15:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2383,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2370,
												"mutability": "mutable",
												"name": "tokenA",
												"nameLocation": "2228:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 2389,
												"src": "2220:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2369,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2220:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2372,
												"mutability": "mutable",
												"name": "tokenB",
												"nameLocation": "2252:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 2389,
												"src": "2244:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2371,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2244:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2374,
												"mutability": "mutable",
												"name": "liquidity",
												"nameLocation": "2276:9:11",
												"nodeType": "VariableDeclaration",
												"scope": 2389,
												"src": "2268:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2373,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2268:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2376,
												"mutability": "mutable",
												"name": "amountAMin",
												"nameLocation": "2303:10:11",
												"nodeType": "VariableDeclaration",
												"scope": 2389,
												"src": "2295:18:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2375,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2295:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2378,
												"mutability": "mutable",
												"name": "amountBMin",
												"nameLocation": "2331:10:11",
												"nodeType": "VariableDeclaration",
												"scope": 2389,
												"src": "2323:18:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2377,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2323:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2380,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2359:2:11",
												"nodeType": "VariableDeclaration",
												"scope": 2389,
												"src": "2351:10:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2379,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2351:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2382,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "2379:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 2389,
												"src": "2371:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2381,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2371:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2210:183:11"
									},
									"returnParameters": {
										"id": 2388,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2385,
												"mutability": "mutable",
												"name": "amountA",
												"nameLocation": "2420:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 2389,
												"src": "2412:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2384,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2412:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2387,
												"mutability": "mutable",
												"name": "amountB",
												"nameLocation": "2437:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 2389,
												"src": "2429:15:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2386,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2429:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2411:34:11"
									},
									"scope": 2430,
									"src": "2186:260:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2390,
										"nodeType": "StructuredDocumentation",
										"src": "2599:456:11",
										"text": " @notice Swaps exact input tokens for output tokens\n @dev Uses constant product market maker formula\n @param amountIn Exact amount of input tokens\n @param amountOutMin Minimum acceptable output amount\n @param path Array with [inputToken, outputToken]\n @param to Recipient of output tokens\n @param deadline Transaction expiry timestamp\n @return amounts Array containing [inputAmount, outputAmount]"
									},
									"functionSelector": "38ed1739",
									"id": 2407,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "swapExactTokensForTokens",
									"nameLocation": "3069:24:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2402,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2392,
												"mutability": "mutable",
												"name": "amountIn",
												"nameLocation": "3111:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 2407,
												"src": "3103:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2391,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3103:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2394,
												"mutability": "mutable",
												"name": "amountOutMin",
												"nameLocation": "3137:12:11",
												"nodeType": "VariableDeclaration",
												"scope": 2407,
												"src": "3129:20:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2393,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3129:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2397,
												"mutability": "mutable",
												"name": "path",
												"nameLocation": "3178:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 2407,
												"src": "3159:23:11",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 2395,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "3159:7:11",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 2396,
													"nodeType": "ArrayTypeName",
													"src": "3159:9:11",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2399,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3200:2:11",
												"nodeType": "VariableDeclaration",
												"scope": 2407,
												"src": "3192:10:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2398,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3192:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2401,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "3220:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 2407,
												"src": "3212:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2400,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3212:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3093:141:11"
									},
									"returnParameters": {
										"id": 2406,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2405,
												"mutability": "mutable",
												"name": "amounts",
												"nameLocation": "3270:7:11",
												"nodeType": "VariableDeclaration",
												"scope": 2407,
												"src": "3253:24:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 2403,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "3253:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2404,
													"nodeType": "ArrayTypeName",
													"src": "3253:9:11",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3252:26:11"
									},
									"scope": 2430,
									"src": "3060:219:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2408,
										"nodeType": "StructuredDocumentation",
										"src": "3432:262:11",
										"text": " @notice Gets price of tokenA in terms of tokenB\n @dev Price is calculated as reserveB/reserveA\n @param tokenA First token in pair\n @param tokenB Second token in pair\n @return price Price ratio with 18 decimals precision"
									},
									"functionSelector": "ac41865a",
									"id": 2417,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getPrice",
									"nameLocation": "3708:8:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2413,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2410,
												"mutability": "mutable",
												"name": "tokenA",
												"nameLocation": "3725:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 2417,
												"src": "3717:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2409,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3717:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2412,
												"mutability": "mutable",
												"name": "tokenB",
												"nameLocation": "3741:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 2417,
												"src": "3733:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2411,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3733:7:11",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3716:32:11"
									},
									"returnParameters": {
										"id": 2416,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2415,
												"mutability": "mutable",
												"name": "price",
												"nameLocation": "3804:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 2417,
												"src": "3796:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2414,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3796:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3795:15:11"
									},
									"scope": 2430,
									"src": "3699:112:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 2418,
										"nodeType": "StructuredDocumentation",
										"src": "3817:340:11",
										"text": " @notice Calculates output amount for given input\n @dev Uses formula: amountOut = (amountIn * reserveOut) / (reserveIn + amountIn)\n @param amountIn Input token amount\n @param reserveIn Reserve of input token\n @param reserveOut Reserve of output token\n @return amountOut Expected output amount"
									},
									"functionSelector": "054d50d4",
									"id": 2429,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getAmountOut",
									"nameLocation": "4171:12:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2425,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2420,
												"mutability": "mutable",
												"name": "amountIn",
												"nameLocation": "4201:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 2429,
												"src": "4193:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2419,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4193:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2422,
												"mutability": "mutable",
												"name": "reserveIn",
												"nameLocation": "4227:9:11",
												"nodeType": "VariableDeclaration",
												"scope": 2429,
												"src": "4219:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2421,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4219:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2424,
												"mutability": "mutable",
												"name": "reserveOut",
												"nameLocation": "4254:10:11",
												"nodeType": "VariableDeclaration",
												"scope": 2429,
												"src": "4246:18:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2423,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4246:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4183:87:11"
									},
									"returnParameters": {
										"id": 2428,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2427,
												"mutability": "mutable",
												"name": "amountOut",
												"nameLocation": "4302:9:11",
												"nodeType": "VariableDeclaration",
												"scope": 2429,
												"src": "4294:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2426,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4294:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4293:19:11"
									},
									"scope": 2430,
									"src": "4162:151:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 2431,
							"src": "340:3975:11",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "32:4284:11"
				},
				"id": 11
			}
		}
	}
}