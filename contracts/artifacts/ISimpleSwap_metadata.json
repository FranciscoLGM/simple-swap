{
	"compiler": {
		"version": "0.8.30+commit.73712a01"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenA",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenB",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amountADesired",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountBDesired",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountAMin",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountBMin",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					}
				],
				"name": "addLiquidity",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountA",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountB",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "liquidity",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amountIn",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "reserveIn",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "reserveOut",
						"type": "uint256"
					}
				],
				"name": "getAmountOut",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountOut",
						"type": "uint256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenA",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenB",
						"type": "address"
					}
				],
				"name": "getPrice",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "price",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenA",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenB",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "liquidity",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountAMin",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountBMin",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					}
				],
				"name": "removeLiquidity",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountA",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountB",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amountIn",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amountOutMin",
						"type": "uint256"
					},
					{
						"internalType": "address[]",
						"name": "path",
						"type": "address[]"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					}
				],
				"name": "swapExactTokensForTokens",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "amounts",
						"type": "uint256[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "Interface for the SimpleSwap decentralized exchange contract",
			"kind": "dev",
			"methods": {
				"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": {
					"details": "Mints LP tokens representing pool share",
					"params": {
						"amountADesired": "Desired amount of tokenA to deposit",
						"amountAMin": "Minimum acceptable amount of tokenA",
						"amountBDesired": "Desired amount of tokenB to deposit",
						"amountBMin": "Minimum acceptable amount of tokenB",
						"deadline": "Transaction expiry timestamp",
						"to": "Recipient of LP tokens",
						"tokenA": "First token in pair",
						"tokenB": "Second token in pair"
					},
					"returns": {
						"amountA": "Actual amount of tokenA deposited",
						"amountB": "Actual amount of tokenB deposited",
						"liquidity": "Amount of LP tokens minted"
					}
				},
				"getAmountOut(uint256,uint256,uint256)": {
					"details": "Uses formula: amountOut = (amountIn * reserveOut) / (reserveIn + amountIn)",
					"params": {
						"amountIn": "Input token amount",
						"reserveIn": "Reserve of input token",
						"reserveOut": "Reserve of output token"
					},
					"returns": {
						"amountOut": "Expected output amount"
					}
				},
				"getPrice(address,address)": {
					"details": "Price is calculated as reserveB/reserveA",
					"params": {
						"tokenA": "First token in pair",
						"tokenB": "Second token in pair"
					},
					"returns": {
						"price": "Price ratio with 18 decimals precision"
					}
				},
				"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": {
					"details": "Burns LP tokens and returns underlying assets",
					"params": {
						"amountAMin": "Minimum acceptable amount of tokenA",
						"amountBMin": "Minimum acceptable amount of tokenB",
						"deadline": "Transaction expiry timestamp",
						"liquidity": "Amount of LP tokens to burn",
						"to": "Recipient of withdrawn tokens",
						"tokenA": "First token in pair",
						"tokenB": "Second token in pair"
					},
					"returns": {
						"amountA": "Amount of tokenA withdrawn",
						"amountB": "Amount of tokenB withdrawn"
					}
				},
				"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": {
					"details": "Uses constant product market maker formula",
					"params": {
						"amountIn": "Exact amount of input tokens",
						"amountOutMin": "Minimum acceptable output amount",
						"deadline": "Transaction expiry timestamp",
						"path": "Array with [inputToken, outputToken]",
						"to": "Recipient of output tokens"
					},
					"returns": {
						"amounts": "Array containing [inputAmount, outputAmount]"
					}
				}
			},
			"title": "ISimpleSwap",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": {
					"notice": "Adds liquidity to a token pair"
				},
				"getAmountOut(uint256,uint256,uint256)": {
					"notice": "Calculates output amount for given input"
				},
				"getPrice(address,address)": {
					"notice": "Gets price of tokenA in terms of tokenB"
				},
				"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": {
					"notice": "Removes liquidity from a token pair"
				},
				"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": {
					"notice": "Swaps exact input tokens for output tokens"
				}
			},
			"notice": "Defines the core functionality for: - Adding/removing liquidity from token pairs - Swapping tokens with price calculations - Querying token prices and swap amounts",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/SimpleSwap_flattened.sol": "ISimpleSwap"
		},
		"evmVersion": "prague",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": [],
		"viaIR": true
	},
	"sources": {
		"contracts/SimpleSwap_flattened.sol": {
			"keccak256": "0xf6857f874f9ae4e4b13e025897425c36ac3b78258a7862480c6ebc8f7396ff0e",
			"license": "MIT",
			"urls": [
				"bzz-raw://c3a1fb18850bb029db67632ba1eaab42bf1eb6ba39521199f8c6e5c1c02f4ec2",
				"dweb:/ipfs/QmSXjyDJfQBAPAtFhg56f4hTNFsHMh6cECPi9EmcpfQSMH"
			]
		}
	},
	"version": 1
}